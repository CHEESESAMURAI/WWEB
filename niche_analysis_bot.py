import asyncio
from typing import Dict, List
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatAction

from niche_analysis import NicheAnalyzer, RealTimeMonitor
from niche_db import NicheDatabase
from niche_visualization import NicheVisualizer
from category_analyzer import CategoryAnalyzer

# Initialize components
niche_analyzer = NicheAnalyzer()
niche_db = NicheDatabase()
niche_visualizer = NicheVisualizer()

# Bot token
BOT_TOKEN = "6458024697:AAHAPSC6KvZaaAgtmkCy08Id0Pq3o87IG-A"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# State tracking
pending_action = {}  # Dictionary to store user actions
pending_niche_analysis = set()
pending_niche_report = set()
pending_niche_dashboard = set()

def get_niche_menu_kb():
    """Get keyboard for niche analysis menu"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="niche_analyze")],
        [InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="niche_report")],
        [InlineKeyboardButton(text="üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å", callback_data="niche_dashboard")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])

@dp.message(Command("niche"))
async def niche_command(message: types.Message):
    """Handle /niche command"""
    await message.answer(
        "üîç *–ê–Ω–∞–ª–∏–∑ –Ω–∏—à –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_niche_menu_kb()
    )

@dp.callback_query(lambda c: c.data == "niche_analyze")
async def niche_analyze_handler(callback: types.CallbackQuery):
    """Handle niche analysis request"""
    user_id = callback.from_user.id
    pending_action[user_id] = {"action": "analysis_category"}
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Wildberries –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="niche_back")]
        ])
    )

def escape_markdown(text: str) -> str:
    """Escape markdown special characters"""
    escape_chars = '_*[]()~`>#+-=|{}.!'
    return "".join(f"\\{c}" if c in escape_chars else c for c in str(text))

def back_kb():
    """Get back button keyboard"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def main_menu_kb():
    """Get main menu keyboard"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="niche_analyze")],
        [InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="niche_report")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
    ])

async def analyze_wb_category(category_url: str) -> str:
    """Analyze Wildberries category and return formatted report"""
    analyzer = CategoryAnalyzer()
    try:
        results = await analyzer.analyze_category(category_url)
        
        if results.get("status") == "error":
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        
        stats = results["statistics"]
        trends = results["trends"]
        opportunities = results["opportunities"]
        
        # Format the analysis results
        report = [
            f"üìä *–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {escape_markdown(results['category_name'])}*\n",
            f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {results['total_products']}\n",
            "\nüí∞ *–¶–µ–Ω–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*",
            f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {stats['price_stats']['min']} ‚ÇΩ",
            f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {stats['price_stats']['max']} ‚ÇΩ",
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {int(stats['price_stats']['mean'])} ‚ÇΩ",
            f"‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {int(stats['price_stats']['median'])} ‚ÇΩ\n",
            "\nüìà *–ü—Ä–æ–¥–∞–∂–∏:*",
            f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {stats['sales_stats']['total']}",
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å: {int(stats['sales_stats']['avg_daily'])}\n",
            "\n‚≠ê *–†–µ–π—Ç–∏–Ω–≥–∏:*",
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['rating_stats']['avg_rating']:.1f}",
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {int(stats['rating_stats']['avg_reviews'])}\n",
            "\nüìä *–¢—Ä–µ–Ω–¥—ã:*",
            f"‚Ä¢ –¢—Ä–µ–Ω–¥ —Ü–µ–Ω: {_translate_trend(trends['price_trend'])}",
            f"‚Ä¢ –¢—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂: {_translate_trend(trends['sales_trend'])}",
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏: {_translate_competition(trends['competition_level'])}\n",
            "\nüí° *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*"
        ]
        
        if opportunities:
            for opp in opportunities:
                confidence_percent = int(opp['confidence'] * 100)
                report.append(f"‚Ä¢ {escape_markdown(opp['description'])} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_percent}%)")
        else:
            report.append("‚Ä¢ –Ø–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        return "\n".join(report)
    finally:
        analyzer.close()

def _translate_trend(trend: str) -> str:
    """Translate trend to Russian"""
    translations = {
        "rising": "‚ÜóÔ∏è –†–∞—Å—Ç—É—â–∏–π",
        "falling": "‚ÜòÔ∏è –ü–∞–¥–∞—é—â–∏–π",
        "neutral": "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π"
    }
    return translations.get(trend, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

def _translate_competition(level: str) -> str:
    """Translate competition level to Russian"""
    translations = {
        "high": "üî¥ –í—ã—Å–æ–∫–∏–π",
        "medium": "üü° –°—Ä–µ–¥–Ω–∏–π",
        "low": "üü¢ –ù–∏–∑–∫–∏–π"
    }
    return translations.get(level, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

@dp.message()
async def text_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id in pending_action:
        action = pending_action[user_id]["action"]

        if action == "analysis_category":
            category_url = message.text.strip()
            if not category_url.startswith("https://www.wildberries.ru/catalog/"):
                await message.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é Wildberries\n"
                    "–ü—Ä–∏–º–µ—Ä: https://www.wildberries.ru/catalog/muzhchinam/odezhda/tolstovki",
                    reply_markup=back_kb()
                )
                return

            await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
            try:
                analysis_result = await analyze_wb_category(category_url)
                await message.answer(analysis_result, reply_markup=main_menu_kb())
            except Exception as e:
                await message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}",
                    reply_markup=main_menu_kb()
                )
            finally:
                pending_action.pop(user_id, None)
            return

        # ... rest of the existing message handler code ...

@dp.callback_query(lambda c: c.data == "niche_report")
async def niche_report_handler(callback: types.CallbackQuery):
    """Handle niche report request"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="niche_back")]
        ])
    )
    pending_niche_report.add(callback.message.chat.id)

@dp.callback_query(lambda c: c.data == "niche_dashboard")
async def niche_dashboard_handler(callback: types.CallbackQuery):
    """Handle interactive dashboard request"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="niche_back")]
        ])
    )
    pending_niche_dashboard.add(callback.message.chat.id)

@dp.callback_query(lambda c: c.data == "niche_back")
async def niche_back_handler(callback: types.CallbackQuery):
    """Handle back button in niche menu"""
    await callback.message.edit_text(
        "üîç *–ê–Ω–∞–ª–∏–∑ –Ω–∏—à –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_niche_menu_kb()
    )

async def main():
    """Main function to run the bot"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 