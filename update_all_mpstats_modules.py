#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö MPSTATS API –Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –ø–æ–¥—Ö–æ–¥
"""
import os
import re

def find_mpstats_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ MPSTATS API"""
    mpstats_files = []
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    for file in os.listdir('.'):
        if file.endswith('.py') and file != __file__:
            try:
                with open(file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if 'mpstats.io/api' in content:
                        mpstats_files.append(file)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")
    
    return mpstats_files

def update_headers_in_file(filename):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ MPSTATS –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç –≤ –Ω–∞—á–∞–ª–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'from mpstats_browser_utils import' not in content:
            # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ import-–æ–≤
            import_lines = []
            other_lines = []
            in_imports = True
            
            for line in content.split('\n'):
                if line.strip().startswith('import ') or line.strip().startswith('from ') or line.strip() == '':
                    if in_imports:
                        import_lines.append(line)
                    else:
                        other_lines.append(line)
                else:
                    in_imports = False
                    other_lines.append(line)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
            import_lines.append('from mpstats_browser_utils import get_mpstats_headers, mpstats_api_request')
            
            content = '\n'.join(import_lines + other_lines)
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ
        old_headers_patterns = [
            r'headers\s*=\s*{\s*["\']X-Mpstats-TOKEN["\']:\s*MPSTATS_API_KEY[^}]*}',
            r'["\']X-Mpstats-TOKEN["\']:\s*MPSTATS_API_KEY,?\s*["\']Content-Type["\']:\s*["\']application/json["\']',
            r'["\']Content-Type["\']:\s*["\']application/json["\'][^}]*["\']X-Mpstats-TOKEN["\']:\s*MPSTATS_API_KEY'
        ]
        
        for pattern in old_headers_patterns:
            content = re.sub(pattern, 'headers = get_mpstats_headers()', content, flags=re.MULTILINE | re.DOTALL)
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã aiohttp –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∞–º –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
        # –≠—Ç–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        return content
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("üîÑ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö MPSTATS API...")
    
    mpstats_files = find_mpstats_files()
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(mpstats_files)}")
    for file in mpstats_files:
        print(f"  ‚Ä¢ {file}")
    
    print("\nüîß –§–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é:")
    
    key_functions = [
        "get_mpsta_data",
        "get_seasonality_annual_data", 
        "get_seasonality_weekly_data",
        "get_mpstats_category_data",
        "get_external_ads_data"
    ]
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    priority_files = [
        "new_bot.py",
        "mpstats_item_sales.py", 
        "product_data_merger.py",
        "product_mpstat.py",
        "brand_analysis.py",
        "niche_analysis_functions.py"
    ]
    
    for file in priority_files:
        if os.path.exists(file):
            print(f"\nüìù {file}:")
            print("  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
            print("  1. –î–æ–±–∞–≤–∏—Ç—å: from mpstats_browser_utils import get_mpstats_headers, mpstats_api_request")
            print("  2. –ó–∞–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞: headers = get_mpstats_headers()")
            print("  3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: data = await mpstats_api_request(url, params)")
    
    print("\n‚úÖ –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:")
    print("üåê –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ User-Agent –∏ Referer –∑–∞–≥–æ–ª–æ–≤–∫–∏")
    print("üîß –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫") 
    print("‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã")
    print("üìä –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("üõ°Ô∏è –õ—É—á—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
    
    print(f"\nüéØ –£–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç:")
    print("‚úÖ Oracle Queries (oracle_queries.py)")
    print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã (mpstats_browser_utils.py)")
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    
    print(f"\nüìã –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ:")
    print("1. –û–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤ new_bot.py (–æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç)")
    print("2. –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    print("3. –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª–∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏") 
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏")

if __name__ == "__main__":
    main() 