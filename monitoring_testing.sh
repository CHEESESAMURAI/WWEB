#!/bin/bash

echo "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Wild Analytics..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    local service=$1
    local url=$2
    local description=$3
    
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ $description..."
    if curl -s -f "$url" > /dev/null; then
        log "‚úÖ $description —Ä–∞–±–æ—Ç–∞–µ—Ç"
        return 0
    else
        error "‚ùå $description –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
test_performance() {
    local url=$1
    local description=$2
    
    log "‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ $description..."
    
    # –¢–µ—Å—Ç —Å Apache Bench
    if command -v ab &> /dev/null; then
        log "üìä Apache Bench —Ç–µ—Å—Ç (10 –∑–∞–ø—Ä–æ—Å–æ–≤, 2 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö):"
        ab -n 10 -c 2 "$url" 2>/dev/null | grep -E "(Requests per second|Time per request|Failed requests)"
    else
        warn "Apache Bench –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: apt install apache2-utils"
    fi
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    local start_time=$(date +%s%N)
    curl -s "$url" > /dev/null
    local end_time=$(date +%s%N)
    local response_time=$(( (end_time - start_time) / 1000000 ))
    log "‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${response_time}ms"
}

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd /opt/wild-analytics

log "üöÄ –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
log "üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤..."
echo "CPU –∏ –ø–∞–º—è—Ç—å:"
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"

echo "–î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:"
df -h /opt/wild-analytics

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
log "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤..."
echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ backend:"
docker-compose -f docker-compose.prod.yml logs --tail=10 backend

echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ frontend:"
docker-compose -f docker-compose.prod.yml logs --tail=10 frontend

echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ nginx:"
docker-compose -f docker-compose.prod.yml logs --tail=10 nginx

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
log "üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
if docker exec wild-analytics-postgres pg_isready -U wild_analytics > /dev/null 2>&1; then
    log "‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    local db_size=$(docker exec wild-analytics-postgres psql -U wild_analytics -d wild_analytics -t -c "SELECT pg_size_pretty(pg_database_size('wild_analytics'));" 2>/dev/null | xargs)
    log "üìä –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $db_size"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
    local user_count=$(docker exec wild-analytics-postgres psql -U wild_analytics -d wild_analytics -t -c "SELECT COUNT(*) FROM users;" 2>/dev/null | xargs)
    log "üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $user_count"
    
    local analysis_count=$(docker exec wild-analytics-postgres psql -U wild_analytics -d wild_analytics -t -c "SELECT COUNT(*) FROM analyses;" 2>/dev/null | xargs)
    log "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤: $analysis_count"
else
    error "‚ùå PostgreSQL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤
log "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤..."
netstat -tlnp | grep -E "(3000|8000|80|443)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–º–µ–Ω)
if [ -f "/etc/letsencrypt/live/$(hostname)/fullchain.pem" ]; then
    log "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
    local cert_expiry=$(openssl x509 -enddate -noout -in /etc/letsencrypt/live/$(hostname)/fullchain.pem | cut -d= -f2)
    log "üìÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: $cert_expiry"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–∞–ø–æ–≤
log "üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–∞–ø–æ–≤..."
local backup_count=$(find /opt/wild-analytics/backups -name "*.sql" -o -name "*.tar.gz" | wc -l)
log "üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤: $backup_count"

if [ $backup_count -gt 0 ]; then
    local latest_backup=$(find /opt/wild-analytics/backups -name "*.sql" -o -name "*.tar.gz" -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2-)
    log "üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: $latest_backup"
fi

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
log "üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤..."

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
if [ -f "/etc/letsencrypt/live/$(hostname)/fullchain.pem" ]; then
    BASE_URL="https://$(hostname)"
else
    BASE_URL="http://93.127.214.183:8000"
fi

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
check_status "health" "$BASE_URL/health" "Health check"
check_status "root" "$BASE_URL/" "Root endpoint"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
test_performance "$BASE_URL/health" "Health endpoint"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
log "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend..."
if [ -f "/etc/letsencrypt/live/$(hostname)/fullchain.pem" ]; then
    FRONTEND_URL="https://$(hostname)"
else
    FRONTEND_URL="http://93.127.214.183:3000"
fi

check_status "frontend" "$FRONTEND_URL" "Frontend"
test_performance "$FRONTEND_URL" "Frontend"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
log "üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ UFW
if ufw status | grep -q "Status: active"; then
    log "‚úÖ UFW Firewall –∞–∫—Ç–∏–≤–µ–Ω"
else
    warn "‚ö†Ô∏è UFW Firewall –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Fail2Ban
if systemctl is-active --quiet fail2ban; then
    log "‚úÖ Fail2Ban –∞–∫—Ç–∏–≤–µ–Ω"
else
    warn "‚ö†Ô∏è Fail2Ban –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if grep -q "PermitRootLogin no" /etc/ssh/sshd_config; then
    log "‚úÖ Root login –æ—Ç–∫–ª—é—á–µ–Ω"
else
    warn "‚ö†Ô∏è Root login –≤–∫–ª—é—á–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã
log "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã..."
local updates_available=$(apt list --upgradable 2>/dev/null | wc -l)
if [ $updates_available -gt 1 ]; then
    warn "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: $((updates_available - 1))"
else
    log "‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
log "üìã –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞..."
cat > monitoring_report.txt << EOF
# Wild Analytics - –û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
–î–∞—Ç–∞: $(date)

## –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
$(docker ps --format "table {{.Names}}\t{{.Status}}")

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
$(docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}")

## –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
$(df -h /opt/wild-analytics)

## –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
- –°—Ç–∞—Ç—É—Å: $(docker exec wild-analytics-postgres pg_isready -U wild_analytics > /dev/null 2>&1 && echo "OK" || echo "ERROR")
- –†–∞–∑–º–µ—Ä: $(docker exec wild-analytics-postgres psql -U wild_analytics -d wild_analytics -t -c "SELECT pg_size_pretty(pg_database_size('wild_analytics'));" 2>/dev/null | xargs)
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: $(docker exec wild-analytics-postgres psql -U wild_analytics -d wild_analytics -t -c "SELECT COUNT(*) FROM users;" 2>/dev/null | xargs)
- –ê–Ω–∞–ª–∏–∑—ã: $(docker exec wild-analytics-postgres psql -U wild_analytics -d wild_analytics -t -c "SELECT COUNT(*) FROM analyses;" 2>/dev/null | xargs)

## –ë—ç–∫–∞–ø—ã
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: $backup_count
- –ü–æ—Å–ª–µ–¥–Ω–∏–π: $latest_backup

## –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- UFW: $(ufw status | grep "Status" | cut -d' ' -f2)
- Fail2Ban: $(systemctl is-active fail2ban)
- Root SSH: $(grep "PermitRootLogin" /etc/ssh/sshd_config | cut -d' ' -f2)

## –î–æ—Å—Ç—É–ø
- Frontend: $FRONTEND_URL
- Backend: $BASE_URL
- Health: $BASE_URL/health
EOF

log "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!"
log "üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: /opt/wild-analytics/monitoring_report.txt"

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
log ""
log "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
if [ $updates_available -gt 1 ]; then
    log "  - –û–±–Ω–æ–≤–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: apt update && apt upgrade"
fi
if ! ufw status | grep -q "Status: active"; then
    log "  - –í–∫–ª—é—á–∏—Ç–µ UFW: ufw enable"
fi
if ! systemctl is-active --quiet fail2ban; then
    log "  - –í–∫–ª—é—á–∏—Ç–µ Fail2Ban: systemctl start fail2ban"
fi
if [ $backup_count -eq 0 ]; then
    log "  - –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –±—ç–∫–∞–ø: ./backup.sh"
fi

log ""
log "üîç –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
log "  - –õ–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs"
log "  - –°—Ç–∞—Ç—É—Å: systemctl status wild-analytics"
log "  - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: htop, iotop, nethogs" 