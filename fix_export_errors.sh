#!/bin/bash

echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π..."

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
docker-compose down

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å—Ç—Ä–∞–Ω–∏—Ü
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü..."

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
pages=("BrandAnalysis" "SupplierAnalysis" "CategoryAnalysis" "SeasonalityAnalysis" "AIHelper" "OracleQueries" "SupplyPlanning" "BloggerSearch" "ExternalAnalysis" "AdMonitoring" "GlobalSearch" "Profile")

for page in "${pages[@]}"; do
  file_path="wild-analytics-web/src/pages/${page}.tsx"
  
  if [ -f "$file_path" ]; then
    echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ $file_path"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ export default
    if ! grep -q "export default" "$file_path"; then
      echo "‚ùå –§–∞–π–ª $page.tsx –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º..."
      
      # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      cat > "$file_path" << EOF
import React from 'react';

const ${page}: React.FC = () => {
  return (
    <div>
      <h2>${page}</h2>
      <p>–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.</p>
    </div>
  );
};

export default ${page};
EOF
    else
      echo "‚úÖ $page.tsx —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"
    fi
  else
    echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ $page.tsx"
    cat > "$file_path" << EOF
import React from 'react';

const ${page}: React.FC = () => {
  return (
    <div>
      <h2>${page}</h2>
      <p>–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.</p>
    </div>
  );
};

export default ${page};
EOF
  fi
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."

# Dashboard
if [ ! -f "wild-analytics-web/src/pages/Dashboard.tsx" ]; then
  echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ Dashboard.tsx"
  cat > wild-analytics-web/src/pages/Dashboard.tsx << 'EOF'
import React from 'react';

const Dashboard: React.FC = () => {
  return (
    <div>
      <h2>Dashboard</h2>
      <p>–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.</p>
    </div>
  );
};

export default Dashboard;
EOF
fi

# ProductAnalysis
if [ ! -f "wild-analytics-web/src/pages/ProductAnalysis.tsx" ]; then
  echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ ProductAnalysis.tsx"
  cat > wild-analytics-web/src/pages/ProductAnalysis.tsx << 'EOF'
import React from 'react';

const ProductAnalysis: React.FC = () => {
  return (
    <div>
      <h2>Product Analysis</h2>
      <p>–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤.</p>
    </div>
  );
};

export default ProductAnalysis;
EOF
fi

# Login
if [ ! -f "wild-analytics-web/src/pages/Login.tsx" ]; then
  echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ Login.tsx"
  cat > wild-analytics-web/src/pages/Login.tsx << 'EOF'
import React from 'react';

const Login: React.FC = () => {
  return (
    <div>
      <h2>Login</h2>
      <p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞.</p>
    </div>
  );
};

export default Login;
EOF
fi

# Register
if [ ! -f "wild-analytics-web/src/pages/Register.tsx" ]; then
  echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ Register.tsx"
  cat > wild-analytics-web/src/pages/Register.tsx << 'EOF'
import React from 'react';

const Register: React.FC = () => {
  return (
    <div>
      <h2>Register</h2>
      <p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</p>
    </div>
  );
};

export default Register;
EOF
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º App.tsx
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ App.tsx..."
if [ -f "wild-analytics-web/src/App.tsx" ]; then
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ export default
  if ! grep -q "export default" "wild-analytics-web/src/App.tsx"; then
    echo "‚ùå App.tsx –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º..."
    echo "export default App;" >> wild-analytics-web/src/App.tsx
  fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º MainLayout
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ MainLayout.tsx..."
if [ -f "wild-analytics-web/src/layouts/MainLayout.tsx" ]; then
  if ! grep -q "export default" "wild-analytics-web/src/layouts/MainLayout.tsx"; then
    echo "‚ùå MainLayout.tsx –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º..."
    echo "export default MainLayout;" >> wild-analytics-web/src/layouts/MainLayout.tsx
  fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Sidebar
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ Sidebar.tsx..."
if [ -f "wild-analytics-web/src/components/Layout/Sidebar.tsx" ]; then
  if ! grep -q "export default" "wild-analytics-web/src/components/Layout/Sidebar.tsx"; then
    echo "‚ùå Sidebar.tsx –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º..."
    echo "export default Sidebar;" >> wild-analytics-web/src/components/Layout/Sidebar.tsx
  fi
fi

echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker system prune -f

echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑–∞..."
docker build -t wild-analytics-frontend ./wild-analytics-web

echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose up -d

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (45 —Å–µ–∫—É–Ω–¥)..."
sleep 45

echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker ps

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API:"
curl -s http://localhost:8000/health || echo "‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

echo ""
echo "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üåê Frontend: http://93.127.214.183:3000"
echo "üîó Backend API: http://93.127.214.183:8000"
echo ""
echo "üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:"
echo "Email: test@example.com"
echo "Password: password123"
echo ""
echo "üéØ –¢–µ–ø–µ—Ä—å –≤—Å–µ –º–æ–¥—É–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã!" 