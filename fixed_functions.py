async def get_external_ads_data(query):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–Ω–µ—à–Ω–µ–π —Ä–µ–∫–ª–∞–º–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ MPSTAT API"""
    try:
        # URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤–Ω–µ—à–Ω–µ–π —Ä–µ–∫–ª–∞–º–µ
        url = f"https://mpstats.io/api/wb/get/external-ads?query={query}"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        headers = {
            "X-Mpstats-TOKEN": MPSTA_API_KEY,
            "Content-Type": "application/json"
        }
        
        logger.info(f"Sending request to MPSTATS API: {url}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"Successfully got external ads data for query: {query}")
                    return data
                else:
                    logger.error(f"Error getting external ads data: {response.status} - {await response.text()}")
                    return {"error": f"–û—à–∏–±–∫–∞ API: {response.status}"}
    except Exception as e:
        logger.error(f"Exception getting external ads data: {str(e)}")
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–Ω–µ—à–Ω–µ–π —Ä–µ–∫–ª–∞–º–µ: {str(e)}"}

def format_external_analysis(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–Ω–µ—à–Ω–µ–π —Ä–µ–∫–ª–∞–º–µ –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥"""
    try:
        if "error" in data:
            return f"‚ùå –û—à–∏–±–∫–∞: {data['error']}", []
        
        query = data.get("query", "")
        is_article = data.get("is_article", False)
        product_info = data.get("product_info", {})
        ad_items = data.get("ad_items", [])
        bloggers_data = data.get("bloggers_data", {})
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        chart_files = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        if is_article:
            product_name = product_info.get("name", "")
            brand = product_info.get("brand", "")
            result = f"üìä *–ê–Ω–∞–ª–∏–∑ –≤–Ω–µ—à–Ω–µ–π —Ä–µ–∫–ª–∞–º—ã*\n\n"
            result += f"*–ê—Ä—Ç–∏–∫—É–ª:* {query}\n"
            if product_name:
                result += f"*–¢–æ–≤–∞—Ä:* {product_name}\n"
            if brand:
                result += f"*–ë—Ä–µ–Ω–¥:* {brand}\n"
        else:
            result = f"üìä *–ê–Ω–∞–ª–∏–∑ –≤–Ω–µ—à–Ω–µ–π —Ä–µ–∫–ª–∞–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É:* {query}\n\n"
        
        if not ad_items:
            result += "\n‚ö†Ô∏è *–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö.*"
            return result, chart_files
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö
        result += f"\nüì£ *–ù–∞–π–¥–µ–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:* {len(ad_items)}\n"
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö
        result += "\n*–¢–∞–±–ª–∏—Ü–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:*\n"
        result += "```\n"
        result += "‚Ññ  | –ü–ª–æ—â–∞–¥–∫–∞ | –ë–ª–æ–≥–µ—Ä | –î–∞—Ç–∞ | –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å | –í—ã—Ä—É—á–∫–∞ | –ó–∞–∫–∞–∑—ã | –ü—Ä–∏—Ä–æ—Å—Ç(%)\n"
        result += "---|-----------|---------|---------|---------|---------|---------|---------\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ (–Ω–µ –±–æ–ª–µ–µ 10)
        for i, ad in enumerate(ad_items[:10], 1):
            platform = ad.get("platform", "‚Äî")
            blogger = ad.get("blogger", {}).get("name", "‚Äî")
            date = ad.get("date", "‚Äî")
            if date and "T" in date:
                date = date.split("T")[0]
            
            total_frequency = ad.get("total_frequency_3days", 0)
            total_revenue = ad.get("total_revenue_3days", 0)
            orders = ad.get("orders", 0)
            growth_percent = ad.get("sales_growth_percent", 0)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            result += f"{i} | {platform[:8]}... | {blogger[:8]}... | {date} | {total_frequency} | {total_revenue:,.0f}‚ÇΩ | {orders} | {growth_percent:.1f}%\n"
        
        result += "```\n"
        
        # –ï—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        if len(ad_items) > 10:
            result += f"_–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(ad_items)} –ø—É–±–ª–∏–∫–∞—Ü–∏–π_\n"
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        result += "\nüìã *–í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        
        if bloggers_data:
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–≥–µ—Ä–æ–≤ —Å –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
            best_growth_bloggers = sorted(bloggers_data.items(), key=lambda x: x[1]["avg_growth_percent"], reverse=True)
            best_freq_bloggers = sorted(bloggers_data.items(), key=lambda x: x[1]["avg_frequency"], reverse=True)
            
            if best_growth_bloggers:
                top_blogger = best_growth_bloggers[0]
                result += f"‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –ø—Ä–∏—Ä–æ—Å—Ç—É –ø—Ä–æ–¥–∞–∂ –ø–æ–∫–∞–∑–∞–ª –±–ª–æ–≥–µ—Ä *{top_blogger[0]}* " \
                          f"(—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç {top_blogger[1]['avg_growth_percent']:.1f}%).\n"
            
            if best_freq_bloggers:
                top_freq_blogger = best_freq_bloggers[0]
                result += f"‚Ä¢ –ù–∞–∏–±–æ–ª—å—à—É—é —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –æ–±–µ—Å–ø–µ—á–∏–ª –±–ª–æ–≥–µ—Ä *{top_freq_blogger[0]}* " \
                          f"(–≤ —Å—Ä–µ–¥–Ω–µ–º {top_freq_blogger[1]['avg_frequency']:.1f} –ø—Ä–æ–¥–∞–∂).\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º
            platforms = {}
            for ad in ad_items:
                platform = ad.get("platform", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                growth = ad.get("sales_growth_percent", 0)
                
                if platform not in platforms:
                    platforms[platform] = {"count": 0, "total_growth": 0}
                
                platforms[platform]["count"] += 1
                platforms[platform]["total_growth"] += growth
            
            for platform, platform_data in platforms.items():
                if platform_data["count"] > 0:
                    platform_data["avg_growth"] = platform_data["total_growth"] / platform_data["count"]
            
            best_platforms = sorted(platforms.items(), key=lambda x: x[1]["avg_growth"], reverse=True)
            
            if best_platforms:
                top_platform = best_platforms[0]
                result += f"‚Ä¢ –ù–∞–∏–ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–æ—â–∞–¥–∫–∞ *{top_platform[0]}* " \
                          f"(—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç {top_platform[1]['avg_growth']:.1f}%).\n"
        else:
            result += "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. " \
                      "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã.\n"
        
        return result, chart_files
    
    except Exception as e:
        logger.error(f"Error formatting external analysis: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}", []

@dp.message(lambda message: message.text and message.text.strip(), UserStates.waiting_for_external)
async def handle_external_input(message: types.Message, state: FSMContext):
    query = message.text.strip()
    user_id = message.from_user.id
    
    logger.info(f"User {user_id} requested external analysis for: {query}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = subscription_manager.get_user_balance(user_id)
    if balance < COSTS["external_analysis"]:
        await message.reply(
            f"‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–Ω–µ—à–Ω–µ–π —Ä–µ–∫–ª–∞–º—ã*\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏: {COSTS['external_analysis']}‚ÇΩ\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    loading_msg = await message.reply("üîç *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–Ω–µ—à–Ω—é—é —Ä–µ–∫–ª–∞–º—É...*", parse_mode=ParseMode.MARKDOWN)
    
    try:
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscription_manager.deduct_balance(user_id, COSTS["external_analysis"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
        is_article = query.isdigit() and len(query) >= 6
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–Ω–µ—à–Ω–µ–π —Ä–µ–∫–ª–∞–º–µ
        external_data = {"query": query, "is_article": is_article, "ad_items": []}
        
        if is_article:
            # –î–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            product_info = await get_wb_product_info(query)
            external_data["product_info"] = product_info
            
            # –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–Ω–µ—à–Ω–µ–π —Ä–µ–∫–ª–∞–º–µ
            ad_data = await get_external_ads_data(query)
            if "error" not in ad_data:
                external_data["ad_items"] = ad_data.get("items", [])
            else:
                external_data["error"] = ad_data["error"]
        else:
            # –î–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞) –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–Ω–µ—à–Ω–µ–π —Ä–µ–∫–ª–∞–º–µ
            ad_data = await get_external_ads_data(query)
            if "error" not in ad_data:
                external_data["ad_items"] = ad_data.get("items", [])
            else:
                external_data["error"] = ad_data["error"]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–ª–æ–≥–µ—Ä–∞—Ö
        if external_data["ad_items"]:
            bloggers_data = {}
            for ad in external_data["ad_items"]:
                blogger_name = ad.get("blogger", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                growth_percent = ad.get("sales_growth_percent", 0)
                frequency = ad.get("total_frequency_3days", 0)
                
                if blogger_name not in bloggers_data:
                    bloggers_data[blogger_name] = {
                        "publications": 0,
                        "total_growth": 0,
                        "avg_growth_percent": 0,
                        "total_frequency": 0,
                        "avg_frequency": 0
                    }
                
                bloggers_data[blogger_name]["publications"] += 1
                bloggers_data[blogger_name]["total_growth"] += growth_percent
                bloggers_data[blogger_name]["total_frequency"] += frequency
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            for blogger, data in bloggers_data.items():
                if data["publications"] > 0:
                    data["avg_growth_percent"] = data["total_growth"] / data["publications"]
                    data["avg_frequency"] = data["total_frequency"] / data["publications"]
            
            external_data["bloggers_data"] = bloggers_data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        result_text, chart_files = format_external_analysis(external_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        await loading_msg.delete()
        await message.reply(result_text, parse_mode=ParseMode.MARKDOWN)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        if chart_files:
            media = []
            
            for chart_file in chart_files:
                try:
                    photo = FSInputFile(chart_file)
                    media.append(InputMediaPhoto(media=photo))
                except Exception as e:
                    logger.error(f"Error adding chart to media group: {str(e)}")
            
            if media:
                try:
                    await bot.send_media_group(chat_id=message.chat.id, media=media)
                except Exception as e:
                    logger.error(f"Error sending media group: {str(e)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_analysis = {
            "type": "external",
            "query": query,
            "timestamp": datetime.now().isoformat(),
            "result": result_text
        }
        
        user_data = await state.get_data()
        analyses_history = user_data.get("analyses_history", [])
        analyses_history.append(new_analysis)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∞–Ω–∞–ª–∏–∑–∞–º–∏
        if len(analyses_history) > 10:
            analyses_history = analyses_history[-10:]
        
        await state.update_data(analyses_history=analyses_history)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    
    except Exception as e:
        logger.error(f"Error in external analysis: {str(e)}", exc_info=True)
        
        await message.reply(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–Ω–µ—à–Ω–µ–π —Ä–µ–∫–ª–∞–º—ã*\n\n"
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        subscription_manager.add_balance(user_id, COSTS["external_analysis"])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())