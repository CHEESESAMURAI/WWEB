import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from main import ProductCardAnalyzer, TrendAnalyzer

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
product_analyzer = ProductCardAnalyzer()
trend_analyzer = TrendAnalyzer()

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "7774315895:AAFVVUfSBOw3t7WjGTM6KHFK160TveSGheA"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WHITESAMURAI!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ Wildberries.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –∏ —è –ø—Ä–æ–≤–µ–¥—É –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n"
        "2. –ë–æ—Ç –ø—Ä–æ–≤–µ–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç:\n"
        "   - –û—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ\n"
        "   - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ –∏ –ø—Ä–∏–±—ã–ª–∏\n"
        "   - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏\n"
        "   - –ü—Ä–æ–≥–Ω–æ–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
        "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    await update.message.reply_text(help_text)

async def format_product_analysis(analysis):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if "error" in analysis:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {analysis['error']}"
    
    product_info = analysis["product_info"]
    metrics = analysis["metrics"]
    risk_analysis = analysis["risk_analysis"]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    result = (
        f"üìä *–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞*\n\n"
        f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {product_info.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"*–¶–µ–Ω–∞:* {product_info.get('–¶–µ–Ω–∞', '0')} ‚ÇΩ\n"
        f"*–û—Ç–∑—ã–≤—ã:* {product_info.get('–û—Ç–∑—ã–≤—ã', '0')}\n\n"
        
        f"üìà *–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥–∞–∂:*\n"
        f"‚Ä¢ –ó–∞ –¥–µ–Ω—å: {metrics['daily_sales']} —à—Ç.\n"
        f"‚Ä¢ –í—ã—Ä—É—á–∫–∞: {metrics['revenue']['daily']:.0f} ‚ÇΩ\n"
        f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {metrics['profit']['daily']:.0f} ‚ÇΩ\n"
        f"‚Ä¢ –ú–∞—Ä–∂–∞: {metrics['margin_percent']:.1f}%\n\n"
        
        f"üîÑ *–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü:*\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏: {metrics['revenue']['monthly']:.0f} ‚ÇΩ\n"
        f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {metrics['profit']['monthly']:.0f} ‚ÇΩ\n\n"
        
        f"‚ö†Ô∏è *–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤:*\n"
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_analysis['risk_level']}\n"
        f"‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {risk_analysis['stability_score']}/3\n"
        f"‚Ä¢ –¶–µ–Ω–æ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä: {risk_analysis['price_score']}/3\n"
        f"‚Ä¢ –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {risk_analysis['margin_score']}/3\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if risk_analysis['recommendations']:
        result += "üìù *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        for rec in risk_analysis['recommendations']:
            result += f"‚Ä¢ {rec}\n"
    
    return result

async def format_trend_analysis(analysis):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if "error" in analysis:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤: {analysis['error']}"
    
    trend = analysis["trend_analysis"]
    seasonality = analysis["seasonality_analysis"]
    forecast = analysis["forecast"]
    
    result = (
        f"üìä *–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤*\n\n"
        f"*–¢—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂:*\n"
        f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trend['trend_direction']}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {trend['avg_sales']:.1f} —à—Ç.\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {trend['avg_price']:.0f} ‚ÇΩ\n\n"
        
        f"üåä *–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å:*\n"
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {seasonality['seasonality_level']}\n"
        f"‚Ä¢ –í–∞—Ä–∏–∞—Ü–∏—è: {seasonality['coefficient_of_variation']:.1f}%\n\n"
        
        f"üîÆ *–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π:*\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏: {sum(forecast['sales_forecast']):.0f} —à—Ç.\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {sum(forecast['price_forecast'])/len(forecast['price_forecast']):.0f} ‚ÇΩ\n"
        f"‚Ä¢ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {forecast['confidence_interval']['lower_bound']:.0f} - "
        f"{forecast['confidence_interval']['upper_bound']:.0f} —à—Ç.\n"
    )
    
    return result

async def analyze_article(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º"""
    article = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if not article.isdigit():
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    status_message = await update.message.reply_text(
        "üîÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞
        product_analysis = await product_analyzer.analyze_product(article)
        product_text = await format_product_analysis(product_analysis)
        await status_message.edit_text(product_text, parse_mode='Markdown')
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        trend_analysis = await trend_analyzer.analyze_trends(article)
        trend_text = await format_trend_analysis(trend_analysis)
        await update.message.reply_text(trend_text, parse_mode='Markdown')
        
    except Exception as e:
        await status_message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:\n{str(e)}"
        )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_article))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await application.initialize()
    await application.start()
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}") 