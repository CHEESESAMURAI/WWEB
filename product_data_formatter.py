import logging
import json
from datetime import datetime
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import pandas as pd
import numpy as np
import io
from PIL import Image
import base64
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def format_enhanced_product_analysis(product_info, article):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    """
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        current_price = product_info['price']['current']
        original_price = product_info['price'].get('original', 0)
        discount = product_info['price'].get('discount', 0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
        formatted_current = "{:,}".format(int(current_price)).replace(',', ' ')
        formatted_original = "{:,}".format(int(original_price)).replace(',', ' ')
        
        result = (
            f"üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ {article}\n\n"
            f"–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['name']}\n"
            f"üè∑ –ë—Ä–µ–Ω–¥: {product_info['brand']}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –∏ —Å–∫–∏–¥–∫–µ
        if discount > 0:
            result += f"üí∞ –¶–µ–Ω–∞: {formatted_current}‚ÇΩ (-{discount}% –æ—Ç {formatted_original}‚ÇΩ)\n"
        else:
            result += f"üí∞ –¶–µ–Ω–∞: {formatted_current}‚ÇΩ\n"
        
        # –†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã
        rating = product_info['rating']
        if rating > 5:
            rating = rating / 10
        result += (
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.1f}/5\n"
            f"üìù –û—Ç–∑—ã–≤–æ–≤: {product_info['feedbacks']}\n\n"
        )
        
        # –ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
        result += f"–ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö:\nüì¶ –í—Å–µ–≥–æ: {product_info['stocks']['total']} —à—Ç.\n\n"
        
        # –û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
        if product_info['stocks']['by_size']:
            result += "–û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º:\n"
            for size, qty in sorted(product_info['stocks']['by_size'].items()):
                if qty > 0:
                    result += f"‚Ä¢ {size}: {qty} —à—Ç.\n"
            result += "\n"
        
        # –ü—Ä–æ–¥–∞–∂–∏ –∏ –≤—ã—Ä—É—á–∫–∞
        daily_sales = product_info['sales']['today']
        if daily_sales == 0:
            result += "–ü—Ä–æ–¥–∞–∂–∏ –∏ –≤—ã—Ä—É—á–∫–∞:\n‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ —Å—É—Ç–∫–∏.\n\n"
        else:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á
            daily_revenue = "{:,}".format(int(product_info['sales']['revenue']['daily'])).replace(',', ' ')
            daily_profit = "{:,}".format(int(product_info['sales']['profit']['daily'])).replace(',', ' ')
            weekly_revenue = "{:,}".format(int(product_info['sales']['revenue']['weekly'])).replace(',', ' ')
            weekly_profit = "{:,}".format(int(product_info['sales']['profit']['weekly'])).replace(',', ' ')
            monthly_revenue = "{:,}".format(int(product_info['sales']['revenue']['monthly'])).replace(',', ' ')
            monthly_profit = "{:,}".format(int(product_info['sales']['profit']['monthly'])).replace(',', ' ')
            
            result += (
                f"–ü—Ä–æ–¥–∞–∂–∏ –∏ –≤—ã—Ä—É—á–∫–∞:\n"
                f"üìà –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏: {daily_sales} —à—Ç.\n"
                f"üí∞ –í—ã—Ä—É—á–∫–∞ –∑–∞ —Å—É—Ç–∫–∏: {daily_revenue}‚ÇΩ\n"
                f"üíé –ü—Ä–∏–±—ã–ª—å –∑–∞ —Å—É—Ç–∫–∏: {daily_profit}‚ÇΩ\n\n"
                f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"
                f"üí∞ –í—ã—Ä—É—á–∫–∞: ~{weekly_revenue}‚ÇΩ\n"
                f"üíé –ü—Ä–∏–±—ã–ª—å: ~{weekly_profit}‚ÇΩ\n\n"
                f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü:\n"
                f"üí∞ –í—ã—Ä—É—á–∫–∞: ~{monthly_revenue}‚ÇΩ\n"
                f"üíé –ü—Ä–∏–±—ã–ª—å: ~{monthly_profit}‚ÇΩ\n\n"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π —Ç–æ–≤–∞—Ä–∞
        result += "üìã –ö–ê–†–¢–û–ß–ö–ê –¢–û–í–ê–†–ê\n"
        result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_name = product_info.get('category', {}).get('name', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        result += f"‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª: {article}\n"
        result += f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['name']}\n"
        result += f"‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç: {category_name}\n"
        
        # –î–∞—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–∞ WB
        first_appearance = product_info.get('first_appearance', "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        result += f"‚Ä¢ –î–∞—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–∞ –í–ë: {first_appearance}\n"
        
        # –¶–µ–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        if discount > 0:
            result += f"‚Ä¢ –¶–µ–Ω–∞: {formatted_current}‚ÇΩ (-{discount}% –æ—Ç {formatted_original}‚ÇΩ)\n"
        else:
            result += f"‚Ä¢ –¶–µ–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: {formatted_current}‚ÇΩ\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–≤–µ—Ç–∞—Ö
        colors = product_info.get('colors', {}).get('list', [])
        colors_count = product_info.get('colors', {}).get('count', 0)
        result += f"‚Ä¢ –¢–æ–≤–∞—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ {colors_count} —Ü–≤–µ—Ç–∞—Ö: {', '.join(colors) if colors else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        
        # –î–æ–ª—è –≤—ã—Ä—É—á–∫–∏ –∏ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        revenue_share = product_info.get('colors', {}).get('revenue_share', 0)
        stock_share = product_info.get('colors', {}).get('stock_share', 0)
        result += f"‚Ä¢ –î–æ–ª—è –≤—ã—Ä—É—á–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤: {revenue_share}%\n"
        result += f"‚Ä¢ –î–æ–ª—è —Ç–æ–≤–∞—Ä–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤: {stock_share}%\n"
        
        # –ü—Ä–æ–¥–∞–≤–µ—Ü –∏ –±—Ä–µ–Ω–¥
        result += f"‚Ä¢ –ü—Ä–æ–¥–∞–≤–µ—Ü: {product_info.get('supplier', product_info['brand'])}\n"
        result += f"‚Ä¢ –ë—Ä–µ–Ω–¥: {product_info['brand']}\n\n"
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
        result += "üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–†–û–î–ê–ñ\n"
        result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        result += "–ì—Ä–∞—Ñ–∏–∫–∏ —Å –¥–∏–Ω–∞–º–∏–∫–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:\n\n"
        
        # –û–ø–∏—Å–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        result += "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É –¥–Ω–µ–≤–Ω–æ–π –≤—ã—Ä—É—á–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü. –ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã –ø—Ä–æ–¥–∞–∂ –∏ –æ—Ü–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n\n"
        
        result += "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –∑–∞–∫–∞–∑–æ–≤ ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —Ç–æ–≤–∞—Ä–∞ –ø–æ –¥–Ω—è–º. –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–∏–¥–µ—Ç—å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –ø–∏–∫–æ–≤—ã–µ –¥–Ω–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤.\n\n"
        
        result += "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å—Ç–æ–∫–æ–≤ –∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤.\n\n"
        
        result += "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª–∞ ‚Äî –æ—Ç—Ä–∞–∂–∞–µ—Ç, –∫–∞–∫ —á–∞—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏—â—É—Ç —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É. –í—ã—Å–æ–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≥–æ–≤–æ—Ä—è—Ç –æ–± —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–µ–π —Ä–µ–∫–ª–∞–º—ã –∏ —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞.\n\n"
        
        result += "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∫–ª–∞–º—ã –≤ –ø–æ–∏—Å–∫–µ ‚Äî –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–æ–≤ —Ç–æ–≤–∞—Ä–∞ –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–µ. –ü–æ–º–æ–≥–∞–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π.\n\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        result += "üîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n"
        result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–ª–∏—á–∏—é
        if product_info['stocks']['total'] < 100 and daily_sales > 10:
            result += "‚Ä¢ –°—Ä–æ—á–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã —Ç–æ–≤–∞—Ä–∞ - –Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö.\n"
        elif product_info['stocks']['total'] > 1000 and daily_sales < 5:
            result += "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–∫—Ü–∏–π –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∏–∑–ª–∏—à–Ω–∏—Ö –∑–∞–ø–∞—Å–æ–≤.\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ
        original_price = product_info['price'].get('original', 0)
        current_price = product_info['price'].get('current', 0)
        if original_price > current_price * 1.3:  # –ë–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞
            result += "‚Ä¢ –¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã.\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç–∑—ã–≤–∞–º
        if product_info['feedbacks'] < 10:
            result += "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –±—Ä–µ–Ω–¥–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if 'brand_info' in product_info and product_info['brand_info']:
            brand_info = product_info['brand_info']
            result += "\nüè¢ –ê–ù–ê–õ–ò–ó –ë–†–ï–ù–î–ê\n"
            result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ
            brand_name = brand_info.get('name', product_info['brand'])
            total_items = brand_info.get('total_items', 0)
            avg_price = brand_info.get('avg_price', 0)
            avg_rating = brand_info.get('avg_rating', 0)
            category_position = brand_info.get('category_position', 0)
            total_sales = brand_info.get('total_sales', 0)
            total_revenue = brand_info.get('total_revenue', 0)
            
            result += f"–ë—Ä–µ–Ω–¥: {brand_name}\n\n"
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            result += "üìå –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
            result += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items:,}".replace(',', ' ') + " —à—Ç.\n"
            result += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {int(avg_price):,}‚ÇΩ".replace(',', ' ') + "\n"
            result += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5\n"
            
            if category_position > 0:
                result += f"‚Ä¢ –ü–æ–∑–∏—Ü–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_position}-–µ –º–µ—Å—Ç–æ\n"
            
            if total_sales > 0:
                result += f"‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {total_sales:,}".replace(',', ' ') + " —à—Ç.\n"
            
            if total_revenue > 0:
                formatted_revenue = "{:,}".format(int(total_revenue)).replace(',', ' ')
                result += f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {formatted_revenue}‚ÇΩ\n"
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = brand_info.get('categories', [])
            if categories:
                result += "\nüìÅ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö:\n"
                for category in categories[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                    result += f"‚Ä¢ {category}\n"
                
                if len(categories) > 5:
                    result += f"‚Ä¢ ... –∏ –µ—â–µ {len(categories) - 5} –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
            
            # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞
            items = brand_info.get('items_stats', [])
            if items:
                result += "\nüîù –¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞:\n"
                for i, item in enumerate(items[:5]):
                    name = item.get('name', f"–¢–æ–≤–∞—Ä #{i+1}")
                    price = item.get('price', 0)
                    sales = item.get('sales', 0)
                    rating = item.get('rating', 0)
                    result += f"‚Ä¢ {name} ‚Äî {int(price):,}‚ÇΩ".replace(',', ' ')
                    if sales:
                        result += f", {sales:,} –ø—Ä–æ–¥–∞–∂".replace(',', ' ')
                    if rating:
                        result += f", —Ä–µ–π—Ç–∏–Ω–≥ {rating:.1f}/5"
                    result += "\n"
            
            # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã
            competitors = brand_info.get('competitors', [])
            if competitors:
                result += "\nü•ä –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã:\n"
                for comp in competitors[:5]:
                    comp_name = comp.get('name', '')
                    comp_items = comp.get('total_items', 0)
                    comp_sales = comp.get('total_sales', 0)
                    
                    result += f"‚Ä¢ {comp_name}"
                    if comp_items:
                        result += f" ‚Äî {comp_items:,}".replace(',', ' ') + " —Ç–æ–≤–∞—Ä–æ–≤"
                    if comp_sales:
                        result += f", {comp_sales:,}".replace(',', ' ') + " –ø—Ä–æ–¥–∞–∂"
                    result += "\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä–∞—Ñ–∏–∫–∞—Ö
            result += "\nüìä –î–æ—Å—Ç—É–ø–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±—Ä–µ–Ω–¥–∞:\n"
            result += "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ –±—Ä–µ–Ω–¥–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º\n"
            result += "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ ‚Äî —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂–∞–º\n"
            result += "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ª—é —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö\n"
        
        return result
        
    except Exception as e:
        logger.error(f"Error formatting enhanced product analysis: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

def generate_daily_charts(product_info):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–∞–º.
    """
    try:
        daily_data = product_info.get('daily_data', [])
        if not daily_data:
            return []
        
        chart_paths = []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
        df = pd.DataFrame(daily_data)
        df['date'] = pd.to_datetime(df['date'], format='%d.%m.%Y')
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        df = df.sort_values('date')
        
        # –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏
        plt.figure(figsize=(10, 6))
        plt.plot(df['date'], df['revenue'], marker='o', linestyle='-', color='blue')
        plt.title('–í—ã—Ä—É—á–∫–∞ –ø–æ –¥–Ω—è–º')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)')
        plt.grid(True)
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        plt.tight_layout()
        
        revenue_chart = 'revenue_chart.png'
        plt.savefig(revenue_chart)
        plt.close()
        chart_paths.append(revenue_chart)
        
        # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–∫–∞–∑–æ–≤
        plt.figure(figsize=(10, 6))
        plt.plot(df['date'], df['orders'], marker='o', linestyle='-', color='green')
        plt.title('–ó–∞–∫–∞–∑—ã –ø–æ –¥–Ω—è–º')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
        plt.grid(True)
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        plt.tight_layout()
        
        orders_chart = 'orders_chart.png'
        plt.savefig(orders_chart)
        plt.close()
        chart_paths.append(orders_chart)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        plt.figure(figsize=(10, 6))
        plt.plot(df['date'], df['stock'], marker='o', linestyle='-', color='red')
        plt.title('–¢–æ–≤–∞—Ä–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –¥–Ω—è–º')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞')
        plt.grid(True)
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        plt.tight_layout()
        
        stock_chart = 'stock_chart.png'
        plt.savefig(stock_chart)
        plt.close()
        chart_paths.append(stock_chart)
        
        # –ì—Ä–∞—Ñ–∏–∫ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª–∞
        plt.figure(figsize=(10, 6))
        plt.plot(df['date'], df['search_freq'], marker='o', linestyle='-', color='purple')
        plt.title('–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –∞—Ä—Ç–∏–∫—É–ª–∞ –ø–æ –¥–Ω—è–º')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤')
        plt.grid(True)
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        plt.tight_layout()
        
        freq_chart = 'freq_chart.png'
        plt.savefig(freq_chart)
        plt.close()
        chart_paths.append(freq_chart)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∫–ª–∞–º—ã –≤ –ø–æ–∏—Å–∫–µ
        plt.figure(figsize=(10, 6))
        plt.plot(df['date'], df['ads_impressions'], marker='o', linestyle='-', color='orange')
        plt.title('–†–µ–∫–ª–∞–º–∞ –≤ –ø–æ–∏—Å–∫–µ –ø–æ –¥–Ω—è–º')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–ü–æ–∫–∞–∑—ã —Ä–µ–∫–ª–∞–º—ã')
        plt.grid(True)
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        plt.tight_layout()
        
        ads_chart = 'ads_chart.png'
        plt.savefig(ads_chart)
        plt.close()
        chart_paths.append(ads_chart)
        
        return chart_paths
        
    except Exception as e:
        logger.error(f"Error generating daily charts: {str(e)}", exc_info=True)
        return []

def generate_brand_charts(product_info):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–µ–Ω–¥–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–∞–º.
    """
    try:
        chart_paths = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–µ–Ω–¥–µ
        if 'brand_info' not in product_info or not product_info['brand_info']:
            return chart_paths
        
        brand_info = product_info['brand_info']
        brand_name = brand_info.get('name', '–ë—Ä–µ–Ω–¥')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.style.use('seaborn-v0_8-darkgrid')
        
        # 1. –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ –∏ –≤—ã—Ä—É—á–∫–∏ –±—Ä–µ–Ω–¥–∞ —Å —Ç—Ä–µ–Ω–¥–æ–º
        sales_dynamics = brand_info.get('sales_dynamics', [])
        if sales_dynamics:
            fig, ax1 = plt.subplots(figsize=(12, 7))
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            dates = []
            sales = []
            revenue = []
            
            for entry in sales_dynamics:
                if 'date' in entry and ('sales' in entry or 'revenue' in entry):
                    dates.append(entry['date'])
                    sales.append(entry.get('sales', 0))
                    revenue.append(entry.get('revenue', 0) / 1000)  # –≤ —Ç—ã—Å—è—á–∞—Ö –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            
            if dates and sales:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂
                z = np.polyfit(range(len(dates)), sales, 2)
                p = np.poly1d(z)
                trend_line = p(range(len(dates)))
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ —Å –∑–∞–ª–∏–≤–∫–æ–π –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                sales_line = ax1.plot(dates, sales, marker='o', linestyle='-', linewidth=2.5, 
                                    color='#3498db', label='–ü—Ä–æ–¥–∞–∂–∏ (—à—Ç.)')
                ax1.fill_between(dates, sales, alpha=0.2, color='#3498db')
                ax1.plot(dates, trend_line, '--', color='#2980b9', linewidth=2, label='–¢—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂')
                
                ax1.set_xlabel('–î–∞—Ç–∞', fontsize=12, fontweight='bold')
                ax1.set_ylabel('–ü—Ä–æ–¥–∞–∂–∏ (—à—Ç.)', fontsize=12, fontweight='bold', color='#3498db')
                ax1.tick_params(axis='y', labelcolor='#3498db')
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é –ø—Ä–æ–¥–∞–∂
                avg_sales = sum(sales) / len(sales)
                ax1.axhline(y=avg_sales, color='#2980b9', linestyle=':', linewidth=1.5, 
                           label=f'–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {avg_sales:.0f} —à—Ç.')
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π y-axis –¥–ª—è –≤—ã—Ä—É—á–∫–∏
                if revenue:
                    ax2 = ax1.twinx()
                    revenue_line = ax2.plot(dates, revenue, marker='s', linestyle='-', linewidth=2.5, 
                                          color='#27ae60', label='–í—ã—Ä—É—á–∫–∞ (—Ç—ã—Å. ‚ÇΩ)')
                    ax2.fill_between(dates, revenue, alpha=0.2, color='#27ae60')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –≤—ã—Ä—É—á–∫–∏
                    z_rev = np.polyfit(range(len(dates)), revenue, 2)
                    p_rev = np.poly1d(z_rev)
                    trend_line_rev = p_rev(range(len(dates)))
                    ax2.plot(dates, trend_line_rev, '--', color='#27ae60', linewidth=1.5, label='–¢—Ä–µ–Ω–¥ –≤—ã—Ä—É—á–∫–∏')
                    
                    ax2.set_ylabel('–í—ã—Ä—É—á–∫–∞ (—Ç—ã—Å. ‚ÇΩ)', fontsize=12, fontweight='bold', color='#27ae60')
                    ax2.tick_params(axis='y', labelcolor='#27ae60')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é –≤—ã—Ä—É—á–∫–∏
                    avg_revenue = sum(revenue) / len(revenue)
                    ax2.axhline(y=avg_revenue, color='#27ae60', linestyle=':', linewidth=1.5,
                               label=f'–°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞: {avg_revenue:.0f} —Ç—ã—Å. ‚ÇΩ')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è
                if len(sales) > 1:
                    # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å
                    ax1.annotate(f'{sales[0]} —à—Ç.',
                                xy=(dates[0], sales[0]), 
                                xytext=(10, 10),
                                textcoords='offset points',
                                color='#3498db',
                                fontweight='bold')
                    
                    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
                    ax1.annotate(f'{sales[-1]} —à—Ç.',
                                xy=(dates[-1], sales[-1]), 
                                xytext=(10, 10),
                                textcoords='offset points',
                                color='#3498db',
                                fontweight='bold')
                    
                    if revenue:
                        # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å (–≤—ã—Ä—É—á–∫–∞)
                        ax2.annotate(f'{revenue[0]:.0f} —Ç—ã—Å. ‚ÇΩ',
                                    xy=(dates[0], revenue[0]), 
                                    xytext=(10, -20),
                                    textcoords='offset points',
                                    color='#27ae60',
                                    fontweight='bold')
                        
                        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å (–≤—ã—Ä—É—á–∫–∞)
                        ax2.annotate(f'{revenue[-1]:.0f} —Ç—ã—Å. ‚ÇΩ',
                                    xy=(dates[-1], revenue[-1]), 
                                    xytext=(10, -20),
                                    textcoords='offset points',
                                    color='#27ae60',
                                    fontweight='bold')
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂
                sales_change = 0
                if len(sales) > 1:
                    first_week = sum(sales[:min(7, len(sales))]) / min(7, len(sales))
                    last_week = sum(sales[-min(7, len(sales)):]) / min(7, len(sales))
                    sales_change = ((last_week - first_week) / first_week) * 100 if first_week > 0 else 0
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                change_text = f" | –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {sales_change:.1f}%" if sales_change != 0 else ""
                plt.title(f'–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –±—Ä–µ–Ω–¥–∞ ¬´{brand_name}¬ª{change_text}', 
                         fontsize=14, fontweight='bold', pad=20)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–µ–≥–µ–Ω–¥—ã
                lines1, labels1 = ax1.get_legend_handles_labels()
                if revenue:
                    lines2, labels2 = ax2.get_legend_handles_labels()
                    lines = lines1 + lines2
                    labels = labels1 + labels2
                else:
                    lines, labels = lines1, labels1
                
                plt.legend(lines, labels, loc='upper left', fontsize=10)
                plt.grid(True, alpha=0.3)
                plt.xticks(rotation=45)
                fig.tight_layout()
                
                brand_sales_chart = 'brand_sales_chart.png'
                plt.savefig(brand_sales_chart, dpi=100)
                plt.close()
                chart_paths.append(brand_sales_chart)
        
        # 2. –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –±–∞—Ä—ã)
        competitors = brand_info.get('competitors', [])
        if competitors:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            comp_names = [brand_name]  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±—Ä–µ–Ω–¥
            items_count = [brand_info.get('total_items', 0)]
            sales_count = [brand_info.get('total_sales', 0)]
            
            for comp in competitors[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏
                comp_names.append(comp.get('name', '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç'))
                items_count.append(comp.get('total_items', 0))
                sales_count.append(comp.get('total_sales', 0))
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –±–∞—Ä—ã –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            fig, ax = plt.subplots(figsize=(12, 8))
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è Y –æ—Å–∏
            y_pos = np.arange(len(comp_names))
            
            # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –±–∞—Ä—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
            bars1 = ax.barh(y_pos - 0.2, items_count, height=0.4, color='#3498db', label='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤')
            
            # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –±–∞—Ä—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂
            bars2 = ax.barh(y_pos + 0.2, sales_count, height=0.4, color='#e74c3c', label='–ü—Ä–æ–¥–∞–∂–∏ (—à—Ç.)')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
            def add_labels(bars):
                for bar in bars:
                    width = bar.get_width()
                    label_x_pos = width
                    ax.text(label_x_pos, bar.get_y() + bar.get_height()/2, f'{int(width):,}'.replace(',', ' '), 
                           va='center', ha='left', fontweight='bold', color='black')
            
            add_labels(bars1)
            add_labels(bars2)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
            ax.set_yticks(y_pos)
            ax.set_yticklabels(comp_names, fontsize=11, fontweight='bold')
            ax.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', fontsize=12, fontweight='bold')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ª–µ–≥–µ–Ω–¥—É
            plt.title(f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ ¬´{brand_name}¬ª —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏', fontsize=14, fontweight='bold')
            plt.legend(loc='upper right')
            
            # –í—ã–¥–µ–ª—è–µ–º –±—Ä–µ–Ω–¥ –≤ —Å–ø–∏—Å–∫–µ
            highlight_y = y_pos[0]  # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–µ–Ω–¥–∞
            plt.axhspan(highlight_y - 0.4, highlight_y + 0.4, color='yellow', alpha=0.1)
            
            plt.grid(axis='x', alpha=0.3)
            fig.tight_layout()
            
            brand_competitors_chart = 'brand_competitors_chart.png'
            plt.savefig(brand_competitors_chart, dpi=100)
            plt.close()
            chart_paths.append(brand_competitors_chart)
        
        # 3. –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–ø–æ–Ω—á–∏–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞)
        categories = brand_info.get('categories', [])
        if categories:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            max_categories = 8
            
            if len(categories) > max_categories:
                # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ–ª—å—à–µ, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ª–∏—à–Ω–∏–µ –≤ "–î—Ä—É–≥–∏–µ"
                top_categories = categories[:max_categories-1]
                other_count = len(categories) - (max_categories-1)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_categories = top_categories + [f"–î—Ä—É–≥–∏–µ ({other_count})"]
            else:
                display_categories = categories
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–æ–ª–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_weights = []
            for i in range(len(display_categories)):
                if i == len(display_categories) - 1 and len(categories) > max_categories:
                    # –î–ª—è "–î—Ä—É–≥–∏–µ" –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    category_weights.append(100 / len(display_categories) * 0.8)
                else:
                    # –†–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ–º –¥–æ–ª–∏ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞
                    weight = 100 / len(display_categories)
                    variation = weight * 0.5  # 50% –≤–∞—Ä–∏–∞—Ü–∏–∏
                    category_weights.append(weight + random.uniform(-variation, variation))
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞ –¥–æ —Å—É–º–º—ã 100%
            total_weight = sum(category_weights)
            category_weights = [w * 100 / total_weight for w in category_weights]
            
            # –°–æ–∑–¥–∞–µ–º "–ø–æ–Ω—á–∏–∫–æ–≤—É—é" –¥–∏–∞–≥—Ä–∞–º–º—É
            fig, ax = plt.subplots(figsize=(10, 9))
            
            # –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
            colors = plt.cm.tab20(np.linspace(0, 1, len(display_categories)))
            
            # –í–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥ (–∫–æ–ª—å—Ü–æ)
            wedges, texts, autotexts = ax.pie(
                category_weights, 
                labels=None,
                autopct='%1.1f%%',
                startangle=90,
                colors=colors,
                wedgeprops=dict(width=0.4, edgecolor='w'),  # –¢–æ–ª—â–∏–Ω–∞ –∫–æ–ª—å—Ü–∞
            )
            
            # –£–ª—É—á—à–∞–µ–º –∞–≤—Ç–æ—Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            for autotext in autotexts:
                autotext.set_fontsize(10)
                autotext.set_fontweight('bold')
                autotext.set_color('white')
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥ –≤ —Ü–µ–Ω—Ç—Ä–µ (–æ—Ç–≤–µ—Ä—Å—Ç–∏–µ)
            circle = plt.Circle((0, 0), 0.2, fc='white')
            ax.add_artist(circle)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            plt.title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ ¬´{brand_name}¬ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=14, fontweight='bold')
            
            # –°–æ–∑–¥–∞–µ–º –ª–µ–≥–µ–Ω–¥—É
            plt.legend(
                wedges, 
                display_categories,
                title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
                loc="center left",
                bbox_to_anchor=(1, 0, 0.5, 1)
            )
            
            plt.tight_layout()
            
            brand_categories_chart = 'brand_categories_chart.png'
            plt.savefig(brand_categories_chart, dpi=100)
            plt.close()
            chart_paths.append(brand_categories_chart)
        
        # 4. –ì—Ä–∞—Ñ–∏–∫ —Ç–æ–ø-—Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ (–Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫)
        items_stats = brand_info.get('items_stats', [])
        if items_stats and len(items_stats) > 2:
            # –ë–µ—Ä–µ–º –¥–æ 7 —Ç–æ–ø-—Ç–æ–≤–∞—Ä–æ–≤
            top_items = items_stats[:7]
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            item_names = []
            item_sales = []
            item_revenue = []
            
            for item in top_items:
                name = item.get('name', '')
                # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
                if len(name) > 25:
                    name = name[:22] + '...'
                item_names.append(name)
                item_sales.append(item.get('sales', 0))
                item_revenue.append(item.get('revenue', 0) / 1000)  # –≤ —Ç—ã—Å—è—á–∞—Ö –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig, ax1 = plt.subplots(figsize=(12, 8))
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –±–∞—Ä—ã)
            bars1 = ax1.barh(item_names, item_sales, color='#3498db', alpha=0.7, label='–ü—Ä–æ–¥–∞–∂–∏ (—à—Ç.)')
            ax1.set_xlabel('–ü—Ä–æ–¥–∞–∂–∏ (—à—Ç.)', fontsize=12, fontweight='bold', color='#3498db')
            ax1.tick_params(axis='x', labelcolor='#3498db')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π
            for i, v in enumerate(item_sales):
                ax1.text(v, i, f' {int(v):,}'.replace(',', ' '), color='#3498db', va='center', fontweight='bold')
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤—ã—Ä—É—á–∫–∏
            ax2 = ax1.twiny()
            bars2 = ax2.barh(item_names, item_revenue, color='#e74c3c', alpha=0.4, label='–í—ã—Ä—É—á–∫–∞ (—Ç—ã—Å. ‚ÇΩ)')
            ax2.set_xlabel('–í—ã—Ä—É—á–∫–∞ (—Ç—ã—Å. ‚ÇΩ)', fontsize=12, fontweight='bold', color='#e74c3c')
            ax2.tick_params(axis='x', labelcolor='#e74c3c')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤—ã—Ä—É—á–∫–∏
            for i, v in enumerate(item_revenue):
                ax2.text(v, i, f' {int(v):,}'.replace(',', ' '), color='#e74c3c', va='center', fontweight='bold')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            fig.legend(loc='upper center', bbox_to_anchor=(0.5, 0.98), ncol=2)
            plt.title(f'–¢–æ–ø —Ç–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞ ¬´{brand_name}¬ª', fontsize=14, fontweight='bold', pad=40)
            
            plt.grid(axis='x', alpha=0.3)
            plt.tight_layout(rect=[0, 0, 1, 0.96])  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
            
            brand_top_items_chart = 'brand_top_items_chart.png'
            plt.savefig(brand_top_items_chart, dpi=100)
            plt.close()
            chart_paths.append(brand_top_items_chart)
        
        # 5. –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –±—Ä–µ–Ω–¥–∞
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É, —Ä–µ–π—Ç–∏–Ω–≥ –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        try:
            avg_price = brand_info.get('avg_price', 0)
            avg_rating = brand_info.get('avg_rating', 0)
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
            categories = ['–¶–µ–Ω–∞', '–†–µ–π—Ç–∏–Ω–≥', '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', '–ü—Ä–æ–¥–∞–∂–∏', '–í—ã—Ä—É—á–∫–∞']
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–æ —à–∫–∞–ª—ã –æ—Ç 0 –¥–æ 10
            # –î–ª—è —Ü–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —à–∫–∞–ª—É (—á–µ–º –Ω–∏–∂–µ —Ü–µ–Ω–∞, —Ç–µ–º –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
            price_scale = max(0, min(10, 10 - (avg_price / 5000) * 10)) if avg_price > 0 else 5
            rating_scale = max(0, min(10, (avg_rating / 5) * 10)) if avg_rating > 0 else 5
            
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            items_scale = max(0, min(10, (brand_info.get('total_items', 100) / 200) * 10)) 
            sales_scale = max(0, min(10, (brand_info.get('total_sales', 1000) / 2000) * 10))
            revenue_scale = max(0, min(10, (brand_info.get('total_revenue', 1000000) / 2000000) * 10))
            
            # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            values = [price_scale, rating_scale, items_scale, sales_scale, revenue_scale]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            N = len(categories)
            
            # –£–≥–æ–ª –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
            angles = [n / float(N) * 2 * np.pi for n in range(N)]
            angles += angles[:1]  # –ó–∞–º—ã–∫–∞–µ–º –∫—Ä—É–≥
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü –¥–ª—è –∑–∞–º—ã–∫–∞–Ω–∏—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
            values += values[:1]
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–¥–∞—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            fig = plt.figure(figsize=(10, 8))
            ax = fig.add_subplot(111, polar=True)
            
            # –†–∏—Å—É–µ–º –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫
            ax.plot(angles, values, linewidth=2, linestyle='solid', color='#3498db')
            ax.fill(angles, values, color='#3498db', alpha=0.4)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏
            ax.set_xticks(angles[:-1])
            ax.set_xticklabels(categories, fontsize=12, fontweight='bold')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–¥–∏–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            ax.set_rlabel_position(0)
            plt.yticks([2, 4, 6, 8, 10], ["2", "4", "6", "8", "10"], color="grey", size=10)
            plt.ylim(0, 10)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å —Ç–æ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            for i, (angle, value) in enumerate(zip(angles[:-1], values[:-1])):
                ha = 'right' if 0 < angle < np.pi else 'left'
                plt.annotate(
                    f"{value:.1f}", 
                    xy=(angle, value), 
                    xytext=(1.1 * np.cos(angle), 1.1 * value * np.sin(angle)),
                    ha=ha,
                    va='center',
                    fontweight='bold',
                    color='#3498db'
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            plt.title(f'–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –±—Ä–µ–Ω–¥–∞ ¬´{brand_name}¬ª', fontsize=14, fontweight='bold', y=1.1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏—è –∫ –æ—Ü–µ–Ω–∫–∞–º –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
            explanation_text = f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:,}‚ÇΩ".replace(',', ' ')
            explanation_text += f" | –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5"
            explanation_text += f" | –¢–æ–≤–∞—Ä–æ–≤: {brand_info.get('total_items', 0):,}".replace(',', ' ')
            explanation_text += f" | –ü—Ä–æ–¥–∞–∂–∏: {brand_info.get('total_sales', 0):,}".replace(',', ' ')
            fig.text(0.5, 0.01, explanation_text, ha='center', fontsize=10)
            
            brand_radar_chart = 'brand_radar_chart.png'
            plt.savefig(brand_radar_chart, dpi=100)
            plt.close()
            chart_paths.append(brand_radar_chart)
        except Exception as e:
            logger.error(f"Error generating radar chart: {str(e)}", exc_info=True)
        
        return chart_paths
        
    except Exception as e:
        logger.error(f"Error generating brand charts: {str(e)}", exc_info=True)
        return [] 