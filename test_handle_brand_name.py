async def handle_brand_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞."""
    try:
        user_id = message.from_user.id
        input_text = message.text.strip()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        processing_msg = await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥...")
        
        brand_name = input_text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–æ–º (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
        if input_text.isdigit():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
            product_info = await get_wb_product_info(input_text)
            
            if not product_info:
                await processing_msg.delete()
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=back_keyboard())
                return
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
            brand_name = product_info.get('brand')
            
            if not brand_name:
                await processing_msg.delete()
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—Ä–µ–Ω–¥ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –Ω–∞–ø—Ä—è–º—É—é.", reply_markup=back_keyboard())
                return
                
            await message.answer(f"üîç –ù–∞–π–¥–µ–Ω –±—Ä–µ–Ω–¥: {brand_name}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ
        brand_info = await get_brand_info(brand_name)
        
        if not brand_info:
            await processing_msg.delete()
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=back_keyboard())
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        product_info = {"brand_info": brand_info}
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        result = format_brand_analysis(brand_info)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –±—Ä–µ–Ω–¥–∞
        brand_chart_paths = generate_brand_charts(product_info)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await processing_msg.delete()
        await message.answer(result, reply_markup=back_keyboard())
        
        # –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –±—Ä–µ–Ω–¥–∞
        brand_chart_descriptions = {
            'brand_sales_chart': "üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –±—Ä–µ–Ω–¥–∞ ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂ –∏ –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º",
            'brand_competitors_chart': "ü•ä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ ‚Äî —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂–∞–º",
            'brand_categories_chart': "üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ª—é —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –±—Ä–µ–Ω–¥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if brand_chart_paths:
            await message.answer("üìä –ì–†–ê–§–ò–ö–ò –ü–û –ë–†–ï–ù–î–£:", reply_markup=back_keyboard())
            
            for chart_path in brand_chart_paths:
                chart_name = chart_path.replace('.png', '')
                caption = brand_chart_descriptions.get(chart_name, f"–ì—Ä–∞—Ñ–∏–∫: {chart_name}")
                
                with open(chart_path, 'rb') as photo:
                    await message.answer_photo(photo, caption=caption)
        
        await state.clear()
        
        # –î–µ–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π
        subscription_manager.decrement_action_count(user_id, "brand_analysis")
        
    except Exception as e:
        logger.error(f"Error in handle_brand_name: {str(e)}", exc_info=True)
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±—Ä–µ–Ω–¥–∞: {str(e)}", reply_markup=back_keyboard())
        await state.clear() 