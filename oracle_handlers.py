#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ "–û—Ä–∞–∫—É–ª –∑–∞–ø—Ä–æ—Å–æ–≤"
–≠—Ç–æ—Ç –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª new_bot.py
"""

import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode

logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –∫–ª–∞—Å—Å UserStates:
"""
waiting_for_oracle_queries = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –û—Ä–∞–∫—É–ª–∞
waiting_for_oracle_category = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
"""

# –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ COSTS:
"""
'oracle_queries': 50  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –û—Ä–∞–∫—É–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ new_bot.py:

def add_oracle_handlers(dp, get_user_balance, update_user_balance, COSTS):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –û—Ä–∞–∫—É–ª–∞"""
    
    try:
        from oracle_queries import OracleQueries, format_oracle_results
        oracle = OracleQueries()
    except ImportError:
        logger.error("–ú–æ–¥—É–ª—å oracle_queries –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    @dp.callback_query(lambda c: c.data == "oracle_queries")
    async def handle_oracle_queries(callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û—Ä–∞–∫—É–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            user_id = callback_query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            user_balance = get_user_balance(user_id)
            cost = COSTS.get('oracle_queries', 50)
            
            if user_balance < cost:
                await callback_query.message.edit_text(
                    f"üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!\n\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance}‚ÇΩ\n"
                    f"–ù—É–∂–Ω–æ: {cost - user_balance}‚ÇΩ",
                    reply_markup=back_keyboard()
                )
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="oracle_main_analysis"),
                    InlineKeyboardButton(text="üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="oracle_category_analysis")
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
            
            oracle_text = (
                "üîÆ *–û—Ä–∞–∫—É–ª –∑–∞–ø—Ä–æ—Å–æ–≤*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:\n\n"
                "üîç *–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤* - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å:\n"
                "‚Ä¢ –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å—é –∏ –¥–∏–Ω–∞–º–∏–∫–æ–π\n"
                "‚Ä¢ –í—ã—Ä—É—á–∫–æ–π —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤\n"
                "‚Ä¢ –ú–æ–Ω–æ–ø–æ–ª—å–Ω–æ—Å—Ç—å—é –Ω–∏—à–∏\n"
                "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç–æ–º —Ä–µ–∫–ª–∞–º—ã\n\n"
                "üìä *–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º* - –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤, –±—Ä–µ–Ω–¥–æ–≤, –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n\n"
                f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {cost}‚ÇΩ"
            )
            
            await callback_query.message.edit_text(
                oracle_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_oracle_queries: {e}")
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –û—Ä–∞–∫—É–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_keyboard()
            )

    @dp.callback_query(lambda c: c.data == "oracle_main_analysis")
    async def handle_oracle_main_analysis(callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –û—Ä–∞–∫—É–ª–∞"""
        try:
            from new_bot import UserStates
            await state.set_state(UserStates.waiting_for_oracle_queries)
            
            oracle_text = (
                "üîÆ *–û—Ä–∞–∫—É–ª –∑–∞–ø—Ä–æ—Å–æ–≤ - –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑*\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–ø—Ä–æ—Å–æ–≤ | –º–µ—Å—è—Ü | –º–∏–Ω_–≤—ã—Ä—É—á–∫–∞ | –º–∏–Ω_—á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å`\n\n"
                "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
                "‚Ä¢ `3 | 2024-01 | 100000 | 1000`\n"
                "‚Ä¢ `5 | 2024-02 | 50000 | 500`\n\n"
                "*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
                "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: 1-5\n"
                "‚Ä¢ –ú–µ—Å—è—Ü: YYYY-MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-01)\n"
                "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –∑–∞ 30 –¥–Ω–µ–π (‚ÇΩ)\n"
                "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –∑–∞ 30 –¥–Ω–µ–π\n\n"
                "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"
            )
            
            await callback_query.message.edit_text(
                oracle_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=back_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_oracle_main_analysis: {e}")
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_keyboard()
            )

    @dp.callback_query(lambda c: c.data == "oracle_category_analysis")
    async def handle_oracle_category_analysis(callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        try:
            from new_bot import UserStates
            await state.set_state(UserStates.waiting_for_oracle_category)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üì¶ –ü–æ —Ç–æ–≤–∞—Ä–∞–º", callback_data="oracle_cat_products"),
                    InlineKeyboardButton(text="üè¢ –ü–æ –±—Ä–µ–Ω–¥–∞–º", callback_data="oracle_cat_brands")
                ],
                [
                    InlineKeyboardButton(text="üè≠ –ü–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º", callback_data="oracle_cat_suppliers"),
                    InlineKeyboardButton(text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="oracle_cat_categories")
                ],
                [
                    InlineKeyboardButton(text="üîç –ü–æ –∑–∞–ø—Ä–æ—Å–∞–º", callback_data="oracle_cat_queries")
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="oracle_queries")]
            ])
            
            oracle_text = (
                "üîÆ *–û—Ä–∞–∫—É–ª –∑–∞–ø—Ä–æ—Å–æ–≤ - –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:\n\n"
                "üì¶ *–ü–æ —Ç–æ–≤–∞—Ä–∞–º* - —Ç–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É\n"
                "üè¢ *–ü–æ –±—Ä–µ–Ω–¥–∞–º* - –∞–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–æ–≤\n"
                "üè≠ *–ü–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º* - –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n"
                "üìÇ *–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º* - –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
                "üîç *–ü–æ –∑–∞–ø—Ä–æ—Å–∞–º* - —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
            )
            
            await callback_query.message.edit_text(
                oracle_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_oracle_category_analysis: {e}")

    @dp.callback_query(lambda c: c.data.startswith("oracle_cat_"))
    async def handle_oracle_category_type(callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            category_type = callback_query.data.replace("oracle_cat_", "")
            await state.update_data(oracle_category_type=category_type)
            
            type_names = {
                "products": "—Ç–æ–≤–∞—Ä–∞–º",
                "brands": "–±—Ä–µ–Ω–¥–∞–º",
                "suppliers": "–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º", 
                "categories": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                "queries": "–∑–∞–ø—Ä–æ—Å–∞–º"
            }
            
            type_name = type_names.get(category_type, category_type)
            
            oracle_text = (
                f"üîÆ *–û—Ä–∞–∫—É–ª –ø–æ {type_name}*\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`–∑–∞–ø—Ä–æ—Å/–∫–∞—Ç–µ–≥–æ—Ä–∏—è | –º–µ—Å—è—Ü`\n\n"
                "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
                "‚Ä¢ `—Ç–µ–ª–µ—Ñ–æ–Ω | 2024-01`\n"
                "‚Ä¢ `–∫–æ—Å–º–µ—Ç–∏–∫–∞ | 2024-02`\n"
                "‚Ä¢ `–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞/–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ –≥–∞–¥–∂–µ—Ç—ã | 2024-01`\n\n"
                "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"
            )
            
            await callback_query.message.edit_text(
                oracle_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=back_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_oracle_category_type: {e}")

    def back_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ '–ù–∞–∑–∞–¥'"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        return keyboard

    @dp.message(lambda message: message.text and message.text.strip(), UserStates.waiting_for_oracle_queries)
    async def handle_oracle_queries_input(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –û—Ä–∞–∫—É–ª–∞"""
        try:
            user_id = message.from_user.id
            user_input = message.text.strip()
            
            # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            parts = [p.strip() for p in user_input.split('|')]
            
            if len(parts) != 4:
                await message.reply(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ | –º–µ—Å—è—Ü | –º–∏–Ω_–≤—ã—Ä—É—á–∫–∞ | –º–∏–Ω_—á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å`\n\n"
                    "–ü—Ä–∏–º–µ—Ä: `3 | 2024-01 | 100000 | 1000`"
                )
                return
            
            try:
                queries_count = int(parts[0])
                month = parts[1]
                min_revenue = int(parts[2])
                min_frequency = int(parts[3])
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                if not (1 <= queries_count <= 5):
                    raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
                    
            except ValueError as e:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {e}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            user_balance = get_user_balance(user_id)
            cost = COSTS.get('oracle_queries', 50)
            
            if user_balance < cost:
                await message.reply(
                    f"üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n"
                    f"–ù—É–∂–Ω–æ: {cost}‚ÇΩ, —É –≤–∞—Å: {user_balance}‚ÇΩ"
                )
                return
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            update_user_balance(user_id, -cost)
            await state.clear()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            loading_msg = await message.reply(
                "üîÆ *–û—Ä–∞–∫—É–ª –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ –∞–Ω–∞–ª–∏–∑—É...*\n\n"
                f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤: {queries_count}\n"
                f"üìÖ –ú–µ—Å—è—Ü: {month}\n"
                f"üí∞ –ú–∏–Ω. –≤—ã—Ä—É—á–∫–∞: {min_revenue:,}‚ÇΩ\n"
                f"üîç –ú–∏–Ω. —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å: {min_frequency:,}\n\n"
                "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã...",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            oracle_data = await oracle.get_search_queries_data(
                queries_count, month, min_revenue, min_frequency
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = format_oracle_results(oracle_data)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            await loading_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await message.reply(
                result_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=back_keyboard()
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            logger.info(f"Oracle analysis completed for user {user_id}, cost: {cost}‚ÇΩ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ oracle queries input: {e}")
            await state.clear()
            await message.reply(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
                "–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.",
                reply_markup=back_keyboard()
            )
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            update_user_balance(user_id, COSTS.get('oracle_queries', 50))

    @dp.message(lambda message: message.text and message.text.strip(), UserStates.waiting_for_oracle_category)
    async def handle_oracle_category_input(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        try:
            user_id = message.from_user.id
            user_input = message.text.strip()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            category_type = data.get('oracle_category_type', 'products')
            
            # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            parts = [p.strip() for p in user_input.split('|')]
            
            if len(parts) != 2:
                await message.reply(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "`–∑–∞–ø—Ä–æ—Å/–∫–∞—Ç–µ–≥–æ—Ä–∏—è | –º–µ—Å—è—Ü`\n\n"
                    "–ü—Ä–∏–º–µ—Ä: `—Ç–µ–ª–µ—Ñ–æ–Ω | 2024-01`"
                )
                return
            
            query_category = parts[0]
            month = parts[1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            user_balance = get_user_balance(user_id)
            cost = COSTS.get('oracle_queries', 50)
            
            if user_balance < cost:
                await message.reply(f"üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ: {cost}‚ÇΩ")
                return
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            update_user_balance(user_id, -cost)
            await state.clear()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            loading_msg = await message.reply(
                f"üîÆ *–ê–Ω–∞–ª–∏–∑ –ø–æ {category_type}...*\n\n"
                f"üîç –ó–∞–ø—Ä–æ—Å: {query_category}\n"
                f"üìÖ –ú–µ—Å—è—Ü: {month}\n\n"
                "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            oracle_data = await oracle.get_oracle_by_category(
                query_category, month, category_type
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = format_oracle_results(oracle_data)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            await loading_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await message.reply(
                result_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=back_keyboard()
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            logger.info(f"Oracle category analysis completed for user {user_id}, type: {category_type}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ oracle category input: {e}")
            await state.clear()
            await message.reply(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.",
                reply_markup=back_keyboard()
            )
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            update_user_balance(user_id, COSTS.get('oracle_queries', 50))

if __name__ == "__main__":
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –û—Ä–∞–∫—É–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≥–æ—Ç–æ–≤—ã!")
    print("\n–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
    print("1. –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ UserStates")
    print("2. –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ COSTS")
    print("3. –í—ã–∑–≤–∞—Ç—å add_oracle_handlers(dp, get_user_balance, update_user_balance, COSTS)")
    print("4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ oracle_queries.py –≤ —Ç–æ–º –∂–µ –∫–∞—Ç–∞–ª–æ–≥–µ") 