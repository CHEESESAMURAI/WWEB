import re
import os
import json
import sqlite3
import asyncio
import requests
from datetime import date, datetime, timedelta
import time
import aiohttp
import random
from typing import List, Dict, Optional
import logging

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import uvicorn

# Selenium + webdriver_manager
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException

###############################################################################
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

BOT_TOKEN = "7790448077:AAFiiS0a44A40zJUEivONLRutB-kqradDdE"
SERPER_API_KEY = "8ba851ed7ae1e6a655102bea15d73fdb39cdac79"  # –∫–ª—é—á –¥–ª—è serper.dev
ADMIN_ID = 1659228199  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

WELCOME_MESSAGE = (
    "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WHITESAMURAI!*\n\n"
    "–ú—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ "
    "–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É üìä.\n\n"
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ "
    "–≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–π–Ω—Ç—ã."
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–Ω–∞–ª–æ–≥ pending_action)
pending_action = {}

###############################################################################
# –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ (—Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ Telegram-–±–æ—Ç–∞)

def escape_markdown(text: str) -> str:
    if not text:
        return ""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def extract_site(block: str) -> str:
    m = re.search(r'–°–∞–π—Ç:\s*([^\n]+)', block, re.IGNORECASE)
    if m:
        site = m.group(1).strip()
        return site.replace('\\', '')
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def compute_additional_metrics(likes: int,
                               views: int,
                               approx_clients: int,
                               revenue: float,
                               growth_percent: float,
                               price: float = 500.0) -> dict:
    base_score = (likes * 0.1) + (revenue * 0.01) + growth_percent
    if base_score > 100:
        base_score = 100
    if base_score < 20:
        rating = 1
    elif base_score < 40:
        rating = 2
    elif base_score < 60:
        rating = 3
    elif base_score < 80:
        rating = 4
    else:
        rating = 5
    three_day_orders = int(0.27 * (likes + views))
    three_day_growth_rub = three_day_orders * price
    avg_check = price
    total_orders = approx_clients + 1
    return {
        "rating": rating,
        "three_day_orders": three_day_orders,
        "three_day_growth_rub": three_day_growth_rub,
        "avg_check": avg_check,
        "total_orders": total_orders
    }

def extract_likes_views(block: str):
    block_lower = block.lower()
    matches = re.findall(r'(\d+)\s*likes,\s*(\d+)\s*comments', block_lower)
    if matches:
        try:
            return int(matches[0][0]), int(matches[0][1])
        except ValueError:
            pass
    m_likes = re.search(r'(\d+)\s*likes', block_lower)
    m_views = re.search(r'(\d+)\s*comments', block_lower)
    likes = int(m_likes.group(1)) if m_likes else 0
    views = int(m_views.group(1)) if m_views else 0
    return likes, views

def estimate_impact(likes, views):
    if likes == 0 and views == 0:
        likes = 10
        views = 100
    approx_clients = int(likes * 0.1 + views * 0.05)
    avg_check = 500
    approx_revenue = approx_clients * avg_check
    baseline = 10000
    growth_percent = (approx_revenue / baseline) * 100 if baseline else 0
    return approx_clients, approx_revenue, growth_percent

def format_site_results_from_items(items: list) -> str:
    lines = []
    for item in items:
        title = item.get("title", "–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        link = item.get("link", "")
        snippet = item.get("snippet", "")
        likes, views = extract_likes_views(snippet)
        approx_clients, approx_revenue, growth = estimate_impact(likes, views)
        price = 500.0
        metrics = compute_additional_metrics(
            likes=likes,
            views=views,
            approx_clients=approx_clients,
            revenue=approx_revenue,
            growth_percent=growth,
            price=price
        )
        rating = metrics["rating"]
        three_day_orders = metrics["three_day_orders"]
        three_day_growth_rub = metrics["three_day_growth_rub"]
        avg_check = metrics["avg_check"]
        total_orders = metrics["total_orders"]
        clickable_title = f"[{escape_markdown(title)}]({link})" if link else escape_markdown(title)
        domain = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if link:
            domain = re.sub(r'^https?://(www\.)?', '', link).split('/')[0]
        result_text = (
            f"{clickable_title}\n"
            f"üåê –°–∞–π—Ç: {domain}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –±–ª–æ–≥–µ—Ä–∞: {rating}\n"
            f"üìà –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 3 –¥–Ω—è: {three_day_orders} —à—Ç ({(three_day_orders*100)//(likes+views+1)}%)\n"
            f"üí∞ –ü—Ä–∏—Ä–æ—Å—Ç –≤ —Ä—É–±–ª—è—Ö: {int(three_day_growth_rub)}‚ÇΩ\n"
            f"üì¶ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {int(avg_check)}‚ÇΩ\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders} —à—Ç\n"
            f"‚Äî\n"
            f"üëç –õ–∞–π–∫–∏: {likes}, üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}\n"
            f"üë• –ü—Ä–∏–º–µ—Ä–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {approx_clients}, –í—ã—Ä—É—á–∫–∞ ~ {int(approx_revenue)}‚ÇΩ\n"
            f"üìà –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ ~ {growth:.1f}%"
        )
        lines.append(result_text)
    return "\n\n".join(lines)

def format_sales_info(data):
    def esc(t):
        return escape_markdown(t)
    title = esc(data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'))
    price = esc(data.get('–¶–µ–Ω–∞', '0 ‚ÇΩ'))
    reviews = esc(data.get('–û—Ç–∑—ã–≤—ã', '–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤'))
    s_day = str(data.get('–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏', 0))
    s_week_est = str(data.get('–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é', 0))
    s_month_est = str(data.get('–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü', 0))
    rev_day = esc(data.get('–í—ã—Ä—É—á–∫–∞ –∑–∞ —Å—É—Ç–∫–∏', '0 ‚ÇΩ'))
    rev_week_est = esc(data.get('–í—ã—Ä—É—á–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)', '0 ‚ÇΩ'))
    rev_month_est = esc(data.get('–í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)', '0 ‚ÇΩ'))
    profit_day = esc(data.get('–ü—Ä–∏–±—ã–ª—å –∑–∞ —Å—É—Ç–∫–∏', '0 ‚ÇΩ'))
    profit_week_est = esc(data.get('–ü—Ä–∏–±—ã–ª—å –∑–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)', '0 ‚ÇΩ'))
    profit_month_est = esc(data.get('–ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)', '0 ‚ÇΩ'))
    trend = esc(data.get('–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ (–ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–Ω—é)', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'))
    text = (
        f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {title}\n"
        f"*–¶–µ–Ω–∞:* {price}\n"
        f"*–û—Ç–∑—ã–≤—ã:* {reviews}\n\n"
        f"*–ü—Ä–æ–¥–∞–∂–∏:*\n"
        f"  ‚Ä¢ –ó–∞ —Å—É—Ç–∫–∏: {s_day}\n"
        f"  ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {s_week_est}\n"
        f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {s_month_est}\n\n"
        f"*–í—ã—Ä—É—á–∫–∞:*\n"
        f"  ‚Ä¢ –ó–∞ —Å—É—Ç–∫–∏: {rev_day}\n"
        f"  ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {rev_week_est}\n"
        f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {rev_month_est}\n\n"
        f"*–ü—Ä–∏–±—ã–ª—å:*\n"
        f"  ‚Ä¢ –ó–∞ —Å—É—Ç–∫–∏: {profit_day}\n"
        f"  ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {profit_week_est}\n"
        f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {profit_month_est}\n\n"
        f"*–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ (–ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–Ω—é):* {trend}\n"
    )
    return text

###############################################################################
# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (SQLite)

def init_db():
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    cur.execute('''
        CREATE TABLE IF NOT EXISTS tracked_articles (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            article TEXT
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance REAL DEFAULT 0,
            subscription_until TEXT DEFAULT NULL
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    cur.execute('''
        CREATE TABLE IF NOT EXISTS user_view_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            article TEXT,
            view_date TEXT,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    cur.execute('''
        CREATE TABLE IF NOT EXISTS seasonal_patterns (
            article TEXT PRIMARY KEY,
            peak_month INTEGER,
            low_month INTEGER,
            seasonal_factor REAL,
            last_updated TEXT
        )
    ''')
    
    conn.commit()
    conn.close()

def get_user_info(user_id):
    if user_id == ADMIN_ID:
        return 777777, None
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("SELECT balance, subscription_until FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    if not row:
        cur.execute("INSERT INTO users (user_id, balance, subscription_until) VALUES (?, ?, ?)",
                    (user_id, 0, None))
        conn.commit()
        balance = 0
        subscription_until = None
    else:
        balance, subscription_until = row
    conn.close()
    return balance, subscription_until

def update_user_balance(user_id, new_balance):
    if user_id == ADMIN_ID:
        return
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, user_id))
    conn.commit()
    conn.close()

def update_user_subscription(user_id, new_date_str):
    if user_id == ADMIN_ID:
        return
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("UPDATE users SET subscription_until = ? WHERE user_id = ?", (new_date_str, user_id))
    conn.commit()
    conn.close()

def user_has_subscription(user_id):
    if user_id == ADMIN_ID:
        return True
    balance, sub_until_str = get_user_info(user_id)
    if not sub_until_str:
        return False
    try:
        sub_until = datetime.strptime(sub_until_str, "%Y-%m-%d").date()
        return sub_until >= date.today()
    except:
        return False

def add_article(user_id, article):
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM tracked_articles WHERE user_id = ? AND article = ?", (user_id, article))
    if cur.fetchone() is None:
        cur.execute("INSERT INTO tracked_articles (user_id, article) VALUES (?, ?)", (user_id, article))
        conn.commit()
        conn.close()
        return True
    else:
        conn.close()
        return False

def remove_article(user_id, article):
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("DELETE FROM tracked_articles WHERE user_id = ? AND article = ?", (user_id, article))
    conn.commit()
    conn.close()

def list_articles(user_id):
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("SELECT article FROM tracked_articles WHERE user_id = ?", (user_id,))
    rows = cur.fetchall()
    conn.close()
    return [row[0] for row in rows]

###############################################################################
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Wildberries, Serper.dev –∏ –∞–Ω–∞–ª–∏–∑–∞
# (–í –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äì –∏—Ö –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å)

def get_api_data(article, price, commission=0.15):
    api_url = f"https://card.wb.ru/cards/v1/detail?appType=1&curr=rub&dest=-1257786&spp=0&nm={article}"
    sales_info = {"sales_today": 0, "revenue_today": 0, "profit_today": 0}
    try:
        resp = requests.get(api_url, headers={"User-Agent": "Mozilla/5.0"})
        if resp.status_code == 200:
            data_api = resp.json()
            products = data_api.get("data", {}).get("products", [])
            if products:
                product_data = products[0]
                sales_today = product_data.get("sale", 0)
                sales_info["sales_today"] = sales_today
                revenue_today = sales_today * price
                profit_today = revenue_today * (1 - commission)
                sales_info["revenue_today"] = revenue_today
                sales_info["profit_today"] = profit_today
    except:
        pass
    return sales_info

def get_wb_product_info(article):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —Å Wildberries —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Selenium.
    """
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    
    try:
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
        url = f"https://www.wildberries.ru/catalog/{article}/detail.aspx"
        driver.get(url)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
        product_data = get_product_page_data(driver)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥–∞–∂
        history = load_sales_history()
        article_history = history.get(article, [])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥–∞–∂
        update_sales_history(article, product_data['–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏'])
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂
        trend = compute_sales_trend(article_history)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
        price = int(re.sub(r'[^\d]', '', product_data['–¶–µ–Ω–∞']))
        api_data = get_api_data(article, price)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        result = {
            **product_data,
            '–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ (–ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–Ω—é)': trend,
            **api_data
        }
        
        driver.quit()
        return result
        
    except Exception as e:
        return {
            '–ù–∞–∑–≤–∞–Ω–∏–µ': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}',
            '–¶–µ–Ω–∞': '0 ‚ÇΩ',
            '–û—Ç–∑—ã–≤—ã': '0',
            '–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏': 0,
            '–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é': 0,
            '–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü': 0,
            '–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ (–ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–Ω—é)': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        }

class SearchCache:
    def __init__(self):
        self.cache = {}
        self.cache_timeout = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    def get(self, query):
        if query in self.cache:
            timestamp, data = self.cache[query]
            if time.time() - timestamp < self.cache_timeout:
                return data
        return None
    
    def set(self, query, data):
        self.cache[query] = (time.time(), data)

search_cache = SearchCache()

async def global_search_serper_detailed(query: str, max_results: int = 10, 
                                      include_social: bool = True,
                                      include_news: bool = False,
                                      include_images: bool = False):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Serper.dev —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - query: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    - max_results: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - include_social: –≤–∫–ª—é—á–∞—Ç—å –ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    - include_news: –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –Ω–æ–≤–æ—Å—Ç–∏
    - include_images: –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_results = search_cache.get(query)
    if cached_results:
        return cached_results
    
    url = "https://google.serper.dev/search"
    payload = {
        "q": query,
        "gl": "ru",
        "hl": "ru",
        "num": max_results
    }
    
    headers = {
        "X-API-KEY": SERPER_API_KEY,
        "Content-Type": "application/json"
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=payload) as resp:
                if resp.status != 200:
                    return {
                        "error": f"–û—à–∏–±–∫–∞ serper.dev: {resp.status}",
                        "results": []
                    }
                
                data = await resp.json()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results = {
                    "organic": [],
                    "social": [],
                    "news": [],
                    "images": []
                }
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if "organic" in data:
                    for item in data["organic"]:
                        link = item.get("link", "")
                        if "wildberries" in link.lower():
                            continue
                        
                        # –ê–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞
                        domain = re.sub(r'^https?://(www\.)?', '', link).split('/')[0].lower()
                        
                        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        if include_social and any(social in domain for social in ["vk.com", "instagram.com", "t.me"]):
                            results["social"].append(item)
                        elif include_news and any(news in domain for news in ["news", "media", "press"]):
                            results["news"].append(item)
                        else:
                            results["organic"].append(item)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                if include_images and "images" in data:
                    results["images"] = data["images"][:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                analysis = {
                    "total_results": len(results["organic"]) + len(results["social"]) + len(results["news"]),
                    "social_mentions": len(results["social"]),
                    "news_mentions": len(results["news"]),
                    "has_images": len(results["images"]) > 0
                }
                
                final_results = {
                    "results": results,
                    "analysis": analysis,
                    "timestamp": datetime.now().isoformat()
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                search_cache.set(query, final_results)
                
                return final_results
                
    except Exception as e:
        return {
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}",
            "results": []
        }

def load_sales_history():
    try:
        with open('sales_history.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def update_sales_history(article, sales_today):
    history = load_sales_history()
    if article not in history:
        history[article] = []
    history[article].append({
        'date': str(date.today()),
        'sales': sales_today
    })
    with open('sales_history.json', 'w') as f:
        json.dump(history, f)

def compute_sales_trend(article_history):
    if len(article_history) < 2:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
    today_sales = article_history[-1]['sales']
    yesterday_sales = article_history[-2]['sales']
    if yesterday_sales == 0:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞"
    change = ((today_sales - yesterday_sales) / yesterday_sales) * 100
    if change > 0:
        return f"üìà +{change:.1f}%"
    elif change < 0:
        return f"üìâ {change:.1f}%"
    else:
        return "‚û°Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"

def get_extended_sales_data(driver):
    try:
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        sales_element = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "div[data-widget='webProduct']"))
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        sales_text = sales_element.text
        sales_today = 0
        sales_week = 0
        sales_month = 0
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        if "–ø—Ä–æ–¥–∞–Ω–æ" in sales_text.lower():
            sales_match = re.search(r'–ø—Ä–æ–¥–∞–Ω–æ\s*(\d+)', sales_text.lower())
            if sales_match:
                sales_today = int(sales_match.group(1))
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü
        sales_week = sales_today * 7
        sales_month = sales_today * 30
        
        return {
            'sales_today': sales_today,
            'sales_week': sales_week,
            'sales_month': sales_month
        }
    except TimeoutException:
        return {
            'sales_today': 0,
            'sales_week': 0,
            'sales_month': 0
        }

def try_find_price_by_selectors(driver, selectors):
    for selector in selectors:
        try:
            element = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, selector))
            )
            price_text = element.text.strip()
            price = int(re.sub(r'[^\d]', '', price_text))
            return price
        except:
            continue
    return 0

def get_product_page_data(driver):
    try:
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "div[data-widget='webProduct']"))
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        title = driver.find_element(By.CSS_SELECTOR, "h1[data-widget='webProduct']").text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
        price_selectors = [
            "span[data-widget='webPrice']",
            "div[data-widget='webPrice']",
            "span[data-widget='webCurrentPrice']"
        ]
        price = try_find_price_by_selectors(driver, price_selectors)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
        reviews = "0"
        try:
            reviews_element = driver.find_element(By.CSS_SELECTOR, "span[data-widget='webReview']")
            reviews = reviews_element.text.strip()
        except:
            pass
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        sales_data = get_extended_sales_data(driver)
        
        return {
            '–ù–∞–∑–≤–∞–Ω–∏–µ': title,
            '–¶–µ–Ω–∞': f"{price} ‚ÇΩ",
            '–û—Ç–∑—ã–≤—ã': reviews,
            '–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏': sales_data['sales_today'],
            '–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é': sales_data['sales_week'],
            '–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü': sales_data['sales_month']
        }
    except Exception as e:
        return {
            '–ù–∞–∑–≤–∞–Ω–∏–µ': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
            '–¶–µ–Ω–∞': '0 ‚ÇΩ',
            '–û—Ç–∑—ã–≤—ã': '0',
            '–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏': 0,
            '–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é': 0,
            '–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü': 0
        }

def analyze_market_trends(article_history):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂"""
    if len(article_history) < 7:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤"
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
    weekly_sales = [day['sales'] for day in article_history[-7:]]
    avg_weekly_sales = sum(weekly_sales) / len(weekly_sales)
    weekly_trend = "üìà –†–∞—Å—Ç—É—â–∏–π" if weekly_sales[-1] > weekly_sales[0] else "üìâ –ü–∞–¥–∞—é—â–∏–π"
    
    # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    volatility = max(weekly_sales) - min(weekly_sales)
    volatility_level = "–í—ã—Å–æ–∫–∞—è" if volatility > avg_weekly_sales else "–ù–∏–∑–∫–∞—è"
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
    last_3_days = weekly_sales[-3:]
    forecast = sum(last_3_days) / 3
    
    return {
        "weekly_trend": weekly_trend,
        "avg_weekly_sales": int(avg_weekly_sales),
        "volatility": volatility_level,
        "forecast": int(forecast)
    }

def analyze_competition(article):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Å—Ä–µ–¥—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return {
        "competitors_count": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        "avg_price": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        "market_share": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    }

def get_extended_analysis(article):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞"""
    history = load_sales_history()
    article_history = history.get(article, [])
    
    market_trends = analyze_market_trends(article_history)
    competition = analyze_competition(article)
    
    return {
        "market_analysis": market_trends,
        "competition_analysis": competition
    }

###############################################################################
# FastAPI –∏ –º–∞—Ä—à—Ä—É—Ç—ã API

app = FastAPI(
    title="Whitesamurai Web App",
    description="–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Telegram-–±–æ—Ç–∞",
    version="1.0.0"
)

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
class MessageRequest(BaseModel):
    user_id: int
    text: str

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞
class AlertRequest(BaseModel):
    user_id: int
    article: str
    target_price: float

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
class SearchRequest(BaseModel):
    query: str
    max_results: int = 10
    include_social: bool = True
    include_news: bool = False
    include_images: bool = False

@app.on_event("startup")
def startup_event():
    init_db()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

@app.get("/")
def root():
    return {"message": WELCOME_MESSAGE}

# –≠–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@app.post("/message")
async def process_message(msg: MessageRequest):
    user_id = msg.user_id
    text = msg.text.strip()
    # –ï—Å–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (pending_action)
    if user_id in pending_action:
        action = pending_action[user_id]["action"]
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
        if action == "add":
            if add_article(user_id, text):
                response = f"‚úÖ –ê—Ä—Ç–∏–∫—É–ª {escape_markdown(text)} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."
            else:
                response = f"‚ö†Ô∏è –ê—Ä—Ç–∏–∫—É–ª {escape_markdown(text)} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è."
            pending_action.pop(user_id, None)
            return {"response": response}
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
        elif action == "remove":
            remove_article(user_id, text)
            response = f"‚úÖ –ê—Ä—Ç–∏–∫—É–ª {escape_markdown(text)} —É–¥–∞–ª—ë–Ω."
            pending_action.pop(user_id, None)
            return {"response": response}
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ ‚Äì –ø—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        elif action == "global":
            query = text
            loop = asyncio.get_event_loop()
            search_data = await loop.run_in_executor(None, global_search_serper_detailed, query)
            if search_data["error"]:
                response_text = search_data["error"]
            else:
                pending_action[user_id] = {
                    "action": "global",
                    "query": query,
                    "results": search_data["results"],
                    "last_displayed": 5
                }
                first_batch = pending_action[user_id]["results"][:5]
                response_text = format_site_results_from_items(first_batch)
            return {"response": response_text}
        # –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ç–∏–∫—É–ª–∞
        elif action == "analysis_article":
            loop = asyncio.get_event_loop()
            info = await loop.run_in_executor(None, get_wb_product_info, text)
            daily_sales = info.get("–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏", 0)
            monthly_sales = daily_sales * 30
            yearly_sales = daily_sales * 365
            daily_profit_str = info.get("–ü—Ä–∏–±—ã–ª—å –∑–∞ —Å—É—Ç–∫–∏", "0").replace("‚ÇΩ", "").strip()
            try:
                daily_profit = float(daily_profit_str)
            except:
                daily_profit = 0.0
            yearly_profit = daily_profit * 365
            try:
                price_str = info.get("–¶–µ–Ω–∞", "0").replace("‚ÇΩ", "").strip()
                price_value = float(price_str)
            except:
                price_value = 0.0
            if price_value > 0:
                profit_margin = daily_profit / price_value * 100
            else:
                profit_margin = 0
            if profit_margin < 5:
                probability_price_drop_value = 70
            elif profit_margin < 15:
                probability_price_drop_value = 40
            else:
                probability_price_drop_value = 10
            probability_price_drop = f"{probability_price_drop_value}%"
            target_daily = 100
            target_monthly = 2000
            target_half_year = 10000
            target_yearly = 18000
            potential_day_value = min((daily_sales / target_daily) * 100, 100)
            potential_month_value = min((monthly_sales / target_monthly) * 100, 100)
            potential_half_year_value = min(((yearly_sales / 2) / target_half_year) * 100, 100)
            potential_year_value = min((yearly_sales / target_yearly) * 100, 100)
            analysis_text = (
                f"*–ê–Ω–∞–ª–∏–∑ –ê—Ä—Ç–∏–∫—É–ª–∞: {escape_markdown(text)}*\n\n"
                f"*–ü—Ä–æ–¥–∞–∂–∏:*\n"
                f"  ‚Ä¢ –ó–∞ —Å—É—Ç–∫–∏: {daily_sales}\n"
                f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {monthly_sales}\n"
                f"  ‚Ä¢ –ó–∞ –≥–æ–¥: {yearly_sales}\n\n"
                f"*–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥:* {yearly_profit:.0f} ‚ÇΩ\n"
                f"*–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥:* {probability_price_drop}\n\n"
                f"*–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–æ–¥–∞–∂:*\n"
                f"  ‚Ä¢ –ó–∞ —Å—É—Ç–∫–∏: {int(potential_day_value)}%\n"
                f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {int(potential_month_value)}%\n"
                f"  ‚Ä¢ –ó–∞ –ø–æ–ª–≥–æ–¥–∞: {int(potential_half_year_value)}%\n"
                f"  ‚Ä¢ –ó–∞ –≥–æ–¥: {int(potential_year_value)}%\n"
            )
            pending_action.pop(user_id, None)
            return {"response": analysis_text}
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        elif action == "analysis_category":
            category = text
            sum_ascii = sum(ord(ch) for ch in category)
            current_success = (sum_ascii // 10) % 100
            forecast_success = min(current_success + 5, 100)
            analysis_result = (
                f"*–ê–Ω–∞–ª–∏–∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {escape_markdown(category)}*\n\n"
                f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å: {current_success}%\n"
                f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥: {forecast_success}% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å"
            )
            pending_action.pop(user_id, None)
            return {"response": analysis_result}
        else:
            pending_action.pop(user_id, None)
            return {"response": "–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –∫–æ–º–∞–Ω–¥—ã."}
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä ‚Äì —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä—É
        if text.isdigit():
            if not user_has_subscription(user_id):
                return {"response": "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!"}
            loop = asyncio.get_event_loop()
            info = await loop.run_in_executor(None, get_wb_product_info, text)
            response_text = format_sales_info(info)
            return {"response": response_text}
        else:
            return {"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤."}

# –≠–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∫–æ–º–∞–Ω–¥ (—ç–º—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É callback_query)
@app.post("/callback")
async def process_callback(user_id: int, callback_data: str):
    if callback_data == "back":
        pending_action.pop(user_id, None)
        return {"response": WELCOME_MESSAGE}
    elif callback_data == "menu_cabinet":
        balance, sub_until_str = get_user_info(user_id)
        sub_info = f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {sub_until_str}" if sub_until_str else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        text = (
            f"üíº *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
            f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞: {sub_info}\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã: top_up, subscribe"
        )
        return {"response": text}
    elif callback_data == "top_up":
        pending_action[user_id] = {"action": "top_up_screenshot"}
        return {"response": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–π–Ω—Ç /photo)."}
    elif callback_data == "subscribe":
        cost = 500
        balance, sub_until_str = get_user_info(user_id)
        if balance >= cost:
            new_balance = balance - cost
            update_user_balance(user_id, new_balance)
            new_sub_date = (date.today() + timedelta(days=30)).strftime("%Y-%m-%d")
            update_user_subscription(user_id, new_sub_date)
            return {"response": f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –¥–æ {new_sub_date}! –û—Å—Ç–∞—Ç–æ–∫: {new_balance:.2f} ‚ÇΩ"}
        else:
            return {"response": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {cost} ‚ÇΩ. –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ"}
    else:
        return {"response": "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞."}

# –≠–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞
@app.post("/set_alert")
async def set_price_alert(alert: AlertRequest):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–ª–µ—Ä—Ç –Ω–∞ —Ü–µ–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user_has_subscription(alert.user_id):
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!")
    
    notification_system.set_price_alert(alert.user_id, alert.article, alert.target_price)
    return {"message": f"–ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ü–µ–Ω—É {alert.target_price} –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {alert.article}"}

# –≠–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
@app.post("/remove_alert")
async def remove_price_alert(alert: AlertRequest):
    """–£–¥–∞–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –Ω–∞ —Ü–µ–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    notification_system.remove_price_alert(alert.user_id, alert.article)
    return {"message": f"–ê–ª–µ—Ä—Ç —É–¥–∞–ª–µ–Ω –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {alert.article}"}

# –≠–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞
@app.get("/extended_analysis/{article}")
async def get_article_analysis(article: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞"""
    try:
        analysis = get_extended_analysis(article)
        return analysis
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –≠–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
@app.get("/market_trends/{article}")
async def get_market_trends(article: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        history = load_sales_history()
        article_history = history.get(article, [])
        trends = analyze_market_trends(article_history)
        return trends
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/recommendations/{article}")
async def get_product_recommendations(article: str, user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    if not user_has_subscription(user_id):
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!")
    
    try:
        recommendations = recommendation_system.get_recommendations(article, user_id)
        update_user_view_history(user_id, article)
        return recommendations
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/seasonality/{article}")
async def get_seasonality_analysis(article: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        analysis = seasonality_analyzer.predict_seasonal_trend(article)
        return analysis
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/combined_analysis/{article}")
async def get_combined_analysis(article: str, user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product_info = get_wb_product_info(article)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = recommendation_system.get_recommendations(article, user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
        seasonality = seasonality_analyzer.predict_seasonal_trend(article)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
        market_trends = analyze_market_trends(load_sales_history().get(article, []))
        
        return {
            "product_info": product_info,
            "recommendations": recommendations,
            "seasonality": seasonality,
            "market_trends": market_trends
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –≠–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
@app.post("/search")
async def perform_search(search_request: SearchRequest):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Serper.dev"""
    try:
        results = await global_search_serper_detailed(
            query=search_request.query,
            max_results=search_request.max_results,
            include_social=search_request.include_social,
            include_news=search_request.include_news,
            include_images=search_request.include_images
        )
        
        if "error" in results and results["error"]:
            raise HTTPException(status_code=500, detail=results["error"])
            
        return results
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/test_analysis/{article}")
async def test_analysis(article: str):
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
        product_analysis = await product_card_analyzer.analyze_product(article)
        if "error" in product_analysis:
            return {"error": product_analysis["error"]}
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        trend_analysis = await trend_analyzer.analyze_trend(article)
        if "error" in trend_analysis:
            return {"error": trend_analysis["error"]}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
        report = {
            "product_info": product_analysis["product_info"],
            "metrics": product_analysis["metrics"],
            "risk_analysis": product_analysis["risk_analysis"],
            "trend_analysis": trend_analysis["trend_analysis"],
            "seasonality_analysis": trend_analysis["seasonality_analysis"],
            "forecast": {
                "product": product_analysis["forecast"],
                "trend": trend_analysis["forecast"]
            }
        }
        
        return report
        
    except Exception as e:
        return {"error": str(e)}

###############################################################################
# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)

class NotificationSystem:
    def __init__(self):
        self.alerts = {}
    
    async def check_price_alerts(self, article, current_price):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
        if article in self.alerts:
            for user_id, alert_price in self.alerts[article].items():
                if current_price < alert_price:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
                    print(f"Alert: Price for article {article} dropped below {alert_price} for user {user_id}")
    
    def set_price_alert(self, user_id, article, target_price):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–ª–µ—Ä—Ç –Ω–∞ —Ü–µ–Ω—É"""
        if article not in self.alerts:
            self.alerts[article] = {}
        self.alerts[article][user_id] = target_price
    
    def remove_price_alert(self, user_id, article):
        """–£–¥–∞–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –Ω–∞ —Ü–µ–Ω—É"""
        if article in self.alerts and user_id in self.alerts[article]:
            del self.alerts[article][user_id]

notification_system = NotificationSystem()

class RecommendationSystem:
    def __init__(self):
        self.similar_products = {}
    
    def find_similar_products(self, article, category):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä
        return {
            "similar_articles": [
                {"article": "123456", "similarity": 0.85},
                {"article": "789012", "similarity": 0.78},
                {"article": "345678", "similarity": 0.72}
            ]
        }
    
    def get_recommendations(self, article, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            product_info = get_wb_product_info(article)
            category = product_info.get('category', 'unknown')
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã
            similar = self.find_similar_products(article, category)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_history = get_user_view_history(user_id)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
            filtered_recommendations = self.filter_by_user_history(similar, user_history)
            
            return {
                "status": "success",
                "recommendations": filtered_recommendations
            }
        except Exception as e:
            return {
                "status": "error",
                "message": str(e)
            }
    
    def filter_by_user_history(self, recommendations, user_history):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        return [rec for rec in recommendations['similar_articles'] 
                if rec['article'] not in user_history]

recommendation_system = RecommendationSystem()

def get_user_view_history(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("SELECT article FROM user_view_history WHERE user_id = ?", (user_id,))
    history = [row[0] for row in cur.fetchall()]
    conn.close()
    return history

def update_user_view_history(user_id, article):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO user_view_history (user_id, article, view_date) 
        VALUES (?, ?, ?)
    """, (user_id, article, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
    conn.close()

class SeasonalityAnalyzer:
    def __init__(self):
        self.seasonal_patterns = {}
    
    def analyze_seasonality(self, article_history):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        if len(article_history) < 30:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_sales = {}
        for record in article_history:
            date_obj = datetime.strptime(record['date'], "%Y-%m-%d")
            month = date_obj.month
            if month not in monthly_sales:
                monthly_sales[month] = []
            monthly_sales[month].append(record['sales'])
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        avg_monthly_sales = {
            month: sum(sales) / len(sales) 
            for month, sales in monthly_sales.items()
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        max_month = max(avg_monthly_sales.items(), key=lambda x: x[1])[0]
        min_month = min(avg_monthly_sales.items(), key=lambda x: x[1])[0]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
        seasonal_factor = avg_monthly_sales[max_month] / avg_monthly_sales[min_month]
        
        return {
            "peak_month": max_month,
            "low_month": min_month,
            "seasonal_factor": round(seasonal_factor, 2),
            "monthly_averages": avg_monthly_sales
        }
    
    def predict_seasonal_trend(self, article):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        history = load_sales_history()
        article_history = history.get(article, [])
        
        if len(article_history) < 30:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞"
        
        seasonality = self.analyze_seasonality(article_history)
        current_month = datetime.now().month
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
        if current_month == seasonality["peak_month"]:
            trend = "üìà –ü–∏–∫ —Å–µ–∑–æ–Ω–∞"
        elif current_month == seasonality["low_month"]:
            trend = "üìâ –ù–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω"
        else:
            trend = "‚û°Ô∏è –°—Ä–µ–¥–Ω–∏–π —Å–µ–∑–æ–Ω"
        
        return {
            "current_trend": trend,
            "seasonality_analysis": seasonality,
            "recommendation": self.get_seasonal_recommendation(seasonality)
        }
    
    def get_seasonal_recommendation(self, seasonality):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏"""
        current_month = datetime.now().month
        months_to_peak = (seasonality["peak_month"] - current_month) % 12
        
        if months_to_peak == 0:
            return "–°–µ–π—á–∞—Å –ø–∏–∫ —Å–µ–∑–æ–Ω–∞ - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–¥–∞–∂"
        elif months_to_peak <= 3:
            return f"–î–æ –ø–∏–∫–∞ —Å–µ–∑–æ–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å {months_to_peak} –º–µ—Å—è—Ü–µ–≤ - –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Ä–æ—Å—Ç—É —Å–ø—Ä–æ—Å–∞"
        else:
            return "–°–µ–π—á–∞—Å –Ω–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω"

seasonality_analyzer = SeasonalityAnalyzer()

class NicheAnalyzer:
    def __init__(self):
        self.cache = {}
        self.cache_timeout = 3600  # 1 —á–∞—Å
        self._session = None
    
    @property
    def session(self):
        if self._session is None:
            self._session = aiohttp.ClientSession()
        return self._session
    
    async def analyze_niche(self, keyword: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∏—à—É –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"{keyword}"
            if cache_key in self.cache:
                timestamp, data = self.cache[cache_key]
                if time.time() - timestamp < self.cache_timeout:
                    return data
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
            products = await self.get_products_by_keyword(keyword)
            if not products:
                return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –ø–æ –¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            total_products = len(products)
            total_sales = sum(p['sales'] for p in products)
            avg_price = sum(p['price'] for p in products) / total_products if total_products > 0 else 0
            avg_rating = sum(p['rating'] for p in products) / total_products if total_products > 0 else 0
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é
            competition_level = "–í—ã—Å–æ–∫–∞—è" if total_products > 100 else "–°—Ä–µ–¥–Ω—è—è" if total_products > 50 else "–ù–∏–∑–∫–∞—è"
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –Ω–∏—à–∏
            market_volume = total_sales * avg_price
            potential = "–í—ã—Å–æ–∫–∏–π" if market_volume > 1000000 else "–°—Ä–µ–¥–Ω–∏–π" if market_volume > 500000 else "–ù–∏–∑–∫–∏–π"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = []
            if competition_level == "–í—ã—Å–æ–∫–∞—è":
                recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–∫–∞—Ç—å –º–µ–Ω–µ–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é –Ω–∏—à—É")
            if avg_rating < 4:
                recommendations.append("–ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–π—Ç–∏ –Ω–∞ —Ä—ã–Ω–æ–∫ —Å –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º")
            if market_volume > 1000000:
                recommendations.append("–í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –Ω–∏—à—É –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
            
            analysis = {
                "metrics": {
                    "market_volume": market_volume,
                    "competition": competition_level,
                    "products_count": total_products,
                    "avg_price": avg_price,
                    "avg_rating": avg_rating
                },
                "trends": {
                    "sales_trend": "–†–∞—Å—Ç—É—â–∏–π" if total_sales > 1000 else "–°—Ç–∞–±–∏–ª—å–Ω—ã–π",
                    "potential": potential
                },
                "risks": [
                    "–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è" if competition_level == "–í—ã—Å–æ–∫–∞—è" else "–ù–∏–∑–∫–∏–π —Å–ø—Ä–æ—Å" if total_sales < 100 else "–£–º–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏"
                ],
                "recommendations": recommendations
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.cache[cache_key] = (time.time(), analysis)
            return analysis
            
        except Exception as e:
            return {"error": str(e)}
    
    async def get_products_by_keyword(self, keyword: str, min_sales: int = 0, max_competition: float = 1.0, min_margin: int = 0) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞
            url = f"https://search.wb.ru/exactmatch/ru/common/v4/search?TestGroup=no_test&TestID=no_test&appType=1&curr=rub&dest=-1257786&query={keyword}&resultset=catalog&sort=popular&spp=0"
            
            async with self.session.get(url) as response:
                if response.status != 200:
                    return []
                
                data = await response.json()
                products = data.get('data', {}).get('products', [])
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                filtered_products = []
                for product in products:
                    sales = product.get('salePriceU', 0) / 100
                    price = product.get('priceU', 0) / 100
                    rating = product.get('rating', 0)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                    competition = len(products) / 1000  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-1
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                    margin = (price - sales) / price * 100 if price > 0 else 0
                    
                    if (sales >= min_sales and 
                        competition <= max_competition and 
                        margin >= min_margin):
                        filtered_products.append({
                            'id': product.get('id'),
                            'name': product.get('name'),
                            'sales': sales,
                            'price': price,
                            'rating': rating,
                            'competition': competition,
                            'margin': margin
                        })
                
                return filtered_products
        except Exception as e:
            logger.error(f"Error searching products: {e}")
            return []

class ProductCardAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞."""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    async def analyze_product(self, article):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É."""
        self.logger.info(f"Analyzing product with article {article}")
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return {
                "article": article,
                "name": f"–¢–æ–≤–∞—Ä {article}",
                "price": random.randint(500, 5000),
                "rating": random.uniform(3.5, 5.0),
                "feedbacks": random.randint(10, 1000),
                "sales": {
                    "today": random.randint(1, 100),
                    "total": random.randint(100, 10000)
                }
            }
        except Exception as e:
            self.logger.error(f"Error analyzing product: {str(e)}")
            return None

class TrendAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤."""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    async def analyze_trend(self, keyword):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É."""
        self.logger.info(f"Analyzing trend for keyword {keyword}")
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return {
                "keyword": keyword,
                "popularity": random.randint(1, 100),
                "growth": random.uniform(-10.0, 30.0),
                "competition": random.randint(1, 100),
                "sales_potential": random.randint(1, 5)
            }
        except Exception as e:
            self.logger.error(f"Error analyzing trend: {str(e)}")
            return None
