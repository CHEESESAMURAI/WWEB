#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
"""

import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_comprehensive_seasonality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏"""
    
    try:
        # –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã
        from seasonality_comprehensive import get_comprehensive_seasonality_data, format_comprehensive_seasonality_analysis
        logger.info("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        test_categories = [
            "–ñ–µ–Ω—â–∏–Ω–∞–º",
            "–ú—É–∂—á–∏–Ω–∞–º/–û–±—É–≤—å", 
            "–î–µ—Ç—è–º/–ò–≥—Ä—É—à–∫–∏",
            "–ö—Ä–∞—Å–æ—Ç–∞/–£—Ö–æ–¥ –∑–∞ –ª–∏—Ü–æ–º",
            "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞/–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
            "–î–æ–º –∏ –¥–∞—á–∞/–ú–µ–±–µ–ª—å",
            "–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö/–§–∏—Ç–Ω–µ—Å",
            "–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã/–®–∏–Ω—ã",
            "–ö–Ω–∏–≥–∏",
            "–ó–æ–æ—Ç–æ–≤–∞—Ä—ã"
        ]
        
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é {len(test_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        for i, category in enumerate(test_categories, 1):
            logger.info(f"üìä –¢–µ—Å—Ç {i}/{len(test_categories)}: {category}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data = await get_comprehensive_seasonality_data(category)
                
                if data:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    formatted = format_comprehensive_seasonality_analysis(data, category)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if len(formatted) > 1000:
                        logger.info(f"‚úÖ {category}: –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω ({len(formatted)} —Å–∏–º–≤–æ–ª–æ–≤)")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        lines = formatted.split('\n')[:10]
                        preview = '\n'.join(lines)
                        logger.info(f"üìù –ü—Ä–µ–≤—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n{preview}...")
                        
                    else:
                        logger.warning(f"‚ö†Ô∏è {category}: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(formatted)} —Å–∏–º–≤–æ–ª–æ–≤)")
                        
                else:
                    logger.error(f"‚ùå {category}: –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                    
            except Exception as e:
                logger.error(f"‚ùå {category}: –û—à–∏–±–∫–∞ - {str(e)}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await asyncio.sleep(0.5)
        
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except ImportError as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    
    return True

async def test_specific_category():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ"""
    
    try:
        from seasonality_comprehensive import get_comprehensive_seasonality_data, format_comprehensive_seasonality_analysis
        
        category = "–ñ–µ–Ω—â–∏–Ω–∞–º/–ü–ª–∞—Ç—å—è –∏ —Å–∞—Ä–∞—Ñ–∞–Ω—ã"
        logger.info(f"üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await get_comprehensive_seasonality_data(category)
        
        if data:
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
            for key in data.keys():
                logger.info(f"  ‚Ä¢ {key}: {type(data[key])}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted = format_comprehensive_seasonality_analysis(data, category)
            
            logger.info(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç ({len(formatted)} —Å–∏–º–≤–æ–ª–æ–≤):")
            print("=" * 80)
            print(formatted)
            print("=" * 80)
            
        else:
            logger.error("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    asyncio.run(test_comprehensive_seasonality())
    
    print("\n" + "="*80)
    print("üîç –ü–û–î–†–û–ë–ù–´–ô –¢–ï–°–¢ –ö–ê–¢–ï–ì–û–†–ò–ò")
    print("="*80)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ—Å—Ç
    asyncio.run(test_specific_category()) 