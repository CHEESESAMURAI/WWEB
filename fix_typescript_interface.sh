#!/bin/bash

echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TYPESCRIPT –û–®–ò–ë–û–ö..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

cd /opt/wild-analytics || { echo -e "${RED}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"; exit 1; }

log "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ TypeScript –≤ App.tsx..."
cat > wild-analytics-web/src/App.tsx << 'EOF'
import React, { useState, useEffect } from 'react';

interface User {
  id: number;
  email: string;
  name: string;
  balance: number;
  subscription_type: string;
}

interface AnalysisResult {
  success: boolean;
  product?: any;
  category_analysis?: any;
  brand_analysis?: any;
  results?: any[];
  query?: string;
  total?: number;
  error?: string;
}

const App: React.FC = () => {
  const [user, setUser] = useState<User | null>(null);
  const [currentPage, setCurrentPage] = useState('login');
  const [email, setEmail] = useState('test@example.com');
  const [password, setPassword] = useState('password123');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [message, setMessage] = useState('');
  const [token, setToken] = useState('');

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const [productQuery, setProductQuery] = useState('314308192');
  const [categoryQuery, setCategoryQuery] = useState('—Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã');
  const [brandQuery, setBrandQuery] = useState('Apple');
  const [globalQuery, setGlobalQuery] = useState('iPhone');
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);

  useEffect(() => {
    const savedToken = localStorage.getItem('token');
    const savedUser = localStorage.getItem('user');
    if (savedToken && savedUser) {
      setToken(savedToken);
      setUser(JSON.parse(savedUser));
      setCurrentPage('dashboard');
    }
  }, []);

  const apiCall = async (url: string, options: any = {}) => {
    const headers = {
      'Content-Type': 'application/json',
      ...(token && { 'Authorization': `Bearer ${token}` }),
      ...options.headers,
    };

    const response = await fetch(`http://93.127.214.183:8000${url}`, {
      ...options,
      headers,
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    return response.json();
  };

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const data = await apiCall('/auth/login', {
        method: 'POST',
        body: JSON.stringify({ email, password }),
      });

      if (data.success) {
        setToken(data.access_token);
        setUser(data.user);
        localStorage.setItem('token', data.access_token);
        localStorage.setItem('user', JSON.stringify(data.user));
        setCurrentPage('dashboard');
        setMessage('–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = () => {
    setUser(null);
    setToken('');
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    setCurrentPage('login');
    setMessage('');
  };

  const analyzeProduct = async () => {
    setLoading(true);
    setError('');
    try {
      const data = await apiCall('/analysis/products', {
        method: 'POST',
        body: JSON.stringify({ query: productQuery }),
      });
      setAnalysisResult(data);
      setMessage(data.success ? '–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω!' : '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞');
    } finally {
      setLoading(false);
    }
  };

  const analyzeCategory = async () => {
    setLoading(true);
    setError('');
    try {
      const data = await apiCall(`/analysis/categories?category=${categoryQuery}`);
      setAnalysisResult(data);
      setMessage(data.success ? '–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω!' : '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  const analyzeBrand = async () => {
    setLoading(true);
    setError('');
    try {
      const data = await apiCall(`/analysis/brands?brand=${brandQuery}`);
      setAnalysisResult(data);
      setMessage(data.success ? '–ê–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω!' : '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±—Ä–µ–Ω–¥–∞');
    } finally {
      setLoading(false);
    }
  };

  const globalSearch = async () => {
    setLoading(true);
    setError('');
    try {
      const data = await apiCall('/search/global', {
        method: 'POST',
        body: JSON.stringify({ query: globalQuery }),
      });
      setAnalysisResult({...data, query: globalQuery});
      setMessage(data.success ? '–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω!' : '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  const styles = {
    container: {
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      color: 'white',
      fontFamily: 'Inter, sans-serif',
    },
    sidebar: {
      position: 'fixed' as const,
      left: 0,
      top: 0,
      width: '280px',
      height: '100vh',
      background: 'rgba(255, 255, 255, 0.1)',
      backdropFilter: 'blur(20px)',
      borderRight: '1px solid rgba(255, 255, 255, 0.18)',
      padding: '20px',
      zIndex: 1000,
      overflowY: 'auto' as const,
    },
    content: {
      marginLeft: '280px',
      padding: '20px',
      minHeight: '100vh',
    },
    card: {
      background: 'rgba(255, 255, 255, 0.1)',
      backdropFilter: 'blur(20px)',
      borderRadius: '20px',
      padding: '30px',
      margin: '20px 0',
      boxShadow: '0 8px 32px rgba(31, 38, 135, 0.37)',
      border: '1px solid rgba(255, 255, 255, 0.18)',
    },
    loginCard: {
      maxWidth: '400px',
      margin: '10vh auto',
      background: 'rgba(255, 255, 255, 0.1)',
      backdropFilter: 'blur(20px)',
      borderRadius: '20px',
      padding: '40px',
      boxShadow: '0 8px 32px rgba(31, 38, 135, 0.37)',
      border: '1px solid rgba(255, 255, 255, 0.18)',
      textAlign: 'center' as const,
    },
    title: {
      fontSize: '2rem',
      marginBottom: '30px',
      background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
      WebkitBackgroundClip: 'text',
      WebkitTextFillColor: 'transparent',
    },
    menuItem: {
      display: 'flex',
      alignItems: 'center',
      padding: '12px 16px',
      margin: '8px 0',
      borderRadius: '12px',
      cursor: 'pointer',
      transition: 'all 0.3s ease',
      color: 'rgba(255, 255, 255, 0.8)',
    },
    menuItemActive: {
      background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
      color: 'white',
      boxShadow: '0 4px 15px rgba(245, 87, 108, 0.3)',
    },
    input: {
      width: '100%',
      padding: '12px 16px',
      background: 'rgba(255, 255, 255, 0.1)',
      border: '1px solid rgba(255, 255, 255, 0.2)',
      borderRadius: '12px',
      color: 'white',
      fontSize: '16px',
      marginBottom: '16px',
      boxSizing: 'border-box' as const,
    },
    button: {
      background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
      border: 'none',
      borderRadius: '12px',
      padding: '12px 24px',
      color: 'white',
      fontWeight: '600',
      cursor: 'pointer',
      transition: 'all 0.3s ease',
      marginRight: '10px',
      marginBottom: '10px',
    },
    error: {
      background: 'rgba(255, 87, 87, 0.2)',
      border: '1px solid rgba(255, 87, 87, 0.3)',
      borderRadius: '12px',
      padding: '15px',
      color: '#ff5757',
      marginBottom: '20px',
    },
    success: {
      background: 'rgba(87, 255, 87, 0.2)',
      border: '1px solid rgba(87, 255, 87, 0.3)',
      borderRadius: '12px',
      padding: '15px',
      color: '#57ff57',
      marginBottom: '20px',
    },
    resultCard: {
      background: 'rgba(255, 255, 255, 0.05)',
      borderRadius: '15px',
      padding: '20px',
      marginTop: '20px',
    },
  };

  if (currentPage === 'login') {
    return (
      <div style={styles.container}>
        <div style={styles.loginCard}>
          <h1 style={styles.title}>üî• Wild Analytics</h1>
          
          {error && <div style={styles.error}>{error}</div>}
          {message && <div style={styles.success}>{message}</div>}

          <form onSubmit={handleLogin}>
            <input
              type="email"
              placeholder="üìß Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              style={styles.input}
              required
            />
            
            <input
              type="password"
              placeholder="üîë –ü–∞—Ä–æ–ª—å"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              style={styles.input}
              required
            />
            
            <button type="submit" disabled={loading} style={styles.button}>
              {loading ? '‚è≥ –í—Ö–æ–¥–∏–º...' : 'üöÄ –í–æ–π—Ç–∏'}
            </button>
          </form>

          <div style={{ marginTop: '20px', fontSize: '14px', color: 'rgba(255, 255, 255, 0.7)' }}>
            –¢–µ—Å—Ç: test@example.com / password123
          </div>
        </div>
      </div>
    );
  }

  const menuItems = [
    { id: 'dashboard', icon: 'üìä', label: 'Dashboard' },
    { id: 'products', icon: 'üîç', label: '–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤' },
    { id: 'brands', icon: 'üè∑Ô∏è', label: '–ê–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–æ–≤' },
    { id: 'categories', icon: 'üìÇ', label: '–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π' },
    { id: 'search', icon: 'üåê', label: '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫' },
    { id: 'seasonality', icon: '‚≠ê', label: '–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å' },
    { id: 'suppliers', icon: 'üè™', label: '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏' },
    { id: 'bloggers', icon: 'üë•', label: '–ü–æ–∏—Å–∫ –±–ª–æ–≥–µ—Ä–æ–≤' },
    { id: 'monitoring', icon: 'üì∫', label: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∫–ª–∞–º—ã' },
    { id: 'planning', icon: 'üìã', label: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' },
    { id: 'oracle', icon: 'üîÆ', label: 'Oracle –∑–∞–ø—Ä–æ—Å—ã' },
    { id: 'profile', icon: 'üë§', label: '–ü—Ä–æ—Ñ–∏–ª—å' },
  ];

  const renderContent = () => {
    switch (currentPage) {
      case 'dashboard':
        return (
          <div>
            <h1>üìä Dashboard</h1>
            <div style={styles.card}>
              <h3>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user?.name}!</h3>
              <div style={{display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '20px', marginTop: '20px'}}>
                <div style={styles.resultCard}>
                  <h4>üë§ –ü—Ä–æ—Ñ–∏–ª—å</h4>
                  <p><strong>Email:</strong> {user?.email}</p>
                  <p><strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> {user?.subscription_type}</p>
                </div>
                <div style={styles.resultCard}>
                  <h4>üí∞ –ë–∞–ª–∞–Ω—Å</h4>
                  <p style={{fontSize: '24px', color: '#f093fb'}}>{user?.balance}‚ÇΩ</p>
                </div>
                <div style={styles.resultCard}>
                  <h4>üéØ –°–∏—Å—Ç–µ–º–∞</h4>
                  <p>Backend –ø–æ–¥–∫–ª—é—á–µ–Ω</p>
                  <p>API —Ä–∞–±–æ—Ç–∞–µ—Ç</p>
                </div>
              </div>
            </div>
          </div>
        );

      case 'products':
        return (
          <div>
            <h1>üîç –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤</h1>
            <div style={styles.card}>
              <h3>–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é</h3>
              <input
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ WB –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 314308192)"
                value={productQuery}
                onChange={(e) => setProductQuery(e.target.value)}
                style={styles.input}
              />
              <button onClick={analyzeProduct} disabled={loading} style={styles.button}>
                {loading ? '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä'}
              </button>
              
              {analysisResult?.product && (
                <div style={styles.resultCard}>
                  <h4>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞:</h4>
                  <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {analysisResult.product.name}</p>
                  <p><strong>–¶–µ–Ω–∞:</strong> {analysisResult.product.price}‚ÇΩ</p>
                  <p><strong>–†–µ–π—Ç–∏–Ω–≥:</strong> {analysisResult.product.rating}‚≠ê</p>
                  <p><strong>–û—Ç–∑—ã–≤—ã:</strong> {analysisResult.product.reviews_count}</p>
                  <p><strong>–ë—Ä–µ–Ω–¥:</strong> {analysisResult.product.brand}</p>
                  <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> {analysisResult.product.category}</p>
                  {analysisResult.product.url && (
                    <a href={analysisResult.product.url} target="_blank" rel="noopener noreferrer" style={{color: '#f093fb'}}>
                      üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Wildberries
                    </a>
                  )}
                </div>
              )}
            </div>
          </div>
        );

      case 'categories':
        return (
          <div>
            <h1>üìÇ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</h1>
            <div style={styles.card}>
              <h3>–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
              <input
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã, –æ–¥–µ–∂–¥–∞, –æ–±—É–≤—å...)"
                value={categoryQuery}
                onChange={(e) => setCategoryQuery(e.target.value)}
                style={styles.input}
              />
              <button onClick={analyzeCategory} disabled={loading} style={styles.button}>
                {loading ? '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : 'üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'}
              </button>
              
              {analysisResult?.category_analysis && (
                <div style={styles.resultCard}>
                  <h4>üìà –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {analysisResult.category_analysis.category}</h4>
                  <p><strong>–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:</strong> {analysisResult.category_analysis.total_products}</p>
                  <p><strong>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</strong> {analysisResult.category_analysis.avg_price?.toFixed(2)}‚ÇΩ</p>
                  <p><strong>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</strong> {analysisResult.category_analysis.avg_rating?.toFixed(2)}‚≠ê</p>
                  
                  <h5>üîù –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</h5>
                  {analysisResult.category_analysis.products?.slice(0, 5).map((product: any, index: number) => (
                    <div key={index} style={{...styles.resultCard, margin: '10px 0'}}>
                      <p><strong>{product.name}</strong></p>
                      <p>üí∞ {product.price}‚ÇΩ | ‚≠ê {product.rating} | üè∑Ô∏è {product.brand}</p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        );

      case 'brands':
        return (
          <div>
            <h1>üè∑Ô∏è –ê–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–æ–≤</h1>
            <div style={styles.card}>
              <h3>–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞</h3>
              <input
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (Apple, Samsung, Nike...)"
                value={brandQuery}
                onChange={(e) => setBrandQuery(e.target.value)}
                style={styles.input}
              />
              <button onClick={analyzeBrand} disabled={loading} style={styles.button}>
                {loading ? '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : 'üè∑Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–µ–Ω–¥'}
              </button>
              
              {analysisResult?.brand_analysis && (
                <div style={styles.resultCard}>
                  <h4>üè∑Ô∏è –ê–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–∞: {analysisResult.brand_analysis.brand}</h4>
                  <p><strong>–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:</strong> {analysisResult.brand_analysis.products_count}</p>
                  <p><strong>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</strong> {analysisResult.brand_analysis.avg_price?.toFixed(2)}‚ÇΩ</p>
                  <p><strong>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</strong> {analysisResult.brand_analysis.avg_rating?.toFixed(2)}‚≠ê</p>
                  
                  <h5>üîù –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞:</h5>
                  {analysisResult.brand_analysis.products?.slice(0, 5).map((product: any, index: number) => (
                    <div key={index} style={{...styles.resultCard, margin: '10px 0'}}>
                      <p><strong>{product.name}</strong></p>
                      <p>üí∞ {product.price}‚ÇΩ | ‚≠ê {product.rating} | üí¨ {product.reviews} –æ—Ç–∑—ã–≤–æ–≤</p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        );

      case 'search':
        return (
          <div>
            <h1>üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫</h1>
            <div style={styles.card}>
              <h3>–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—Å–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É</h3>
              <input
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (iPhone, –∫—Ä–æ—Å—Å–æ–≤–∫–∏, –ø–ª–∞—Ç—å–µ...)"
                value={globalQuery}
                onChange={(e) => setGlobalQuery(e.target.value)}
                style={styles.input}
              />
              <button onClick={globalSearch} disabled={loading} style={styles.button}>
                {loading ? '‚è≥ –ò—â–µ–º...' : 'üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã'}
              </button>
              
              {analysisResult?.results && (
                <div style={styles.resultCard}>
                  <h4>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {analysisResult.query || globalQuery}</h4>
                  <p><strong>–ù–∞–π–¥–µ–Ω–æ:</strong> {analysisResult.total || analysisResult.results.length} —Ç–æ–≤–∞—Ä–æ–≤</p>
                  
                  {analysisResult.results.slice(0, 10).map((item: any, index: number) => (
                    <div key={index} style={{...styles.resultCard, margin: '10px 0'}}>
                      <p><strong>{item.title}</strong></p>
                      <p>üí∞ {item.price}‚ÇΩ | ‚≠ê {item.rating} | üè∑Ô∏è {item.brand} | üìÇ {item.category}</p>
                      {item.url && (
                        <a href={item.url} target="_blank" rel="noopener noreferrer" style={{color: '#f093fb'}}>
                          üîó –û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä
                        </a>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        );

      default:
        return (
          <div>
            <h1>{menuItems.find(item => item.id === currentPage)?.icon} {menuItems.find(item => item.id === currentPage)?.label}</h1>
            <div style={styles.card}>
              <h3>üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h3>
              <p>–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!</p>
              <p><strong>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</strong></p>
              <ul style={{textAlign: 'left'}}>
                <li>üîç <strong>–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤</strong> - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Wildberries API</li>
                <li>üè∑Ô∏è <strong>–ê–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–æ–≤</strong> - –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞</li>
                <li>üìÇ <strong>–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</strong> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</li>
                <li>üåê <strong>–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫</strong> - –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É WB</li>
              </ul>
              
              <div style={{marginTop: '30px', padding: '20px', background: 'rgba(255, 255, 255, 0.05)', borderRadius: '12px'}}>
                <h4>üß™ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–±–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</h4>
                <button onClick={() => setCurrentPage('products')} style={styles.button}>
                  üîç –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
                </button>
                <button onClick={() => setCurrentPage('brands')} style={styles.button}>
                  üè∑Ô∏è –ê–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–æ–≤  
                </button>
                <button onClick={() => setCurrentPage('categories')} style={styles.button}>
                  üìÇ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                </button>
                <button onClick={() => setCurrentPage('search')} style={styles.button}>
                  üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
                </button>
              </div>
            </div>
          </div>
        );
    }
  };

  return (
    <div style={styles.container}>
      {/* Sidebar */}
      <div style={styles.sidebar}>
        <h2 style={styles.title}>üî• Wild Analytics</h2>
        
        {menuItems.map((item) => (
          <div
            key={item.id}
            style={{
              ...styles.menuItem,
              ...(currentPage === item.id ? styles.menuItemActive : {}),
            }}
            onClick={() => setCurrentPage(item.id)}
          >
            <span style={{ marginRight: '12px', fontSize: '18px' }}>{item.icon}</span>
            {item.label}
          </div>
        ))}
        
        <div style={{ marginTop: '40px', padding: '20px 0', borderTop: '1px solid rgba(255, 255, 255, 0.1)' }}>
          <button onClick={handleLogout} style={{...styles.button, width: '100%'}}>
            üö™ –í—ã–π—Ç–∏
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div style={styles.content}>
        {error && <div style={styles.error}>{error}</div>}
        {message && <div style={styles.success}>{message}</div>}
        
        {renderContent()}
      </div>
    </div>
  );
};

export default App;
EOF

log "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ frontend —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏..."
docker rmi wild-frontend 2>/dev/null || true
docker build --no-cache -t wild-frontend ./wild-analytics-web

if [ $? -eq 0 ]; then
    log "‚úÖ Frontend —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–æ–±—Ä–∞–Ω!"
    
    log "üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ frontend..."
    docker run -d --name wild-frontend -p 3000:3000 wild-frontend
    
    log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (30 —Å–µ–∫)..."
    sleep 30
    
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    
    log "üìã –õ–æ–≥–∏ frontend..."
    docker logs wild-frontend --tail 10
    
    log "‚úÖ TYPESCRIPT –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!"
    log ""
    log "üéØ –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:"
    log "   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ query?: string –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å AnalysisResult"
    log "   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ total?: number –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å AnalysisResult"
    log "   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ globalQuery"
    log "   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    log "   ‚úÖ –£–ª—É—á—à–µ–Ω –¥–∏–∑–∞–π–Ω –∏ UX"
    log ""
    log "üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://93.127.214.183:3000"
    log "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞!"
    
else
    log "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ frontend"
    docker logs $(docker ps -lq) 2>/dev/null || echo "–ù–µ—Ç –ª–æ–≥–æ–≤"
fi

log "üìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–°..."
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 