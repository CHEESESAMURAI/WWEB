import re
import os
import json
import sqlite3
import asyncio
import requests
from datetime import date, datetime, timedelta

# aiogram v3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.client.bot import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatAction

# Selenium + webdriver_manager
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException

###############################################################################
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏

BOT_TOKEN = "7774315895:AAFVVUfSBOw3t7WjGTM6KHFK160TveSGheA"
SERPER_API_KEY = "8ba851ed7ae1e6a655102bea15d73fdb39cdac79"  # –∫–ª—é—á –¥–ª—è serper.dev

ADMIN_ID = 1659228199  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

WELCOME_MESSAGE = (
    "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WHITESAMURAI!*\n\n"
    "–ú—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ "
    "–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É üìä.\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
)

###############################################################################
# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown

def escape_markdown(text: str) -> str:
    if not text:
        return ""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

###############################################################################
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite) ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –±–∞–ª–∞–Ω—Å, –ø–æ–¥–ø–∏—Å–∫–∞, –∞—Ä—Ç–∏–∫—É–ª—ã

def extract_site(block: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "–°–∞–π—Ç: ‚Ä¶" –≤ –±–ª–æ–∫–µ.
    –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ".
    """
    m = re.search(r'–°–∞–π—Ç:\s*([^\n]+)', block, re.IGNORECASE)
    if m:
        site = m.group(1).strip()
        # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        return site.replace('\\', '')
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def compute_additional_metrics(likes: int,
                               views: int,
                               approx_clients: int,
                               revenue: float,
                               growth_percent: float,
                               price: float = 500.0) -> dict:
    """
    –°—á–∏—Ç–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
      1) –†–µ–π—Ç–∏–Ω–≥ –±–ª–æ–≥–µ—Ä–∞ (–æ—Ç 1 –¥–æ 5) –Ω–∞ –æ—Å–Ω–æ–≤–µ likes, revenue, growth_percent.
      2) –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 3 –¥–Ω—è (27% –æ—Ç —Å—É–º–º—ã –ª–∞–π–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤).
      3) –ü—Ä–∏—Ä–æ—Å—Ç –≤ —Ä—É–±–ª—è—Ö = (–ø—Ä–∏—Ä–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 3 –¥–Ω—è) * (—Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞).
      4) –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ = —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞.
      5) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ = (approx_clients + 1).

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      likes: —á–∏—Å–ª–æ –ª–∞–π–∫–æ–≤ (–∏–∑ snippet).
      views: —á–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–∏–∑ snippet).
      approx_clients: ¬´–ø—Ä–∏–º–µ—Ä–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤¬ª (–∏–∑ estimate_impact).
      revenue: –ø—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ (–∏–∑ estimate_impact).
      growth_percent: —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–∏–∑ estimate_impact).
      price: —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –Ω–µ –∏–∑ snippet, –∑–∞–¥–∞—ë–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 500).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏:
      - rating (int) ‚Äì —Ä–µ–π—Ç–∏–Ω–≥ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç 1 –¥–æ 5.
      - three_day_orders (int) ‚Äì –ø—Ä–∏—Ä–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 3 –¥–Ω—è.
      - three_day_growth_rub (float) ‚Äì –ø—Ä–∏—Ä–æ—Å—Ç –≤ —Ä—É–±–ª—è—Ö.
      - avg_check (float) ‚Äì —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫.
      - total_orders (int) ‚Äì –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤.
    """

    # (1) –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –±–ª–æ–≥–µ—Ä–∞ (–æ—Ç 1 –¥–æ 5).
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–µ–∫–∏–π ¬´–±–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä¬ª –∏–∑ likes, revenue, growth_percent.
    # –ó–∞—Ç–µ–º –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–∫–æ—Ä –≤ —Ä–µ–π—Ç–∏–Ω–≥ 1..5.
    base_score = (likes * 0.1) + (revenue * 0.01) + growth_percent
    # –û–≥—Ä–∞–Ω–∏—á–∏–º –±–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä –º–∞–∫—Å–∏–º—É–º 100
    if base_score > 100:
        base_score = 100

    if base_score < 20:
        rating = 1
    elif base_score < 40:
        rating = 2
    elif base_score < 60:
        rating = 3
    elif base_score < 80:
        rating = 4
    else:
        rating = 5

    # (2) –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 3 –¥–Ω—è: 27% –æ—Ç (likes + views).
    three_day_orders = int(0.27 * (likes + views))

    # (3) –ü—Ä–∏—Ä–æ—Å—Ç –≤ —Ä—É–±–ª—è—Ö = (–ø—Ä–∏—Ä–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 3 –¥–Ω—è) * (—Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞).
    three_day_growth_rub = three_day_orders * price

    # (4) –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ = —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞.
    avg_check = price

    # (5) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ = (approx_clients + 1).
    total_orders = approx_clients + 1

    return {
        "rating": rating,
        "three_day_orders": three_day_orders,
        "three_day_growth_rub": three_day_growth_rub,
        "avg_check": avg_check,
        "total_orders": total_orders
    }


def format_site_results_from_items(items: list) -> str:
    lines = []
    for item in items:
        title = item.get("title", "–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        link = item.get("link", "")
        snippet = item.get("snippet", "")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∞–π–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
        likes, views = extract_likes_views(snippet)

        # –°—á–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, –≤—ã—Ä—É—á–∫—É –∏ —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂
        approx_clients, approx_revenue, growth = estimate_impact(likes, views)

        # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã, –æ—Å—Ç–∞–≤–∏–º 500 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # –ò–ª–∏ –∂–µ, –µ—Å–ª–∏ item —Å–æ–¥–µ—Ä–∂–∏—Ç price, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ:
        price = 500.0

        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é:
        metrics = compute_additional_metrics(
            likes=likes,
            views=views,
            approx_clients=approx_clients,
            revenue=approx_revenue,
            growth_percent=growth,
            price=price
        )
        rating = metrics["rating"]
        three_day_orders = metrics["three_day_orders"]
        three_day_growth_rub = metrics["three_day_growth_rub"]
        avg_check = metrics["avg_check"]
        total_orders = metrics["total_orders"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        clickable_title = f"[{escape_markdown(title)}]({link})" if link else escape_markdown(title)

        # –î–æ–º–µ–Ω —Å–∞–π—Ç–∞ (–∏–ª–∏ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        domain = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if link:
            domain = re.sub(r'^https?://(www\.)?', '', link).split('/')[0]

        result_text = (
            f"{clickable_title}\n"
            f"üåê –°–∞–π—Ç: {domain}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –±–ª–æ–≥–µ—Ä–∞: {rating}\n"
            f"üìà –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 3 –¥–Ω—è: {three_day_orders} —à—Ç ({(three_day_orders*100)//(likes+views+1)}%)\n"
            f"üí∞ –ü—Ä–∏—Ä–æ—Å—Ç –≤ —Ä—É–±–ª—è—Ö: {int(three_day_growth_rub)}‚ÇΩ\n"
            f"üì¶ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {int(avg_check)}‚ÇΩ\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders} —à—Ç\n"
            f"‚Äî\n"
            f"üëç –õ–∞–π–∫–∏: {likes}, üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}\n"
            f"üë• –ü—Ä–∏–º–µ—Ä–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {approx_clients}, –í—ã—Ä—É—á–∫–∞ ~ {int(approx_revenue)}‚ÇΩ\n"
            f"üìà –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ ~ {growth:.1f}%"
        )
        lines.append(result_text)

    return "\n\n".join(lines)


def format_site_results(text: str) -> str:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞) –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–∫–∞–º.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∞–π–∫–∞—Ö/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö,
    –∏–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞, –ª–∞–π–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–∫–∞–∫ proxy –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤),
    —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, –≤—ã—Ä—É—á–∫—É –∏ —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂,
    –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    blocks = [b.strip() for b in re.split(r'\n\s*\n', text) if b.strip()]
    lines = []
    for block in blocks:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–ª–æ–∫–∏, –≥–¥–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ª–∞–π–∫–∞–º/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
        if re.search(r'likes|comments|–ª–∞–π–∫–∏|–∫–æ–º–º–µ–Ω—Ç–∞—Ä', block, re.IGNORECASE):
            site = extract_site(block)
            likes, views = extract_likes_views(block)
            # –ï—Å–ª–∏ –∏ –ª–∞–π–∫–∏, –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Ä–∞–≤–Ω—ã –Ω—É–ª—é, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
            clients, revenue, growth = estimate_impact(likes, views)
            block_text = (
                f"üåê –°–∞–π—Ç: {site}\n"
                f"üëç –õ–∞–π–∫–∏: {likes}, üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}\n"
                f"üë• –ü—Ä–∏–º–µ—Ä–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {clients}, –í—ã—Ä—É—á–∫–∞ ~ {revenue}‚ÇΩ\n"
                f"üìà –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ ~ {growth:.1f}%"
            )
            lines.append(block_text)
    return "\n\n".join(lines)

def init_db():
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    cur.execute('''
        CREATE TABLE IF NOT EXISTS tracked_articles (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            article TEXT
        )
    ''')
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (balance, subscription_until)
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance REAL DEFAULT 0,
            subscription_until TEXT DEFAULT NULL
        )
    ''')
    conn.commit()
    conn.close()

def get_user_info(user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (balance, subscription_until).
    –î–ª—è ADMIN_ID –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (777777, None).
    """
    if user_id == ADMIN_ID:
        return 777777, None

    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("SELECT balance, subscription_until FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    if not row:
        cur.execute("INSERT INTO users (user_id, balance, subscription_until) VALUES (?, ?, ?)",
                    (user_id, 0, None))
        conn.commit()
        balance = 0
        subscription_until = None
    else:
        balance, subscription_until = row
    conn.close()
    return balance, subscription_until

def update_user_balance(user_id, new_balance):
    if user_id == ADMIN_ID:
        return
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, user_id))
    conn.commit()
    conn.close()

def update_user_subscription(user_id, new_date_str):
    if user_id == ADMIN_ID:
        return
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("UPDATE users SET subscription_until = ? WHERE user_id = ?", (new_date_str, user_id))
    conn.commit()
    conn.close()

def user_has_subscription(user_id):
    if user_id == ADMIN_ID:
        return True
    balance, sub_until_str = get_user_info(user_id)
    if not sub_until_str:
        return False
    try:
        sub_until = datetime.strptime(sub_until_str, "%Y-%m-%d").date()
        return sub_until >= date.today()
    except:
        return False

def add_article(user_id, article):
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM tracked_articles WHERE user_id = ? AND article = ?", (user_id, article))
    if cur.fetchone() is None:
        cur.execute("INSERT INTO tracked_articles (user_id, article) VALUES (?, ?)", (user_id, article))
        conn.commit()
        conn.close()
        return True
    else:
        conn.close()
        return False

def remove_article(user_id, article):
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("DELETE FROM tracked_articles WHERE user_id = ? AND article = ?", (user_id, article))
    conn.commit()
    conn.close()

def list_articles(user_id):
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("SELECT article FROM tracked_articles WHERE user_id = ?", (user_id,))
    rows = cur.fetchall()
    conn.close()
    return [row[0] for row in rows]

###############################################################################
# –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö (sales_history.json)

def load_sales_history():
    return {}

def update_sales_history(article, sales_today):
    return []

def compute_sales_trend(article_history):
    return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

###############################################################################
# –ü–∞—Ä—Å–∏–Ω–≥ Wildberries –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_extended_sales_data(driver):
    extended_sales = {"sale_month": 0, "sale_week": 0}
    try:
        button = driver.find_element(By.XPATH, "//*[contains(text(), '–ü–æ–¥—Ä–æ–±–Ω–µ–µ')]")
        driver.execute_script("arguments[0].click();", button)
        WebDriverWait(driver, 5).until(
            lambda d: button not in d.find_elements(By.XPATH, "//*[contains(text(), '–ü–æ–¥—Ä–æ–±–Ω–µ–µ')]")
        )
    except:
        pass

    try:
        month_elements = driver.find_elements(By.XPATH, "//*[contains(text(), '–∑–∞ –º–µ—Å—è—Ü') or contains(text(), '30 –¥–Ω–µ–π')]")
        for element in month_elements:
            text = element.text
            match = re.search(r'(\d+)', text)
            if match:
                extended_sales["sale_month"] = int(match.group(1))
                break
    except:
        pass

    try:
        week_elements = driver.find_elements(By.XPATH, "//*[contains(text(), '–∑–∞ 7 –¥–Ω–µ–π') or contains(text(), '–Ω–µ–¥–µ–ª—è')]")
        for element in week_elements:
            text = element.text
            match = re.search(r'(\d+)', text)
            if match:
                extended_sales["sale_week"] = int(match.group(1))
                break
    except:
        pass
    return extended_sales

def try_find_price_by_selectors(driver, selectors):
    for sel_type, sel_value in selectors:
        try:
            element = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((sel_type, sel_value))
            )
            text = element.text.strip()
            if text:
                print(f"DEBUG: –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –ø–æ {sel_type}={sel_value}: {text}")
                return text
        except Exception as e:
            print(f"DEBUG: –ù–µ –Ω–∞—à–ª–∏ {sel_type}={sel_value}:", e)
    return None

def get_product_page_data(driver):
    data = {}
    try:
        title_element = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, "product-page__header"))
        )
        data["title"] = title_element.text.strip()
    except:
        data["title"] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"

    price_selectors = [
        (By.CLASS_NAME, "price-block__final-price"),
        (By.XPATH, "//span[contains(@class, 'price-block__final-price')]"),
        (By.CLASS_NAME, "price-block__accent-price"),
        (By.XPATH, "//span[contains(@class, 'price-block__accent-price')]"),
    ]
    price_text = try_find_price_by_selectors(driver, price_selectors)
    if price_text:
        clean = price_text.replace(" ", "").replace("\n", "")
        clean = re.sub(r"[‚Çæ‚ÇΩ‚Ç¥‚Ç∏]", "", clean)
        clean = clean.replace(",", ".")
        try:
            data["price"] = int(float(clean))
        except:
            data["price"] = 0
    else:
        data["price"] = 0

    try:
        reviews_element = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.CLASS_NAME, "product-review__count-review"))
        )
        data["reviews"] = reviews_element.text.strip()
    except:
        data["reviews"] = "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"

    data.update(get_extended_sales_data(driver))
    return data

def get_api_data(article, price, commission=0.15):
    api_url = f"https://card.wb.ru/cards/v1/detail?appType=1&curr=rub&dest=-1257786&spp=0&nm={article}"
    sales_info = {"sales_today": 0, "revenue_today": 0, "profit_today": 0}
    try:
        resp = requests.get(api_url, headers={"User-Agent": "Mozilla/5.0"})
        if resp.status_code == 200:
            data_api = resp.json()
            products = data_api.get("data", {}).get("products", [])
            if products:
                product_data = products[0]
                sales_today = product_data.get("sale", 0)
                sales_info["sales_today"] = sales_today
                revenue_today = sales_today * price
                profit_today = revenue_today * (1 - commission)
                sales_info["revenue_today"] = revenue_today
                sales_info["profit_today"] = profit_today
    except:
        pass
    return sales_info

def get_wb_product_info(article):
    url = f"https://www.wildberries.ru/catalog/{article}/detail.aspx"
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-gpu")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                         "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36")

    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)

    try:
        driver.get(url)
        page_data = get_product_page_data(driver)
    except:
        page_data = {"title": "–û—à–∏–±–∫–∞", "price": 0, "reviews": "–ù–µ—Ç"}
    finally:
        driver.quit()

    api_data = get_api_data(article, page_data.get("price", 0))
    daily_sales = api_data.get("sales_today", 0)

    factor_week = 0.8
    factor_month = 0.7
    parsed_week = page_data.get("sale_week", 0)
    parsed_month = page_data.get("sale_month", 0)

    if parsed_week == 0:
        estimated_week = int(daily_sales * 7 * factor_week)
    else:
        estimated_week = parsed_week

    if parsed_month == 0:
        estimated_month = int(daily_sales * 30 * factor_month)
    else:
        estimated_month = parsed_month

    price = page_data.get("price", 0)
    estimated_week_revenue = estimated_week * price
    estimated_month_revenue = estimated_month * price
    commission = 0.15
    estimated_week_profit = estimated_week_revenue * (1 - commission)
    estimated_month_profit = estimated_month_revenue * (1 - commission)

    article_history = update_sales_history(article, daily_sales)
    sales_trend = compute_sales_trend(article_history)

    result = {
        "–ù–∞–∑–≤–∞–Ω–∏–µ": page_data.get("title", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
        "–¶–µ–Ω–∞": f'{price} ‚ÇΩ',
        "–û—Ç–∑—ã–≤—ã": page_data.get("reviews", "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"),
        "–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏": daily_sales,
        "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é": estimated_week,
        "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü": estimated_month,
        "–í—ã—Ä—É—á–∫–∞ –∑–∞ —Å—É—Ç–∫–∏": f'{api_data.get("revenue_today", 0)} ‚ÇΩ',
        "–ü—Ä–∏–±—ã–ª—å –∑–∞ —Å—É—Ç–∫–∏": f'{api_data.get("profit_today", 0):.0f} ‚ÇΩ',
        "–í—ã—Ä—É—á–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)": f'{estimated_week_revenue} ‚ÇΩ',
        "–ü—Ä–∏–±—ã–ª—å –∑–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)": f'{estimated_week_profit:.0f} ‚ÇΩ',
        "–í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)": f'{estimated_month_revenue} ‚ÇΩ',
        "–ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)": f'{estimated_month_profit:.0f} ‚ÇΩ',
        "–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ (–ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–Ω—é)": sales_trend
    }
    return result

def format_sales_info(data):
    def esc(t):
        return escape_markdown(t)

    title = esc(data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'))
    price = esc(data.get('–¶–µ–Ω–∞', '0 ‚ÇΩ'))
    reviews = esc(data.get('–û—Ç–∑—ã–≤—ã', '–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤'))

    s_day = str(data.get('–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏', 0))
    s_week_est = str(data.get('–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é', 0))
    s_month_est = str(data.get('–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü', 0))

    rev_day = esc(data.get('–í—ã—Ä—É—á–∫–∞ –∑–∞ —Å—É—Ç–∫–∏', '0 ‚ÇΩ'))
    rev_week_est = esc(data.get('–í—ã—Ä—É—á–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)', '0 ‚ÇΩ'))
    rev_month_est = esc(data.get('–í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)', '0 ‚ÇΩ'))

    profit_day = esc(data.get('–ü—Ä–∏–±—ã–ª—å –∑–∞ —Å—É—Ç–∫–∏', '0 ‚ÇΩ'))
    profit_week_est = esc(data.get('–ü—Ä–∏–±—ã–ª—å –∑–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)', '0 ‚ÇΩ'))
    profit_month_est = esc(data.get('–ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)', '0 ‚ÇΩ'))

    trend = esc(data.get('–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ (–ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–Ω—é)', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'))

    text = (
        f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {title}\n"
        f"*–¶–µ–Ω–∞:* {price}\n"
        f"*–û—Ç–∑—ã–≤—ã:* {reviews}\n\n"
        f"*–ü—Ä–æ–¥–∞–∂–∏:*\n"
        f"  ‚Ä¢ –ó–∞ —Å—É—Ç–∫–∏: {s_day}\n"
        f"  ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {s_week_est}\n"
        f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {s_month_est}\n\n"
        f"*–í—ã—Ä—É—á–∫–∞:*\n"
        f"  ‚Ä¢ –ó–∞ —Å—É—Ç–∫–∏: {rev_day}\n"
        f"  ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {rev_week_est}\n"
        f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {rev_month_est}\n\n"
        f"*–ü—Ä–∏–±—ã–ª—å:*\n"
        f"  ‚Ä¢ –ó–∞ —Å—É—Ç–∫–∏: {profit_day}\n"
        f"  ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {profit_week_est}\n"
        f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {profit_month_est}\n\n"
        f"*–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ (–ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–Ω—é):* {trend}\n"
    )
    return text

###############################################################################
# –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ Serper.dev —Å –ª–∞–π–∫–∞–º–∏/–ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

import re

def extract_likes_views(block: str):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –±–ª–æ–∫–∞ (–æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏) –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–∫–∞–∫ proxy –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤).
    –°–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç —à–∞–±–ª–æ–Ω "X likes, Y comments". –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (X, Y),
    –∏–Ω–∞—á–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–∫–∞—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏.
    """
    block_lower = block.lower()
    matches = re.findall(r'(\d+)\s*likes,\s*(\d+)\s*comments', block_lower)
    if matches:
        try:
            return int(matches[0][0]), int(matches[0][1])
        except ValueError:
            pass
    m_likes = re.search(r'(\d+)\s*likes', block_lower)
    m_views = re.search(r'(\d+)\s*comments', block_lower)
    likes = int(m_likes.group(1)) if m_likes else 0
    views = int(m_views.group(1)) if m_views else 0
    return likes, views


def process_text(text: str):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞) –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–∫–∞–º
    –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ "likes" –∏–ª–∏ "comments" (–∏–ª–∏ –∏—Ö —Ä—É—Å—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏),
    –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (likes, views) —Å –ø–æ–º–æ—â—å—é extract_likes_views.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π.
    """
    blocks = [b.strip() for b in re.split(r'\n\s*\n', text) if b.strip()]
    results = []
    for block in blocks:
        if re.search(r'likes|comments|–ª–∞–π–∫–∏|–∫–æ–º–º–µ–Ω—Ç–∞—Ä', block, re.IGNORECASE):
            results.append(extract_likes_views(block))
        else:
            results.append((0, 0))
    return results


def format_results_message(results):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π (likes, views).
    –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    "–ë–ª–æ–∫ 2: –õ–∞–π–∫–∏: 110, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã): 8"
    """
    lines = []
    for idx, (likes, views) in enumerate(results, start=1):
        lines.append(f"–ë–ª–æ–∫ {idx}: –õ–∞–π–∫–∏: {likes}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã): {views}")
    return "\n".join(lines)







def estimate_impact(likes, views):
    # –ï—Å–ª–∏ –ª–∞–π–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–µ—Ç, –∑–∞–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    if likes == 0 and views == 0:
        likes = 10
        views = 100
    approx_clients = int(likes * 0.1 + views * 0.05)
    avg_check = 500  # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    approx_revenue = approx_clients * avg_check
    baseline = 10000
    growth_percent = (approx_revenue / baseline) * 100 if baseline else 0
    return approx_clients, approx_revenue, growth_percent


def global_search_serper_detailed(query: str):
    url = "https://google.serper.dev/search"
    payload = {"q": query, "gl": "ru", "hl": "ru"}
    headers = {
        "X-API-KEY": SERPER_API_KEY,
        "Content-Type": "application/json"
    }
    resp = requests.post(url, headers=headers, json=payload)
    if resp.status_code != 200:
        return {"error": f"–û—à–∏–±–∫–∞ serper.dev: {resp.status_code}", "results": []}
    data = resp.json()
    organic = data.get("organic", [])

    # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
    allowed_domains = ["vk.com", "instagram.com", "t.me", "facebook.com", "twitter.com", "x.com"]
    filtered_results = []
    for item in organic:
        link = item.get("link", "")
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Å—ã–ª–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å wildberries
        if "wildberries" in link.lower():
            continue
        domain = re.sub(r'^https?://(www\.)?', '', link).split('/')[0].lower()
        if any(allowed_domain in domain for allowed_domain in allowed_domains):
            filtered_results.append(item)
    if not filtered_results:
        return {
            "error": (
                "–ú—ã –ø—Ä–æ–≤–µ–ª–∏ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º —Å–µ—Ç—è–º: VK, Instagram, Telegram, Facebook, X –∏ Twitter. "
                "–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª—É—á–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ü–µ–ª—è—Ö. "
                "–≠—Ç–æ –º–æ–∂–µ—Ç —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ–≤–∞—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏, –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π, "
                "—á—Ç–æ –∑–∞—á–∞—Å—Ç—É—é —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫–æ–º –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å–ø—Ä–æ—Å–∞."
            ),
            "results": []
        }
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    return {"error": None, "results": filtered_results}

    out = {"error": None, "results": []}

    for item in filtered_results:
        title = item.get("title", "–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        link = item.get("link", "")
        snippet = item.get("snippet", "")

        # –ü—Ä–∏–º–µ—Ä: –ø–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–∏/–ø—Ä–æ—Å–º–æ—Ç—Ä—ã
        likes, views = parse_likes_and_views(snippet)

        # –î–æ–ø—É—Å—Ç–∏–º, –º—ã —Ö–æ—Ç–∏–º —Ä–µ–π—Ç–∏–Ω–≥ –±–ª–æ–≥–µ—Ä–∞ (–ø–æ–∫–∞ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É):
        blogger_rating = 10  # –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–∫–∏—Ö-—Ç–æ –¥–∞–Ω–Ω—ã—Ö

        # –î–æ–ø—É—Å—Ç–∏–º, —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 3 –¥–Ω—è:
        # –º–æ–∂–Ω–æ –≤–∑—è—Ç—å growth_percent, –∫–æ—Ç–æ—Ä—ã–π —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å, –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
        # –∏–ª–∏ –∑–∞–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ª–æ–≥–∏–∫—É (–∑–∞–≥–ª—É—à–∫–∞ 150%):
        three_day_growth_percent = 150

        # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç –≤ —Ä—É–±–ª—è—Ö (–∑–∞–≥–ª—É—à–∫–∞):
        three_day_growth_rub = 1000

        # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (–º–æ–∂–Ω–æ –≤–∑—è—Ç—å avg_check, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ estimate_impact)
        avg_check = 500

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, —à—Ç (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
        orders_qty = 50

        # –ò–ª–∏ –±–µ—Ä–µ–º –Ω–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã/–≤—ã—Ä—É—á–∫—É –∏–∑ estimate_impact:
        approx_clients, approx_revenue, growth = estimate_impact(likes, views)

        out["results"].append({
            "title": title,
            "link": link,
            "snippet": snippet,
            "rating": blogger_rating,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "three_day_growth_percent": three_day_growth_percent,
            "three_day_growth_rub": three_day_growth_rub,
            "avg_check": avg_check,
            "orders_qty": orders_qty,
            # –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è
            "likes": likes,
            "views": views,
            "approx_clients": approx_clients,
            "approx_revenue": approx_revenue,
            "growth_percent": growth
        })
    return out

def format_serper_results_detailed(search_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if search_data["error"]:
        return search_data["error"]
    out_text = ""
    for r in search_data["results"]:
        title_md = escape_markdown(r.get("title", "–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞"))
        link_md = escape_markdown(r.get("link", ""))
        snippet_md = escape_markdown(r.get("snippet", ""))
        # –ï—Å–ª–∏ –∫–ª—é—á 'site' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ —Å—Å—ã–ª–∫–∏
        site_val = r.get("site")
        if not site_val:
            site_val = re.sub(r'^https?://(www\.)?', '', r.get("link", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")).split('/')[0]
        site_md = escape_markdown(site_val)
        likes = r.get("likes", 0)
        views = r.get("views", 0)
        clients = r.get("approx_clients", 0)
        revenue = r.get("approx_revenue", 0)
        growth = r.get("growth_percent", 0)
        out_text += (
            f"üîó [{title_md}]({link_md})\n"
            f"üåê –°–∞–π—Ç: {site_md}\n"
            f"üí¨ {snippet_md}\n"
            f"üëç –õ–∞–π–∫–∏: {likes}, üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}\n"
            f"üë• –ü—Ä–∏–º–µ—Ä–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {clients}, –í—ã—Ä—É—á–∫–∞ ~ {revenue}‚ÇΩ\n"
            f"üìà –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ ~ {growth:.1f}%\n\n"
        )
    return out_text.strip()
###############################################################################
# Telegram-–±–æ—Ç

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()

def back_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    return kb

def main_menu_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª", callback_data="menu_add")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª", callback_data="menu_remove")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤", callback_data="menu_list")],
        [InlineKeyboardButton(text="üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data="menu_daily")],
        [InlineKeyboardButton(text="üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="menu_global")],
        [InlineKeyboardButton(text="üíº –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="menu_cabinet")],
        [InlineKeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑", callback_data="analysis")]
    ])
    return kb

def analysis_menu_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –ê—Ä—Ç–∏–∫—É–ª–∞", callback_data="analysis_article")],
        [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –ë—Ä–µ–Ω–¥–∞", callback_data="analysis_brand")],
        [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞", callback_data="analysis_supplier")],
        [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="analysis_category")],
        [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫", callback_data="analysis_characteristics")],
        [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –¢–æ–ø–∞ –ø–æ–∏—Å–∫–∞", callback_data="analysis_top_search")],
        [InlineKeyboardButton(text="–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –ê—Ä—Ç–∏–∫—É–ª–∞", callback_data="analysis_frequency")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    return kb

pending_action = {}

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(WELCOME_MESSAGE, reply_markup=main_menu_kb())

@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data

    if data == "back":
        await callback.message.edit_text(WELCOME_MESSAGE, reply_markup=main_menu_kb())

    elif data == "menu_cabinet":
        balance, sub_until_str = get_user_info(user_id)
        sub_info = f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {sub_until_str}" if sub_until_str else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        text = (
            f"üíº *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
            f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞: {sub_info}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up")],
            [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]))

    elif data == "top_up":
        pending_action[user_id] = {"action": "top_up_screenshot"}
        await callback.message.edit_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã (–°–ë–ü –∏ —Ç.–¥.). –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω.",
            reply_markup=back_kb()
        )

    elif data == "subscribe":
        cost = 500
        balance, sub_until_str = get_user_info(user_id)
        if balance >= cost:
            new_balance = balance - cost
            update_user_balance(user_id, new_balance)
            new_sub_date = (date.today() + timedelta(days=30)).strftime("%Y-%m-%d")
            update_user_subscription(user_id, new_sub_date)
            await callback.message.edit_text(
                f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –¥–æ {new_sub_date}!\n–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å—á—ë—Ç–µ: {new_balance:.2f} ‚ÇΩ",
                reply_markup=back_kb()
            )
        else:
            await callback.message.edit_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {cost} ‚ÇΩ. –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ",
                reply_markup=back_kb()
            )

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, —Å–ø–∏—Å–æ–∫, –æ—Ç—á—ë—Ç, –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫)
    elif data in ["menu_add", "menu_remove", "menu_list", "menu_daily", "menu_global"]:
        if not user_has_subscription(user_id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏! –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.")
            return

        if data == "menu_add":
            pending_action[user_id] = {"action": "add"}
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=back_kb())

        elif data == "menu_remove":
            pending_action[user_id] = {"action": "remove"}
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=back_kb())

        elif data == "menu_list":
            articles = list_articles(user_id)
            if articles:
                text = "üìã *–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã:*\n" + "\n".join(escape_markdown(a) for a in articles)
            else:
                text = "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤."
            await callback.message.edit_text(text, reply_markup=back_kb())

        elif data == "menu_daily":
            await callback.message.edit_text("‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            await bot.send_chat_action(callback.message.chat.id, action=ChatAction.TYPING)
            articles = list_articles(user_id)
            if not articles:
                text = "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –∫–Ω–æ–ø–∫–æ–π \"–î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª\"."
            else:
                text = ""
                for art in articles:
                    loop = asyncio.get_event_loop()
                    info = await loop.run_in_executor(None, get_wb_product_info, art)
                    text += f"üî¢ *–ê—Ä—Ç–∏–∫—É–ª:* {escape_markdown(art)}\n{format_sales_info(info)}\n"
            await callback.message.edit_text(text, reply_markup=back_kb())

        elif data == "menu_global":
            pending_action[user_id] = {"action": "global"}
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:", reply_markup=back_kb())

    # –ù–æ–≤–æ–µ –ø–æ–¥–º–µ–Ω—é "–ê–Ω–∞–ª–∏–∑"
    elif data == "analysis":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=analysis_menu_kb())

    elif data == "analysis_article":
        if not user_has_subscription(user_id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏! –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.")
            return
        pending_action[user_id] = {"action": "analysis_article"}
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=back_kb())

    elif data == "analysis_brand":
        # –ò–∑–º–µ–Ω—è–µ–º –∑–∞–≥–ª—É—à–∫—É –Ω–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–º—É –±–æ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±—Ä–µ–Ω–¥–∞
        pending_action[user_id] = {"action": "analysis_brand"}
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", 
            reply_markup=back_kb()
        )

    elif data == "analysis_supplier":
        await callback.message.edit_text("–§—É–Ω–∫—Ü–∏—è '–ê–Ω–∞–ª–∏–∑ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞' –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=back_kb())

    elif data == "analysis_category":
        pending_action[user_id] = {"action": "analysis_category"}
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=back_kb())

    elif data == "analysis_characteristics":
        await callback.message.edit_text("–§—É–Ω–∫—Ü–∏—è '–ê–Ω–∞–ª–∏–∑ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫' –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=back_kb())

    elif data == "analysis_top_search":
        await callback.message.edit_text("–§—É–Ω–∫—Ü–∏—è '–ê–Ω–∞–ª–∏–∑ –¢–æ–ø–∞ –ø–æ–∏—Å–∫–∞' –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=back_kb())

    elif data == "analysis_frequency":
        await callback.message.edit_text("–§—É–Ω–∫—Ü–∏—è '–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –ê—Ä—Ç–∏–∫—É–ª–∞' –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=back_kb())

###############################################################################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è)

@dp.message(F.photo)
async def photo_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id in pending_action and pending_action[user_id].get("action") == "top_up_screenshot":
        await message.forward(ADMIN_ID)
        await message.answer("–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ!")
        pending_action[user_id]["action"] = "top_up_wait_admin"
    else:
        await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Å–µ–π—á–∞—Å –æ–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'.")

###############################################################################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

@dp.message()
async def text_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id in pending_action:
        action = pending_action[user_id]["action"]

        if user_id in pending_action and pending_action[user_id].get("action") == "global":
            query = message.text.strip()
            await message.answer("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            await bot.send_chat_action(message.chat.id, action=ChatAction.TYPING)
            loop = asyncio.get_event_loop()
            search_data = await loop.run_in_executor(None, global_search_serper_detailed, query)
            if search_data["error"]:
                text = search_data["error"]
                inline_kb = None
            else:
                pending_action[user_id] = {
                    "action": "global",
                    "query": query,
                    "results": search_data["results"],
                    "last_displayed": 0
                }
                first_batch = pending_action[user_id]["results"][:5]
                text = format_site_results_from_items(first_batch)
                pending_action[user_id]["last_displayed"] = len(first_batch)
                inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ï—â–µ –ø–æ–∏—Å–∫", callback_data="more_search")],
                    [InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ", callback_data="set_tracking")]
                ])
            await message.answer(text, reply_markup=inline_kb)
            # –£–¥–∞–ª—è–µ–º –≤—ã–∑–æ–≤ pending_action.pop(user_id, None)
            return

        elif action == "add":
            article = message.text.strip()
            if add_article(user_id, article):
                response = f"‚úÖ –ê—Ä—Ç–∏–∫—É–ª *{escape_markdown(article)}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."
            else:
                response = f"‚ö†Ô∏è –ê—Ä—Ç–∏–∫—É–ª *{escape_markdown(article)}* —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è."
            pending_action.pop(user_id, None)
            await message.answer(response, reply_markup=main_menu_kb())

        elif action == "remove":
            article = message.text.strip()
            remove_article(user_id, article)
            response = f"‚úÖ –ê—Ä—Ç–∏–∫—É–ª *{escape_markdown(article)}* —É–¥–∞–ª—ë–Ω."
            pending_action.pop(user_id, None)
            await message.answer(response, reply_markup=main_menu_kb())

        elif action == "top_up_wait_admin":
            await message.answer("–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

        elif action == "analysis_brand":
            brand_name = message.text.strip()
            await message.answer(f"‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±—Ä–µ–Ω–¥ {brand_name}, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
            
            # –ó–¥–µ—Å—å –º—ã –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–∞ –≤ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ brand_analysis.py
                from brand_analysis import get_brand_info, format_brand_analysis
                from product_data_formatter import generate_brand_charts
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ
                brand_info = await get_brand_info(brand_name)
                
                if not brand_info:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=back_kb())
                    pending_action.pop(user_id, None)
                    return
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                result = format_brand_analysis(brand_info)
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                product_info = {"brand_info": brand_info}
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –±—Ä–µ–Ω–¥–∞
                brand_chart_paths = generate_brand_charts(product_info)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await message.answer(result, reply_markup=back_kb())
                
                # –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –±—Ä–µ–Ω–¥–∞
                brand_chart_descriptions = {
                    'brand_sales_chart': "üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –±—Ä–µ–Ω–¥–∞ ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂ –∏ –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º",
                    'brand_competitors_chart': "ü•ä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ ‚Äî —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂–∞–º",
                    'brand_categories_chart': "üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ª—é —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –±—Ä–µ–Ω–¥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if brand_chart_paths:
                    await message.answer("üìä –ì–†–ê–§–ò–ö–ò –ü–û –ë–†–ï–ù–î–£:", reply_markup=back_kb())
                    
                    for chart_path in brand_chart_paths:
                        chart_name = chart_path.replace('.png', '')
                        caption = brand_chart_descriptions.get(chart_name, f"–ì—Ä–∞—Ñ–∏–∫: {chart_name}")
                        
                        with open(chart_path, 'rb') as photo:
                            await message.answer_photo(photo, caption=caption)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±—Ä–µ–Ω–¥–∞: {str(e)}", exc_info=True)
                await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±—Ä–µ–Ω–¥–∞: {str(e)}", reply_markup=back_kb())
            
            pending_action.pop(user_id, None)
            return

        elif action == "analysis_article":
            article = message.text.strip()
            await message.answer("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ç–∏–∫—É–ª–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            loop = asyncio.get_event_loop()
            info = await loop.run_in_executor(None, get_wb_product_info, article)
            daily_sales = info.get("–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏", 0)
            monthly_sales = daily_sales * 30
            yearly_sales = daily_sales * 365
            daily_profit_str = info.get("–ü—Ä–∏–±—ã–ª—å –∑–∞ —Å—É—Ç–∫–∏", "0").replace("‚ÇΩ", "").strip()
            try:
                daily_profit = float(daily_profit_str)
            except:
                daily_profit = 0.0
            yearly_profit = daily_profit * 365
            # –†–∞—Å—á—ë—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ä–∂–∏ (–ø—Ä–∏–±—ã–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—ã)
            try:
                price_str = info.get("–¶–µ–Ω–∞", "0").replace("‚ÇΩ", "").strip()
                price_value = float(price_str)
            except:
                price_value = 0.0
            if price_value > 0:
                profit_margin = daily_profit / price_value * 100
            else:
                profit_margin = 0
            if profit_margin < 5:
                probability_price_drop_value = 70
            elif profit_margin < 15:
                probability_price_drop_value = 40
            else:
                probability_price_drop_value = 10
            probability_price_drop = f"{probability_price_drop_value}%"
            # –†–∞—Å—á—ë—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –ø—Ä–æ–¥–∞–∂ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            target_daily = 100  # –¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –¥–µ–Ω—å
            target_monthly = 2000  # –¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ –º–µ—Å—è—Ü
            target_half_year = 10000  # –¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–æ–ª–≥–æ–¥–∞
            target_yearly = 18000  # –¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –≥–æ–¥
            potential_day_value = min((daily_sales / target_daily) * 100, 100)
            potential_month_value = min((monthly_sales / target_monthly) * 100, 100)
            potential_half_year_value = min(((yearly_sales / 2) / target_half_year) * 100, 100)
            potential_year_value = min((yearly_sales / target_yearly) * 100, 100)
            potential_day = f"{int(potential_day_value)}%"
            potential_month = f"{int(potential_month_value)}%"
            potential_half_year = f"{int(potential_half_year_value)}%"
            potential_year = f"{int(potential_year_value)}%"
            analysis_text = (
                f"*–ê–Ω–∞–ª–∏–∑ –ê—Ä—Ç–∏–∫—É–ª–∞: {escape_markdown(article)}*\n\n"
                f"*–ü—Ä–æ–¥–∞–∂–∏:*\n"
                f"  ‚Ä¢ –ó–∞ —Å—É—Ç–∫–∏: {daily_sales}\n"
                f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {monthly_sales}\n"
                f"  ‚Ä¢ –ó–∞ –≥–æ–¥: {yearly_sales}\n\n"
                f"*–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥:* {yearly_profit:.0f} ‚ÇΩ\n"
                f"*–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥:* {probability_price_drop}\n\n"
                f"*–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–æ–¥–∞–∂:*\n"
                f"  ‚Ä¢ –ó–∞ —Å—É—Ç–∫–∏: {potential_day}\n"
                f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {potential_month}\n"
                f"  ‚Ä¢ –ó–∞ –ø–æ–ª–≥–æ–¥–∞: {potential_half_year}\n"
                f"  ‚Ä¢ –ó–∞ –≥–æ–¥: {potential_year}\n"

            )

            pending_action.pop(user_id, None)

            await message.answer(analysis_text, reply_markup=main_menu_kb())


        elif action == "analysis_category":

            category = message.text.strip()

            # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É ASCII-–∫–æ–¥–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

            sum_ascii = sum(ord(ch) for ch in category)

            # –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: –¥–µ–ª–∏–º —Å—É–º–º—É –Ω–∞ 10 –∏ –±–µ—Ä—ë–º –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 100

            current_success = (sum_ascii // 10) % 100

            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥ –∫–∞–∫ —Ç–µ–∫—É—â—É—é —É—Å–ø–µ—à–Ω–æ—Å—Ç—å + 5%, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 100%

            forecast_success = min(current_success + 5, 100)

            analysis_result = (

                f"*–ê–Ω–∞–ª–∏–∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {escape_markdown(category)}*\n\n"

                f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å: {current_success}%\n"

                f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥: {forecast_success}% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å"

            )

            pending_action.pop(user_id, None)

            await message.answer(analysis_result, reply_markup=main_menu_kb())


        else:
            await message.answer("–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç pending_action –∏ –≤–≤–µ–¥—ë–Ω –∞—Ä—Ç–∏–∫—É–ª (—á–∏—Å–ª–æ)
        if message.text.strip().isdigit():
            if not user_has_subscription(user_id):
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!")
                return
            await bot.send_chat_action(message.chat.id, action=ChatAction.TYPING)
            await message.answer("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            loop = asyncio.get_event_loop()
            info = await loop.run_in_executor(None, get_wb_product_info, message.text.strip())
            text = format_sales_info(info)
            await message.answer(text, reply_markup=main_menu_kb())
        else:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º.",
                reply_markup=main_menu_kb()
            )

@dp.callback_query(lambda c: c.data == "more_search")
async def more_search_handler(callback: types.CallbackQuery):
    await callback.answer()  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    user_id = callback.from_user.id
    if user_id not in pending_action or pending_action[user_id].get("action") != "global":
        await callback.answer("–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.", show_alert=True)
        return

    data = pending_action[user_id]
    results = data.get("results", [])
    offset = data.get("last_displayed", 0)
    next_batch = results[offset:offset+5]
    if not next_batch:
        await callback.answer("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.", show_alert=True)
        return

    new_text = format_site_results_from_items(next_batch)
    pending_action[user_id]["last_displayed"] = offset + len(next_batch)
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ï—â–µ –ø–æ–∏—Å–∫", callback_data="more_search")],
        [InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ", callback_data="set_tracking")]
    ])
    await callback.message.edit_text(new_text, reply_markup=inline_kb)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ "–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ"
@dp.callback_query(lambda c: c.data == "set_tracking")
async def set_tracking_handler(callback: types.CallbackQuery):
    await callback.answer()  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    user_id = callback.from_user.id
    query = pending_action.get(user_id, {}).get("query", "")
    await callback.message.edit_text(
        f"–ú—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –∑–∞–ø—Ä–æ—Å–æ–º: *{escape_markdown(query)}*.\n"
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –ø–æ —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
        reply_markup=main_menu_kb()
    )
    pending_action.pop(user_id, None)

###############################################################################
# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π)

@dp.message(Command("approve"), F.chat.id == ADMIN_ID)
async def admin_approve_handler(message: types.Message):
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <user_id> <—Å—É–º–º–∞>")
        return
    try:
        uid = int(parts[1])
        amount = float(parts[2])
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç /approve <user_id> <—Å—É–º–º–∞>")
        return

    balance, _ = get_user_info(uid)
    new_balance = balance + amount
    update_user_balance(uid, new_balance)
    await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {amount:.2f}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f}")
    await bot.send_message(uid, f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} ‚ÇΩ. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} ‚ÇΩ")

@dp.message(Command("reject"), F.chat.id == ADMIN_ID)
async def admin_reject_handler(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject <user_id>")
        return
    try:
        uid = int(parts[1])
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç /reject <user_id>")
        return

    await message.answer(f"–û—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
    await bot.send_message(uid, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.")

###############################################################################
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
