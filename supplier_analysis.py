import asyncio
import hashlib
import logging
import random
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional

import aiohttp

logger = logging.getLogger(__name__)

__all__ = [
    "get_supplier_analysis",
    "format_supplier_message",
]


async def _fetch_wb_supplier_info(supplier_name: str) -> Optional[Dict[str, Any]]:
    """Fetch supplier information from Wildberries public search API."""
    try:
        # –£–ª—É—á—à–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, —É–±–∏—Ä–∞—è –æ–±—â–∏–µ —é—Ä. —Ç–µ—Ä–º–∏–Ω—ã
        search_terms = supplier_name.lower().replace('"', '').split()
        stop_words = ['–æ–æ–æ', '–∑–∞–æ', '–ø–∞–æ', '–∏–ø', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π', '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', '–æ–±—â–µ—Å—Ç–≤–æ', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é']
        meaningful_terms = [term for term in search_terms if term not in stop_words]
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º, –∏–Ω–∞—á–µ - –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        query_text = " ".join(meaningful_terms) if meaningful_terms else supplier_name
        logger.info(f"Using search query for supplier: '{query_text}'")

        query = query_text.replace(" ", "%20")
        search_url = (
            "https://search.wb.ru/exactmatch/ru/common/v4/search"
            f"?appType=1&curr=rub&dest=-1029256,-102269,-2162196,-1257786"
            f"&query={query}&resultset=catalog&spp=0&sort=popular"
        )
        headers = {
            "User-Agent": (
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                "AppleWebKit/537.36 (KHTML, like Gecko) "
                "Chrome/122.0.0.0 Safari/537.36"
            )
        }
        async with aiohttp.ClientSession() as session:
            async with session.get(search_url, headers=headers, timeout=20) as resp:
                if resp.status != 200:
                    logger.warning(
                        "WB search response %s for supplier %s", resp.status, supplier_name
                    )
                    return None
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç WB
                response_text = await resp.text()
                logger.info(f"WB API response for '{query_text}': {response_text[:500]}...")
                
                data = await resp.json(content_type=None) # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π content-type
    except Exception as exc:
        logger.error("WB search fetch error: %s", exc, exc_info=True)
        return None

    products: List[Dict[str, Any]] = (
        data.get("data", {}).get("products", []) if isinstance(data, dict) else []
    )
    if not products:
        logger.warning(f"No products found for supplier query: '{query_text}'")
        return None

    # –£–ª—É—á—à–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é: —Ç–æ–≤–∞—Ä –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ >=60% –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤
    def _matches_supplier(supplier_field: str) -> bool:
        s = supplier_field.lower()
        if not meaningful_terms:
            return supplier_name.lower() in s
        matches = sum(term in s for term in meaningful_terms)
        return matches >= max(1, int(len(meaningful_terms) * 0.6))

    filtered = [p for p in products if _matches_supplier(p.get("supplier", ""))]

    if not filtered:
        logger.warning(
            f"Could not filter products by >=60% word match. Using all {len(products)} products as fallback."
        )
        filtered = products

    total_products = len(filtered)
    avg_price = (
        sum(p.get("priceU", 0) / 100 for p in filtered) / total_products if total_products else 0
    )
    total_sales_est = sum(p.get("feedbacks", 0) * 10 for p in filtered)

    # Category distribution
    categories: Dict[str, int] = {}
    for p in filtered:
        cat = p.get("subjectName", p.get("category", "–†–∞–∑–Ω–æ–µ"))
        categories[cat] = categories.get(cat, 0) + 1

    # Top products by estimated revenue
    top_products: List[Dict[str, Any]] = []
    for prod in sorted(filtered, key=lambda x: x.get("feedbacks", 0), reverse=True)[:5]:
        price = prod.get("priceU", 0) / 100
        sales_est = prod.get("feedbacks", 0) * 10
        top_products.append(
            {
                "article": str(prod.get("id")),
                "name": prod.get("name", ""),
                "sales": sales_est,
                "revenue": round(price * sales_est, 2),
            }
        )

    result: Dict[str, Any] = {
        "supplierName": supplier_name,
        "inn": None,
        "ogrn": None,
        "totalProducts": total_products,
        "averagePrice": round(avg_price, 2),
        "totalSales": total_sales_est,
        "categories": categories,
        "topProducts": top_products,
        "adActivity": any(p.get("sale", 0) > 0 for p in filtered),
    }
    return result


def _generate_placeholder_supplier_info(supplier_name: str) -> Dict[str, Any]:
    """Generate deterministic placeholder when live data is unavailable."""
    seed_int = int(hashlib.md5(supplier_name.encode()).hexdigest(), 16)
    random.seed(seed_int)

    total_products = random.randint(20, 400)
    avg_price = random.randint(500, 6000)
    total_sales = random.randint(800, 25000)

    categories = {
        "–û–¥–µ–∂–¥–∞": random.randint(1, 10),
        "–î–æ–º": random.randint(1, 10),
        "–°–ø–æ—Ä—Ç": random.randint(1, 10),
        "–ö—Ä–∞—Å–æ—Ç–∞": random.randint(1, 10),
    }
    # upscale to total_products
    total_cat = sum(categories.values())
    if total_cat:
        factor = total_products / total_cat
        categories = {k: int(v * factor) for k, v in categories.items()}

    top_products = [
        {
            "article": str(90000000 + i * 321),
            "name": f"–¢–æ–≤–∞—Ä {i + 1}",
            "sales": random.randint(150, 1200),
            "revenue": random.randint(100000, 900000),
        }
        for i in range(5)
    ]

    return {
        "supplierName": supplier_name,
        "inn": None,
        "ogrn": None,
        "totalProducts": total_products,
        "averagePrice": avg_price,
        "totalSales": total_sales,
        "categories": categories,
        "topProducts": top_products,
        "adActivity": random.choice([True, False]),
    }


async def get_supplier_analysis(supplier_name: str) -> Dict[str, Any]:
    """Public coroutine used by both bot and FastAPI backend."""
    data = await _fetch_wb_supplier_info(supplier_name)
    if not data:
        data = _generate_placeholder_supplier_info(supplier_name)

    # Enrich with AI recommendations
    recommendations = await generate_supplier_recommendations(data)
    data["recommendations"] = recommendations
    
    return data


def format_supplier_message(data: Dict[str, Any]) -> str:
    """Return supplier analysis formatted for Telegram-bot markdown."""
    parts: List[str] = []
    parts.append("üè≠ **–ê–ù–ê–õ–ò–ó –ü–û–°–¢–ê–í–©–ò–ö–ê**\n")
    parts.append(f"üìå **–ü–æ—Å—Ç–∞–≤—â–∏–∫:** {data.get('supplierName')}")
    if data.get("inn"):
        parts.append(f"üî¢ **–ò–ù–ù:** {data['inn']}")
    if data.get("ogrn"):
        parts.append(f"üè∑ **–û–ì–†–ù:** {data['ogrn']}")

    parts.append("\n**–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**")
    parts.append(f"‚Ä¢ üè™ –¢–æ–≤–∞—Ä–æ–≤: {data['totalProducts']:,}")
    parts.append(f"‚Ä¢ üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {data['averagePrice']:,} ‚ÇΩ")
    parts.append(f"‚Ä¢ üì¶ –ü—Ä–æ–¥–∞–∂ (‚âà): {data['totalSales']:,}\n")

    if data.get("categories"):
        parts.append("**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**")
        for cat, cnt in sorted(data['categories'].items(), key=lambda x: x[1], reverse=True)[:5]:
            parts.append(f"‚Ä¢ {cat}: {cnt}")
        parts.append("")

    if data.get("topProducts"):
        parts.append("**üîù –¢–æ–ø-—Ç–æ–≤–∞—Ä—ã:**")
        for i, tp in enumerate(data['topProducts'], 1):
            parts.append(
                f"{i}. {tp['name']} (art. {tp['article']}) ‚Äì {tp['sales']:,} —à—Ç. / {tp['revenue']:,} ‚ÇΩ"
            )
        parts.append("")

    parts.append(
        "üì£ –†–µ–∫–ª–∞–º–∞: " + ("üü¢ –∞–∫—Ç–∏–≤–Ω–∞" if data.get("adActivity") else "üî¥ –Ω–µ –∑–∞–º–µ—á–µ–Ω–∞")
    )
    return "\n".join(parts)


def generate_fallback_supplier_recommendations(supplier_data: Dict[str, Any]) -> list:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    recommendations = []
    total_products = supplier_data.get('totalProducts', 0)
    avg_price = supplier_data.get('averagePrice', 0)
    ad_activity = supplier_data.get('adActivity', False)

    if total_products < 10:
        recommendations.append("–†–∞—Å—à–∏—Ä—å—Ç–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, —á—Ç–æ–±—ã –æ—Ö–≤–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ä—ã–Ω–∫–∞.")
    elif total_products > 200:
        recommendations.append("–ü—Ä–æ–≤–µ–¥–∏—Ç–µ ABC-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∏ –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–µ–ª–∏–∫–≤–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")

    if avg_price < 500:
        recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—è –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.")
    
    if not ad_activity:
        recommendations.append("–ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ä–µ–∫–ª–∞–º—É Wildberries –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤.")
    
    recommendations.append("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Ä–æ—Å—Ç–∞.")
    recommendations.append("–°—Ä–∞–≤–Ω–∏—Ç–µ —Å–≤–æ–∏ —Ç–æ–ø-—Ç–æ–≤–∞—Ä—ã —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω.")
    
    return recommendations[:5]


async def generate_supplier_recommendations(supplier_data: Dict[str, Any]) -> list:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI."""
    try:
        import openai
        import os
        
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            logger.warning("OpenAI API key not found for supplier recommendations")
            return generate_fallback_supplier_recommendations(supplier_data)
        
        context = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å Wildberries –∏ –¥–∞–π 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é:
        
        –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_data.get('supplierName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {supplier_data.get('totalProducts', 0)}
        –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {supplier_data.get('averagePrice', 0)} —Ä—É–±
        –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {supplier_data.get('totalSales', 0)}
        –†–µ–∫–ª–∞–º–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'–î–∞' if supplier_data.get('adActivity') else '–ù–µ—Ç'}
        
        –¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ:
        {supplier_data.get('topProducts', [])}
        
        –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
        {supplier_data.get('categories', {})}
        """
        
        client = openai.AsyncOpenAI(api_key=api_key)
        
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–∞ Wildberries. –î–∞–π –∫—Ä–∞—Ç–∫–∏–µ –∏ actionable —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": context}
            ],
            max_tokens=800,
            temperature=0.6
        )
        
        ai_response = response.choices[0].message.content
        recommendations = [rec.strip() for rec in ai_response.split('\n') if rec.strip() and len(rec.strip()) > 10]
        
        if not recommendations:
            return generate_fallback_supplier_recommendations(supplier_data)
            
        return recommendations[:5]
        
    except Exception as e:
        logger.error(f"Error generating AI supplier recommendations: {e}")
        return generate_fallback_supplier_recommendations(supplier_data) 