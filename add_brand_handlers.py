#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –±—Ä–µ–Ω–¥–∞ –≤ new_bot.py
"""

def main():
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞
    add_state_for_brand()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –±—Ä–µ–Ω–¥–∞
    add_brand_handlers()
    
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –±—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

def add_state_for_brand():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_brand –≤ –∫–ª–∞—Å—Å UserStates"""
    file_path = '/Users/user/Desktop/WILD-BOT 5/new_bot.py'
    
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()
    
    new_lines = []
    for line in lines:
        new_lines.append(line)
        if 'viewing_search_results = State()' in line:
            new_lines.append('    waiting_for_brand = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –±—Ä–µ–Ω–¥–∞\n')
    
    with open(file_path, 'w', encoding='utf-8') as file:
        file.writelines(new_lines)

def add_brand_handlers():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±—Ä–µ–Ω–¥–∞"""
    file_path = '/Users/user/Desktop/WILD-BOT 5/new_bot.py'
    
    # –ö–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers_code = '''
@dp.callback_query(lambda c: c.data == 'brand_analysis')
async def handle_brand_analysis(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–∞."""
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    can_perform = await check_subscription(user_id)
    if not can_perform:
        await callback_query.message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.", reply_markup=main_menu_kb())
        await callback_query.answer()
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞
    await state.set_state(UserStates.waiting_for_brand)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=back_keyboard())
    await callback_query.answer()

@dp.message(lambda message: message.text and message.text.strip(), UserStates.waiting_for_brand)
async def handle_brand_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞."""
    try:
        user_id = message.from_user.id
        brand_name = message.text.strip()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        processing_msg = await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±—Ä–µ–Ω–¥, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ
        brand_info = await get_brand_info(brand_name)
        
        if not brand_info:
            await processing_msg.delete()
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=back_keyboard())
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        product_info = {"brand_info": brand_info}
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        result = format_brand_analysis(brand_info)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –±—Ä–µ–Ω–¥–∞
        brand_chart_paths = generate_brand_charts(product_info)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await processing_msg.delete()
        await message.answer(result, reply_markup=back_keyboard())
        
        # –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –±—Ä–µ–Ω–¥–∞
        brand_chart_descriptions = {
            'brand_sales_chart': "üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –±—Ä–µ–Ω–¥–∞ ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂ –∏ –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º",
            'brand_competitors_chart': "ü•ä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ ‚Äî —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂–∞–º",
            'brand_categories_chart': "üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ª—é —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –±—Ä–µ–Ω–¥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if brand_chart_paths:
            await message.answer("üìä –ì–†–ê–§–ò–ö–ò –ü–û –ë–†–ï–ù–î–£:", reply_markup=back_keyboard())
            
            for chart_path in brand_chart_paths:
                chart_name = chart_path.replace('.png', '')
                caption = brand_chart_descriptions.get(chart_name, f"–ì—Ä–∞—Ñ–∏–∫: {chart_name}")
                
                with open(chart_path, 'rb') as photo:
                    await message.answer_photo(photo, caption=caption)
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in handle_brand_name: {str(e)}", exc_info=True)
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±—Ä–µ–Ω–¥–∞: {str(e)}", reply_markup=back_keyboard())
        await state.clear()
'''
    
    # –ò—â–µ–º –º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.read()
    
    position = content.find('@dp.callback_query(lambda c: c.data == "product_search")')
    if position == -1:
        position = content.find('@dp.callback_query(lambda c: c.data == "track_item")')
    
    if position != -1:
        new_content = content[:position] + handlers_code + '\n' + content[position:]
        
        with open(file_path, 'w', encoding='utf-8') as file:
            file.write(new_content)
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!")

if __name__ == "__main__":
    main() 