#!/bin/bash

echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 500 –û–®–ò–ë–û–ö BACKEND..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

cd /opt/wild-analytics || { echo -e "${RED}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"; exit 1; }

log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ª–æ–≥–æ–≤ backend..."
docker logs wild-backend --tail 20

log "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ backend –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
docker stop wild-backend 2>/dev/null || true
docker rm wild-backend 2>/dev/null || true

log "üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ main.py —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º..."
cat > web-dashboard/backend/main.py << 'EOF'
import os
import sys
import uvicorn
import traceback
from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
import sqlite3
import hashlib
import jwt
from datetime import datetime, timedelta
import logging
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(title="Wild Analytics API", version="2.0.0")

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# JWT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SECRET_KEY = "wild-analytics-super-secret-key-2024-production"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 1440

security = HTTPBearer()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
DB_INITIALIZED = False

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global DB_INITIALIZED
    try:
        logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î
        db_path = '/app/wild_analytics.db'
        logger.info(f"üìÅ –ü—É—Ç—å –∫ –ë–î: {db_path}")
        
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                name TEXT NOT NULL,
                balance REAL DEFAULT 15000.0,
                subscription_type TEXT DEFAULT 'Pro',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS analyses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                type TEXT NOT NULL,
                query TEXT,
                results TEXT,
                status TEXT DEFAULT 'completed',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ analyses —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_password = hashlib.sha256("password123".encode()).hexdigest()
        cursor.execute('SELECT id FROM users WHERE email = ?', ("test@example.com",))
        if not cursor.fetchone():
            cursor.execute('''
                INSERT INTO users (email, password_hash, name, balance, subscription_type)
                VALUES (?, ?, ?, ?, ?)
            ''', ("test@example.com", test_password, "Test User", 15000.0, "Pro"))
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
        else:
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        conn.commit()
        conn.close()
        DB_INITIALIZED = True
        logger.info("üéØ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        return False

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class UserLogin(BaseModel):
    email: str
    password: str

class UserRegister(BaseModel):
    email: str
    password: str
    name: str

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return hash_password(plain_password) == hashed_password

def create_access_token(data: dict):
    try:
        to_encode = data.copy()
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        to_encode.update({"exp": expire})
        encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
        return encoded_jwt
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        raise HTTPException(status_code=500, detail="Token creation failed")

def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):
    try:
        if not credentials:
            raise HTTPException(status_code=401, detail="Authorization required")
        
        token = credentials.credentials
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id: int = payload.get("sub")
        
        if user_id is None:
            raise HTTPException(status_code=401, detail="Invalid token")
        
        conn = sqlite3.connect('/app/wild_analytics.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
        user = cursor.fetchone()
        conn.close()
        
        if user is None:
            raise HTTPException(status_code=401, detail="User not found")
            
        return {
            "id": user[0],
            "email": user[1],
            "name": user[3],
            "balance": user[4],
            "subscription_type": user[5]
        }
    except jwt.PyJWTError as e:
        logger.error(f"‚ùå JWT –æ—à–∏–±–∫–∞: {e}")
        raise HTTPException(status_code=401, detail="Invalid token")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise HTTPException(status_code=500, detail="Authentication error")

# API Endpoints
@app.get("/")
async def root():
    return {
        "message": "Wild Analytics API v2.0 - Working!",
        "status": "running",
        "db_initialized": DB_INITIALIZED,
        "timestamp": datetime.now().isoformat()
    }

@app.get("/health")
async def health():
    return {
        "status": "healthy",
        "service": "wild-analytics-backend",
        "version": "2.0.0",
        "db_status": "initialized" if DB_INITIALIZED else "not_initialized",
        "timestamp": datetime.now().isoformat()
    }

@app.post("/auth/login")
async def login(user_data: UserLogin):
    try:
        logger.info(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è email: {user_data.email}")
        
        if not DB_INITIALIZED:
            logger.error("‚ùå –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            raise HTTPException(status_code=500, detail="Database not initialized")
        
        conn = sqlite3.connect('/app/wild_analytics.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE email = ?", (user_data.email,))
        user = cursor.fetchone()
        conn.close()
        
        logger.info(f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user is not None}")
        
        if not user:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data.email} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise HTTPException(status_code=401, detail="Invalid credentials")
        
        password_valid = verify_password(user_data.password, user[2])
        logger.info(f"üîë –ü–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {password_valid}")
        
        if not password_valid:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è {user_data.email}")
            raise HTTPException(status_code=401, detail="Invalid credentials")
        
        access_token = create_access_token(data={"sub": user[0]})
        
        result = {
            "success": True,
            "access_token": access_token,
            "user": {
                "id": user[0],
                "email": user[1],
                "name": user[3],
                "balance": user[4],
                "subscription_type": user[5]
            },
            "message": "Login successful"
        }
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è {user_data.email}")
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"Login failed: {str(e)}")

@app.post("/auth/register")
async def register(user_data: UserRegister):
    try:
        logger.info(f"üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è email: {user_data.email}")
        
        if not DB_INITIALIZED:
            logger.error("‚ùå –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            raise HTTPException(status_code=500, detail="Database not initialized")
        
        conn = sqlite3.connect('/app/wild_analytics.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT id FROM users WHERE email = ?", (user_data.email,))
        existing_user = cursor.fetchone()
        
        if existing_user:
            conn.close()
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            raise HTTPException(status_code=400, detail="User already exists")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password_hash = hash_password(user_data.password)
        cursor.execute('''
            INSERT INTO users (email, password_hash, name, balance, subscription_type)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_data.email, password_hash, user_data.name, 15000.0, "Pro"))
        
        user_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        access_token = create_access_token(data={"sub": user_id})
        
        result = {
            "success": True,
            "access_token": access_token,
            "user": {
                "id": user_id,
                "email": user_data.email,
                "name": user_data.name,
                "balance": 15000.0,
                "subscription_type": "Pro"
            },
            "message": "Registration successful"
        }
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è {user_data.email}")
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"Registration failed: {str(e)}")

@app.get("/user/dashboard")
async def get_dashboard(current_user: dict = Depends(get_current_user)):
    try:
        logger.info(f"üìä –ó–∞–ø—Ä–æ—Å –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_user['id']}")
        
        return {
            "user": current_user,
            "stats": {
                "products_analyzed": 156,
                "successful_analyses": 142,
                "monthly_usage": 45,
                "total_searches": 89,
                "recent_analyses": [
                    {"type": "Product Analysis", "date": "2024-07-27", "status": "success"},
                    {"type": "Brand Analysis", "date": "2024-07-26", "status": "success"},
                    {"type": "Category Analysis", "date": "2024-07-25", "status": "pending"}
                ]
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        raise HTTPException(status_code=500, detail="Dashboard error")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Wild Analytics Backend...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    try:
        test_file = '/app/test_write.txt'
        with open(test_file, 'w') as f:
            f.write('test')
        os.remove(test_file)
        logger.info("‚úÖ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏")
    except Exception as e:
        logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    if init_database():
        logger.info("üéØ Backend —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    else:
        logger.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!")

if __name__ == "__main__":
    logger.info("üî• –ó–∞–ø—É—Å–∫ Wild Analytics Backend —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="debug")
EOF

log "üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ requirements.txt..."
cat > web-dashboard/backend/requirements.txt << 'EOF'
fastapi==0.104.1
uvicorn[standard]==0.24.0
pydantic==2.5.0
python-multipart==0.0.6
PyJWT==2.8.0
python-jose[cryptography]==3.3.0
bcrypt==4.1.2
aiofiles==23.2.0
jinja2==3.1.2
requests==2.31.0
httpx==0.25.2
python-dotenv==1.0.0
EOF

log "üîß –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ Dockerfile..."
cat > web-dashboard/backend/Dockerfile << 'EOF'
FROM python:3.11-slim

WORKDIR /app

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \
    curl \
    sqlite3 \
    && rm -rf /var/lib/apt/lists/*

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
COPY . .

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
RUN mkdir -p /app/logs
RUN chmod 755 /app
RUN touch /app/wild_analytics.db
RUN chmod 666 /app/wild_analytics.db

EXPOSE 8000

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

CMD ["python", "main.py"]
EOF

log "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ backend —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏..."
docker build -t wild-backend ./web-dashboard/backend

if [ $? -eq 0 ]; then
    log "‚úÖ Backend –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
    
    log "üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ backend..."
    docker run -d --name wild-backend -p 8000:8000 \
      -v $(pwd)/web-dashboard/backend:/app \
      wild-backend
    
    log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend (20 —Å–µ–∫)..."
    sleep 20
    
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ backend..."
    docker ps --filter name=wild-backend --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    
    log "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ backend..."
    docker logs wild-backend --tail 15
    
    log "üîç –¢–µ—Å—Ç health endpoint..."
    curl -s http://93.127.214.183:8000/health | jq . 2>/dev/null || curl -s http://93.127.214.183:8000/health
    
    log "üîç –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏..."
    curl -s -X POST http://93.127.214.183:8000/auth/login \
      -H "Content-Type: application/json" \
      -d '{"email":"test@example.com","password":"password123"}' \
      | jq . 2>/dev/null || echo "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω"
    
    log "‚úÖ BACKEND –ò–°–ü–†–ê–í–õ–ï–ù –ò –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù!"
    log "üåê –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ http://93.127.214.183:3000"
    log "üìß Email: test@example.com"
    log "üîë Password: password123"
    
else
    log "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ backend"
    docker logs wild-backend 2>/dev/null || echo "–ù–µ—Ç –ª–æ–≥–æ–≤ backend"
fi

log "üìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–°..."
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 