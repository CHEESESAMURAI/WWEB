import React, { useState } from 'react';
import { Brain, Search } from 'lucide-react';
import Card from '../../components/UI/Card';
import Button from '../../components/UI/Button';
import LoadingSpinner from '../../components/UI/LoadingSpinner';
import { analysisAPI } from '../../services/api';

interface OracleResult {
  category: string;
  total_revenue: number;
  total_sales: number;
  avg_price: number;
  monopoly_level: number;
  ad_percentage: number;
  top_products: Array<{
    name: string;
    revenue: number;
    sales: number;
    price: number;
  }>;
}

const OracleQueries: React.FC = () => {
  const [queriesCount, setQueriesCount] = useState(3);
  const [month, setMonth] = useState<string>(new Date().toISOString().slice(0, 7)); // YYYY-MM
  const [minRevenue, setMinRevenue] = useState(0);
  const [minFrequency, setMinFrequency] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [results, setResults] = useState<OracleResult[]>([]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (queriesCount < 1 || queriesCount > 5) {
      setError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5');
      return;
    }

    setLoading(true);
    setError('');
    setResults([]);

    try {
      const response = await analysisAPI.analyzeOracleQueries(
        queriesCount,
        month,
        minRevenue,
        minFrequency
      );

      if (response.success && response.data && (response.data as any).results) {
        setResults((response.data as any).results);
      } else {
        setError(response.error || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      }
    } catch (err: any) {
      setError(err.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    } finally {
      setLoading(false);
    }
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0,
    }).format(price);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 flex items-center">
            <Brain className="w-6 h-6 mr-2 text-primary-600" />
            –û—Ä–∞–∫—É–ª –∑–∞–ø—Ä–æ—Å–æ–≤
          </h1>
          <p className="text-gray-600 mt-1">
            –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ Wildberries
          </p>
        </div>
        <div className="text-sm text-gray-500">–°—Ç–æ–∏–º–æ—Å—Ç—å: 50‚ÇΩ</div>
      </div>

      {/* Form */}
      <Card>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (1-5)
              </label>
              <input
                type="number"
                min={1}
                max={5}
                value={queriesCount}
                onChange={(e) => setQueriesCount(Number(e.target.value))}
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–ú–µ—Å—è—Ü (YYYY-MM)</label>
              <input
                type="month"
                value={month}
                onChange={(e) => setMonth(e.target.value)}
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ (‚ÇΩ)
              </label>
              <input
                type="number"
                value={minRevenue}
                onChange={(e) => setMinRevenue(Number(e.target.value))}
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å
              </label>
              <input
                type="number"
                value={minFrequency}
                onChange={(e) => setMinFrequency(Number(e.target.value))}
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500"
              />
            </div>
          </div>
          <Button type="submit" icon={<Search className="w-4 h-4" />} loading={loading}>
            –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
          </Button>
        </form>
      </Card>

      {/* Loading */}
      {loading && (
        <Card>
          <div className="flex flex-col items-center justify-center py-12">
            <LoadingSpinner size="lg" />
            <p className="mt-4 text-gray-600">–û—Ä–∞–∫—É–ª –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã...</p>
            <p className="text-sm text-gray-500 mt-2">–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã</p>
          </div>
        </Card>
      )}

      {/* Error */}
      {error && (
        <Card>
          <div className="text-center py-8">
            <div className="text-red-600 text-lg font-medium mb-2">–û—à–∏–±–∫–∞</div>
            <p className="text-gray-600">{error}</p>
          </div>
        </Card>
      )}

      {/* Results */}
      {results.length > 0 && (
        <div className="space-y-6">
          {results.map((res, idx) => (
            <Card key={idx}>
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <span className="mr-2 text-xl">üèÜ</span>
                {idx + 1}. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {res.category}
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-700">
                <div className="bg-blue-50 p-4 rounded-lg">
                  <div className="text-xs text-blue-600 font-medium">–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</div>
                  <div className="text-xl font-bold text-blue-900">
                    {formatPrice(res.total_revenue)}
                  </div>
                </div>
                <div className="bg-green-50 p-4 rounded-lg">
                  <div className="text-xs text-green-600 font-medium">–ü—Ä–æ–¥–∞–∂</div>
                  <div className="text-xl font-bold text-green-900">
                    {res.total_sales.toLocaleString('ru-RU')}
                  </div>
                </div>
                <div className="bg-yellow-50 p-4 rounded-lg">
                  <div className="text-xs text-yellow-600 font-medium">–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞</div>
                  <div className="text-xl font-bold text-yellow-900">
                    {formatPrice(res.avg_price)}
                  </div>
                </div>
              </div>

              {/* Extra metrics */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                <div className="flex items-center space-x-2 text-sm text-gray-700">
                  <span>üéØ –ú–æ–Ω–æ–ø–æ–ª–∏–∑–∞—Ü–∏—è:</span>
                  <span className="font-semibold">{res.monopoly_level.toFixed(1)}%</span>
                </div>
                <div className="flex items-center space-x-2 text-sm text-gray-700">
                  <span>üì¢ –†–µ–∫–ª–∞–º–∞:</span>
                  <span className="font-semibold">{res.ad_percentage.toFixed(1)}%</span>
                </div>
              </div>

              {/* Top products */}
              {res.top_products?.length > 0 && (
                <div className="mt-6">
                  <h4 className="text-md font-medium text-gray-900 mb-2">–¢–æ–ø —Ç–æ–≤–∞—Ä—ã</h4>
                  <div className="space-y-2 text-sm">
                    {res.top_products.map((p, i) => (
                      <div key={i} className="flex items-center justify-between">
                        <span>
                          {i + 1}. {p.name}
                        </span>
                        <span className="text-gray-600">
                          {formatPrice(p.revenue)} / {p.sales.toLocaleString()} —à—Ç.
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};

export default OracleQueries; 