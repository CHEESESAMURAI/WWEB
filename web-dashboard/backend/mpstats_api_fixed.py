"""
üîß MPStats API - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å MPStats API
"""

import logging
import aiohttp
import asyncio
from typing import Dict, Optional, List, Any, Union
from datetime import datetime, timedelta
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# MPStats API –∫–ª—é—á –∏ –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MPSTATS_API_KEY = "68431d2ac72ea4.96910328a56006b24a55daf65db03835d5fe5b4d"
MPSTATS_BASE_URL = "https://mpstats.io/api/wb"

class MPStatsAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MPStats API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    def __init__(self, api_key: str = MPSTATS_API_KEY):
        self.api_key = api_key
        self.base_url = MPSTATS_BASE_URL
        
    def _get_headers(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return {
            "X-Mpstats-TOKEN": self.api_key,
            "Content-Type": "application/json",
            "Accept": "application/json",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }
    
    async def _make_request(
        self, 
        endpoint: str, 
        method: str = "GET", 
        params: Optional[Dict] = None,
        data: Optional[Dict] = None,
        retries: int = 3
    ) -> Optional[Dict]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
        
        url = f"{self.base_url}{endpoint}"
        headers = self._get_headers()
        
        for attempt in range(retries):
            try:
                async with aiohttp.ClientSession() as session:
                    if method.upper() == "GET":
                        async with session.get(url, headers=headers, params=params, timeout=30) as response:
                            return await self._process_response(response, url, attempt + 1)
                    elif method.upper() == "POST":
                        async with session.post(url, headers=headers, json=data, timeout=30) as response:
                            return await self._process_response(response, url, attempt + 1)
                            
            except asyncio.TimeoutError:
                logger.warning(f"‚è±Ô∏è Timeout on attempt {attempt + 1} for {url}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Request error on attempt {attempt + 1} for {url}: {e}")
                
            if attempt < retries - 1:
                await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
        logger.error(f"‚ùå Failed after {retries} attempts: {url}")
        return None
    
    async def _process_response(self, response: aiohttp.ClientResponse, url: str, attempt: int) -> Optional[Dict]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API"""
        if response.status == 200:
            try:
                data = await response.json()
                logger.info(f"‚úÖ MPStats API success (attempt {attempt}): {url}")
                return data
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è JSON parse error: {e}")
                return None
        else:
            error_text = await response.text()
            logger.warning(f"‚ùå MPStats API {response.status} (attempt {attempt}): {error_text[:200]}")
            return None

    # =================================================================
    # üìä –¢–û–í–ê–†–ù–´–ï –î–ê–ù–ù–´–ï (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ endpoints)
    # =================================================================
    
    async def get_item_sales(self, article: str, d1: str = None, d2: str = None) -> Optional[List[Dict]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —Ç–æ–≤–∞—Ä–∞ –ø–æ –¥–Ω—è–º
        GET /api/wb/get/item/{item_id}/sales
        """
        if not d1:
            d1 = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
        if not d2:
            d2 = datetime.now().strftime("%Y-%m-%d")
            
        endpoint = f"/get/item/{article}/sales"
        params = {"d1": d1, "d2": d2}
        
        logger.info(f"üîç Getting sales data for {article} from {d1} to {d2}")
        return await self._make_request(endpoint, "GET", params)
    
    async def get_item_summary(self, article: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä—É
        GET /api/wb/get/item/{item_id}/summary
        """
        endpoint = f"/get/item/{article}/summary"
        
        logger.info(f"üîç Getting summary for item {article}")
        return await self._make_request(endpoint, "GET")
    
    async def get_item_card(self, article: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
        GET /api/wb/get/item/{item_id}/card
        """
        endpoint = f"/get/item/{article}/card"
        
        logger.info(f"üîç Getting card for item {article}")
        return await self._make_request(endpoint, "GET")
    
    async def get_items_by_id(self, article: str) -> Optional[List[Dict]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ ID
        GET /api/wb/get/items/by/id?id={item_id}
        """
        endpoint = "/get/items/by/id"
        params = {"id": article}
        
        logger.info(f"üîç Getting item info by ID {article}")
        return await self._make_request(endpoint, "GET", params)

    # =================================================================
    # üè¢ –ë–†–ï–ù–î–û–í–´–ï –î–ê–ù–ù–´–ï (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ endpoints)
    # =================================================================
    
    async def get_brand_summary(self, brand_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –±—Ä–µ–Ω–¥—É
        GET /api/wb/get/brand/{brand_id}/summary
        """
        endpoint = f"/get/brand/{brand_id}/summary"
        
        logger.info(f"üîç Getting brand summary for {brand_id}")
        return await self._make_request(endpoint, "GET")
    
    async def get_brand_items(self, brand_name: str, limit: int = 100) -> Optional[List[Dict]]:
        """
        –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫–æ–≤—ã–π API
        """
        endpoint = "/get/search"
        params = {
            "query": brand_name,
            "limit": limit
        }
        
        logger.info(f"üîç Searching brand items for {brand_name}")
        return await self._make_request(endpoint, "GET", params)

    # =================================================================
    # üìÇ –ö–ê–¢–ï–ì–û–†–ò–ô–ù–´–ï –î–ê–ù–ù–´–ï (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ endpoints) 
    # =================================================================
    
    async def get_category_summary(self, category_path: str, d1: str = None, d2: str = None) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        GET /api/wb/get/category/summary
        """
        if not d1:
            d1 = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
        if not d2:
            d2 = datetime.now().strftime("%Y-%m-%d")
            
        endpoint = "/get/category/summary"
        params = {
            "path": category_path,
            "d1": d1,
            "d2": d2
        }
        
        logger.info(f"üîç Getting category summary for {category_path}")
        return await self._make_request(endpoint, "GET", params)
    
    async def get_category_items(self, category_path: str, limit: int = 100) -> Optional[List[Dict]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        GET /api/wb/get/category/items
        """
        endpoint = "/get/category/items"
        params = {
            "path": category_path,
            "limit": limit
        }
        
        logger.info(f"üîç Getting category items for {category_path}")
        return await self._make_request(endpoint, "GET", params)

    # =================================================================
    # üîç –ü–û–ò–°–ö–û–í–´–ï –î–ê–ù–ù–´–ï
    # =================================================================
    
    async def search_items(self, query: str, limit: int = 50) -> Optional[List[Dict]]:
        """
        –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        GET /api/wb/get/search
        """
        endpoint = "/get/search"
        params = {
            "query": query,
            "limit": limit
        }
        
        logger.info(f"üîç Searching items for query: {query}")
        return await self._make_request(endpoint, "GET", params)

    async def get_in_similar(self, category_path: str, d1: str = None, d2: str = None, fbs: int = 0) -> Optional[Dict]:
        """
        ‚úÖ –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –†–ê–ë–û–¢–ê–Æ–©–ò–ô ENDPOINT 
        GET /api/wb/get/in_similar
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"data": [], "total": 0, "error": false, "sortModel": [...]}
        """
        if not d1:
            d1 = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
        if not d2:
            d2 = datetime.now().strftime("%Y-%m-%d")
            
        endpoint = "/get/in_similar"
        params = {
            "path": category_path,
            "d1": d1, 
            "d2": d2,
            "fbs": fbs
        }
        
        logger.info(f"üîç Getting similar items for category: {category_path}")
        result = await self._make_request(endpoint, "GET", params)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if result and isinstance(result, dict):
            logger.info(f"‚úÖ in_similar returned {result.get('total', 0)} items")
            return result
        else:
            logger.warning(f"‚ö†Ô∏è Unexpected in_similar response format: {type(result)}")
            return None

    # =================================================================
    # üìä –°–û–°–¢–ê–í–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –¢–û–í–ê–†–û–í
    # =================================================================
    
    async def get_comprehensive_item_data(self, article: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        logger.info(f"üéØ Starting comprehensive analysis for item {article}")
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        tasks = [
            self.get_item_sales(article),
            self.get_item_summary(article), 
            self.get_item_card(article),
            self.get_items_by_id(article)
        ]
        
        sales_data, summary_data, card_data, id_data = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = {
            "article": article,
            "sales_data": sales_data if not isinstance(sales_data, Exception) else None,
            "summary_data": summary_data if not isinstance(summary_data, Exception) else None,
            "card_data": card_data if not isinstance(card_data, Exception) else None,
            "id_data": id_data if not isinstance(id_data, Exception) else None,
            "timestamp": datetime.now().isoformat()
        }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = self._calculate_item_metrics(result)
        result.update(metrics)
        
        return result
    
    def _calculate_item_metrics(self, data: Dict) -> Dict[str, Any]:
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Ç–æ–≤–∞—Ä–∞
        –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ –∏ —Ü–µ–Ω—ã –∏–∑ MPStats
        """
        sales_data = data.get("sales_data")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        def safe_int(val):
            try:
                return int(val) if val is not None else 0
            except:
                return 0
        
        def safe_float(val):
            try:
                return float(val) if val is not None else 0.0
            except:
                return 0.0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
        daily_sales = 0
        daily_revenue = 0.0
        daily_profit = 0.0
        total_sales = 0
        total_revenue = 0.0
        
        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
        if sales_data and isinstance(sales_data, list):
            total_sales = 0
            total_revenue = 0.0
            
            logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(sales_data)} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–¥–∞–∂")
            
            for day in sales_data:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏
                day_sales = safe_int(day.get("sales", 0))
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: final_price -> basic_price -> price)
                day_price = safe_float(day.get("final_price", 0))
                if day_price == 0:
                    day_price = safe_float(day.get("basic_price", 0))
                if day_price == 0:
                    day_price = safe_float(day.get("price", 0))
                if day_price == 0 and day_sales > 0:
                    # –†–∞—Å—á–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑ revenue –µ—Å–ª–∏ –µ—Å—Ç—å
                    day_revenue_field = safe_float(day.get("revenue", 0))
                    if day_revenue_field > 0:
                        day_price = day_revenue_field / day_sales
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ä—É—á–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                day_revenue = day_sales * day_price
                
                # –°—É–º–º–∏—Ä—É–µ–º
                total_sales += day_sales
                total_revenue += day_revenue
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if len(sales_data) <= 5 or day == sales_data[0]:
                    logger.info(f"  üìÖ {day.get('data', 'unknown')}: {day_sales} –ø—Ä–æ–¥–∞–∂ √ó {day_price:.2f} = {day_revenue:.2f} —Ä—É–±")
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            days_count = len(sales_data)
            if days_count > 0:
                daily_sales = round(total_sales / days_count)  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è
                daily_revenue = total_revenue / days_count
                daily_profit = daily_revenue * 0.25  # 25% –º–∞—Ä–∂–∞
                
            logger.info(f"‚úÖ –ò—Ç–æ–≥–æ: {total_sales} –ø—Ä–æ–¥–∞–∂ –∑–∞ {days_count} –¥–Ω–µ–π")
            logger.info(f"   üí∞ –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {daily_revenue:.2f} —Ä—É–±")
            logger.info(f"   üìä –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {daily_sales}")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤)
        purchase_rate = 72.5
        conversion_rate = 2.8
        market_share = 0.3
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
        summary_data = data.get("summary_data")
        if summary_data and isinstance(summary_data, dict):
            purchase_rate = safe_float(summary_data.get("purchaseRate", purchase_rate))
            conversion_rate = safe_float(summary_data.get("conversionRate", conversion_rate))
            market_share = safe_float(summary_data.get("marketShare", market_share))
        
        card_data = data.get("card_data")
        if card_data and isinstance(card_data, dict):
            purchase_rate = safe_float(card_data.get("purchaseRate", purchase_rate))
            conversion_rate = safe_float(card_data.get("conversionRate", conversion_rate))
        
        return {
            "daily_sales": daily_sales,
            "daily_revenue": daily_revenue,
            "daily_profit": daily_profit,
            "total_sales": total_sales,
            "total_revenue": total_revenue,
            "purchase_rate": purchase_rate,
            "conversion_rate": conversion_rate,
            "market_share": market_share,
            "debug_info": {
                "sales_records_count": len(sales_data) if sales_data else 0,
                "has_sales_data": bool(sales_data),
                "calculation_method": "fixed_processing"
            }
        }

# =================================================================
# üîß –§–£–ù–ö–¶–ò–ò-–ê–î–ê–ü–¢–ï–†–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
# =================================================================

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
mpstats_api = MPStatsAPI()

async def get_mpstats_product_data_fixed(article: str) -> Dict[str, Any]:
    """
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ MPStats
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    """
    try:
        data = await mpstats_api.get_comprehensive_item_data(article)
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return {
            "raw_data": data.get("sales_data", []),
            "daily_sales": data.get("daily_sales", 0),
            "daily_revenue": data.get("daily_revenue", 0.0),
            "daily_profit": data.get("daily_profit", 0.0),
            "total_sales": data.get("total_sales", 0),
            "total_revenue": data.get("total_revenue", 0.0),
            "purchase_rate": data.get("purchase_rate", 72.5),
            "conversion_rate": data.get("conversion_rate", 2.8),
            "market_share": data.get("market_share", 0.3),
            "mpstats_raw": data  # –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error in get_mpstats_product_data_fixed for {article}: {e}")
        return {
            "raw_data": [],
            "daily_sales": 0,
            "daily_revenue": 0.0,
            "daily_profit": 0.0,
            "total_sales": 0,
            "total_revenue": 0.0,
            "purchase_rate": 72.5,
            "conversion_rate": 2.8,
            "market_share": 0.3,
            "error": str(e)
        }

async def get_brand_data_fixed(brand_name: str) -> Optional[Dict]:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±—Ä–µ–Ω–¥–∞"""
    try:
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        items = await mpstats_api.get_brand_items(brand_name)
        
        if not items:
            return None
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        brand_metrics = {
            "brand_name": brand_name,
            "total_items": len(items),
            "items": items[:10],  # –ü–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
            "timestamp": datetime.now().isoformat()
        }
        
        return brand_metrics
        
    except Exception as e:
        logger.error(f"‚ùå Error in get_brand_data_fixed for {brand_name}: {e}")
        return None

async def get_category_data_fixed(category_path: str) -> Optional[Dict]:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∏ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        summary_task = mpstats_api.get_category_summary(category_path)
        items_task = mpstats_api.get_category_items(category_path)
        
        summary, items = await asyncio.gather(summary_task, items_task, return_exceptions=True)
        
        result = {
            "category_path": category_path,
            "summary": summary if not isinstance(summary, Exception) else None,
            "items": items if not isinstance(items, Exception) else [],
            "timestamp": datetime.now().isoformat()
        }
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Error in get_category_data_fixed for {category_path}: {e}")
        return None

# =================================================================
# üß™ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# =================================================================

async def test_mpstats_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints MPStats API"""
    test_article = "446467818"
    test_brand = "Nike"
    test_category = "–ñ–µ–Ω—â–∏–Ω–∞–º/–û–¥–µ–∂–¥–∞"
    
    logger.info("üß™ Starting MPStats API endpoint tests...")
    
    # –¢–µ—Å—Ç —Ç–æ–≤–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info("üì¶ Testing item endpoints...")
    item_data = await mpstats_api.get_comprehensive_item_data(test_article)
    logger.info(f"Item test result: {bool(item_data.get('sales_data'))}")
    
    # –¢–µ—Å—Ç –±—Ä–µ–Ω–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info("üè¢ Testing brand endpoints...")
    brand_data = await get_brand_data_fixed(test_brand)
    logger.info(f"Brand test result: {bool(brand_data)}")
    
    # –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info("üìÇ Testing category endpoints...")
    category_data = await get_category_data_fixed(test_category)
    logger.info(f"Category test result: {bool(category_data)}")
    
    logger.info("‚úÖ MPStats API tests completed!")
    
    return {
        "item_test": bool(item_data.get('sales_data')),
        "brand_test": bool(brand_data),
        "category_test": bool(category_data),
        "timestamp": datetime.now().isoformat()
    }

# =================================================================
# üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò –û–¢–õ–ê–î–ö–ê
# =================================================================

def setup_debug_logging():
    """–í–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    logging.getLogger("aiohttp").setLevel(logging.DEBUG)
    logging.getLogger(__name__).setLevel(logging.DEBUG)
    
    # –î–æ–±–∞–≤–ª—è–µ–º handler –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = logging.FileHandler('mpstats_api_debug.log')
    file_handler.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)
    
    logger.addHandler(file_handler)
    logger.info("üîß Debug logging enabled")

if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è
    async def main():
        setup_debug_logging()
        await test_mpstats_endpoints()
    
    import asyncio
    asyncio.run(main()) 