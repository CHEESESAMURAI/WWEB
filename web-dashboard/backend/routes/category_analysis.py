import logging
import statistics
from datetime import datetime, timedelta
from typing import List, Dict, Any
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
import aiohttp
import asyncio
import openai
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = "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"

router = APIRouter(tags=["category_analysis"])

# === –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö ===

class ChartData(BaseModel):
    dates: List[str]
    values: List[float]

class CategoryAnalysisRequest(BaseModel):
    category_path: str
    date_from: str
    date_to: str
    fbs: int = 0

class ProductDetail(BaseModel):
    id: int
    name: str
    brand: str = None
    seller: str = None
    final_price: float
    sales: int
    revenue: float
    rating: float
    comments: int
    purchase: float
    balance: int
    country: str = None
    gender: str = None
    thumb_middle: str = None
    url: str = None
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    basic_sale: float = None
    promo_sale: float = None
    client_sale: float = None
    client_price: float = None
    start_price: float = None
    final_price_max: float = None
    final_price_min: float = None
    average_if_in_stock: float = None
    category_position: int = None
    sku_first_date: str = None
    firstcommentdate: str = None
    picscount: int = None
    hasvideo: bool = None
    has3d: bool = None

class CategoryInfo(BaseModel):
    name: str
    period: str
    total_products: int
    total_revenue: float
    total_sales: int
    average_price: float
    average_rating: float
    average_purchase: float
    average_turnover_days: float

class CategoryMetrics(BaseModel):
    revenue_per_product: float
    sales_per_product: float
    products_with_sales_percentage: float
    fbs_percentage: float
    average_comments: float
    top_brands_count: int
    price_range_min: float
    price_range_max: float

class CategoryCharts(BaseModel):
    sales_graph: ChartData
    stocks_graph: ChartData
    price_graph: ChartData
    visibility_graph: ChartData

class CategoryRecommendations(BaseModel):
    insights: List[str]
    opportunities: List[str]
    threats: List[str]
    recommendations: List[str]
    market_trends: List[str]
    competitive_advantages: List[str]

class CategoryAnalysisResponse(BaseModel):
    category_info: CategoryInfo
    top_products: List[ProductDetail]
    all_products: List[ProductDetail]
    category_metrics: CategoryMetrics
    aggregated_charts: CategoryCharts
    ai_recommendations: CategoryRecommendations
    metadata: Dict[str, Any]

# === –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö ===

async def fetch_mpstats_category_data(category_path: str, date_from: str, date_to: str, fbs: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ MPStats API"""
    
    url = "https://mpstats.io/api/wb/get/category"
    headers = {
        'X-Mpstats-TOKEN': '68431d2ac72ea4.96910328a56006b24a55daf65db03835d5fe5b4d',
        'Content-Type': 'application/json'
    }
    params = {
        'd1': date_from,
        'd2': date_to,
        'path': category_path,
        'fbs': fbs
    }
    
    logger.info(f"üöÄ Starting category analysis for: {category_path}")
    logger.info(f"üöÄ Fetching category data for {category_path}: {url} with params {params}")
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers, params=params) as response:
            logger.info(f"üìä MPStats API category response: {response.status}")
            
            if response.status == 200:
                data = await response.json()
                logger.info(f"‚úÖ Successfully fetched category data: {len(data.get('data', []))} products")
                return data
            else:
                error_text = await response.text()
                logger.error(f"‚ùå Error fetching category data: {response.status} - {error_text}")
                raise HTTPException(status_code=response.status, detail=f"Failed to fetch category data: {error_text}")

def generate_dates_for_period(date_from: str, date_to: str, data_length: int = 30) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    
    try:
        start_date = datetime.fromisoformat(date_from)
        end_date = datetime.fromisoformat(date_to)
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ —á–µ–º –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        period_days = (end_date - start_date).days + 1
        actual_length = min(data_length, period_days, 30)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 30 –¥–Ω—è–º–∏
        
        dates = []
        for i in range(actual_length):
            current_date = end_date - timedelta(days=actual_length - 1 - i)
            dates.append(current_date.strftime("%Y-%m-%d"))
        
        return dates
    except Exception as e:
        logger.warning(f"Error generating dates: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        today = datetime.now()
        return [(today - timedelta(days=i)).strftime("%Y-%m-%d") for i in range(29, -1, -1)]

def process_category_info(category_path: str, date_from: str, date_to: str, products: List[Dict]) -> CategoryInfo:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    
    total_products = len(products)
    total_revenue = sum(product.get('revenue', 0) for product in products)
    total_sales = sum(product.get('sales', 0) for product in products)
    
    prices = [product.get('final_price', 0) for product in products if product.get('final_price', 0) > 0]
    average_price = statistics.mean(prices) if prices else 0
    
    ratings = [product.get('rating', 0) for product in products if product.get('rating', 0) > 0]
    average_rating = statistics.mean(ratings) if ratings else 0
    
    purchases = [product.get('purchase', 0) for product in products if product.get('purchase', 0) > 0]
    average_purchase = statistics.mean(purchases) if purchases else 0
    
    turnover_days = [product.get('turnover_days', 0) for product in products if product.get('turnover_days', 0) > 0]
    average_turnover_days = statistics.mean(turnover_days) if turnover_days else 0
    
    return CategoryInfo(
        name=category_path,
        period=f"{date_from} - {date_to}",
        total_products=total_products,
        total_revenue=total_revenue,
        total_sales=total_sales,
        average_price=round(average_price, 2),
        average_rating=round(average_rating, 2),
        average_purchase=round(average_purchase, 2),
        average_turnover_days=round(average_turnover_days, 1)
    )

def process_top_products(products: List[Dict], limit: int = 10) -> List[ProductDetail]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ"""
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—ã—Ä—É—á–∫–µ
    sorted_products = sorted(products, key=lambda x: x.get('revenue', 0), reverse=True)
    top_products = sorted_products[:limit]
    
    result = []
    for product in top_products:
        result.append(ProductDetail(
            id=product.get('id', 0),
            name=product.get('name', ''),
            brand=product.get('brand'),
            seller=product.get('seller'),
            final_price=product.get('final_price', 0),
            sales=product.get('sales', 0),
            revenue=product.get('revenue', 0),
            rating=product.get('rating', 0),
            comments=product.get('comments', 0),
            purchase=product.get('purchase', 0),
            balance=product.get('balance', 0),
            country=product.get('country'),
            gender=product.get('gender'),
            thumb_middle=product.get('thumb_middle'),
            url=product.get('url'),
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            basic_sale=product.get('basic_sale'),
            promo_sale=product.get('promo_sale'),
            client_sale=product.get('client_sale'),
            client_price=product.get('client_price'),
            start_price=product.get('start_price'),
            final_price_max=product.get('final_price_max'),
            final_price_min=product.get('final_price_min'),
            average_if_in_stock=product.get('average_if_in_stock'),
            category_position=product.get('category_position'),
            sku_first_date=product.get('sku_first_date'),
            firstcommentdate=product.get('firstcommentdate'),
            picscount=product.get('picscount'),
            hasvideo=product.get('hasvideo'),
            has3d=product.get('has3d')
        ))
    
    return result

def process_all_products(products: List[Dict]) -> List[ProductDetail]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã"""
    
    result = []
    for product in products:
        result.append(ProductDetail(
            id=product.get('id', 0),
            name=product.get('name', ''),
            brand=product.get('brand'),
            seller=product.get('seller'),
            final_price=product.get('final_price', 0),
            sales=product.get('sales', 0),
            revenue=product.get('revenue', 0),
            rating=product.get('rating', 0),
            comments=product.get('comments', 0),
            purchase=product.get('purchase', 0),
            balance=product.get('balance', 0),
            country=product.get('country'),
            gender=product.get('gender'),
            thumb_middle=product.get('thumb_middle'),
            url=product.get('url'),
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            basic_sale=product.get('basic_sale'),
            promo_sale=product.get('promo_sale'),
            client_sale=product.get('client_sale'),
            client_price=product.get('client_price'),
            start_price=product.get('start_price'),
            final_price_max=product.get('final_price_max'),
            final_price_min=product.get('final_price_min'),
            average_if_in_stock=product.get('average_if_in_stock'),
            category_position=product.get('category_position'),
            sku_first_date=product.get('sku_first_date'),
            firstcommentdate=product.get('firstcommentdate'),
            picscount=product.get('picscount'),
            hasvideo=product.get('hasvideo'),
            has3d=product.get('has3d')
        ))
    
    return result

def process_category_metrics(products: List[Dict]) -> CategoryMetrics:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    
    total_products = len(products)
    if total_products == 0:
        return CategoryMetrics(
            revenue_per_product=0,
            sales_per_product=0,
            products_with_sales_percentage=0,
            fbs_percentage=0,
            average_comments=0,
            top_brands_count=0,
            price_range_min=0,
            price_range_max=0
        )
    
    total_revenue = sum(product.get('revenue', 0) for product in products)
    total_sales = sum(product.get('sales', 0) for product in products)
    
    products_with_sales = len([p for p in products if p.get('sales', 0) > 0])
    products_with_sales_percentage = (products_with_sales / total_products) * 100
    
    fbs_products = len([p for p in products if p.get('fbs', False)])
    fbs_percentage = (fbs_products / total_products) * 100
    
    total_comments = sum(product.get('comments', 0) for product in products)
    average_comments = total_comments / total_products
    
    brands = set(product.get('brand', '') for product in products if product.get('brand'))
    top_brands_count = len(brands)
    
    prices = [product.get('final_price', 0) for product in products if product.get('final_price', 0) > 0]
    price_range_min = min(prices) if prices else 0
    price_range_max = max(prices) if prices else 0
    
    return CategoryMetrics(
        revenue_per_product=round(total_revenue / total_products, 2),
        sales_per_product=round(total_sales / total_products, 2),
        products_with_sales_percentage=round(products_with_sales_percentage, 1),
        fbs_percentage=round(fbs_percentage, 1),
        average_comments=round(average_comments, 1),
        top_brands_count=top_brands_count,
        price_range_min=price_range_min,
        price_range_max=price_range_max
    )

def process_aggregated_charts(products: List[Dict], date_from: str, date_to: str) -> CategoryCharts:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    if not products:
        empty_dates = generate_dates_for_period(date_from, date_to, 30)
        empty_values = [0.0] * len(empty_dates)
        return CategoryCharts(
            sales_graph=ChartData(dates=empty_dates, values=empty_values),
            stocks_graph=ChartData(dates=empty_dates, values=empty_values),
            price_graph=ChartData(dates=empty_dates, values=empty_values),
            visibility_graph=ChartData(dates=empty_dates, values=empty_values)
        )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –≥—Ä–∞—Ñ–∏–∫–æ–≤
    max_length = 0
    for product in products:
        for graph_type in ["graph", "stocks_graph", "price_graph", "product_visibility_graph"]:
            graph_data = product.get(graph_type, [])
            if isinstance(graph_data, list):
                max_length = max(max_length, len(graph_data))
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ
    if max_length == 0:
        dates = generate_dates_for_period(date_from, date_to, 30)
        values = [0.0] * len(dates)
        return CategoryCharts(
            sales_graph=ChartData(dates=dates, values=values),
            stocks_graph=ChartData(dates=dates, values=values),
            price_graph=ChartData(dates=dates, values=values),
            visibility_graph=ChartData(dates=dates, values=values)
        )
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≥—Ä–∞—Ñ–∏–∫–∞ 30 –¥–Ω—è–º–∏
    max_length = min(max_length, 30)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    dates = generate_dates_for_period(date_from, date_to, max_length)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã
    aggregated_sales = [0.0] * max_length
    aggregated_stocks = [0.0] * max_length
    aggregated_prices = []
    aggregated_visibility = [0.0] * max_length
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
    for i in range(max_length):
        sales_sum = 0.0
        stocks_sum = 0.0
        prices_for_avg = []
        visibility_sum = 0.0
        
        for product in products:
            # –ü—Ä–æ–¥–∞–∂–∏ - —Å—É–º–º–∏—Ä—É–µ–º (graph - —ç—Ç–æ –º–∞—Å—Å–∏–≤)
            sales_graph = product.get("graph", [])
            if isinstance(sales_graph, list) and i < len(sales_graph):
                sales_val = sales_graph[i] or 0
                sales_sum += float(sales_val)
            
            # –û—Å—Ç–∞—Ç–∫–∏ - —Å—É–º–º–∏—Ä—É–µ–º (stocks_graph - —ç—Ç–æ –º–∞—Å—Å–∏–≤)
            stocks_graph = product.get("stocks_graph", [])
            if isinstance(stocks_graph, list) and i < len(stocks_graph):
                stocks_val = stocks_graph[i] or 0
                stocks_sum += float(stocks_val)
            
            # –¶–µ–Ω—ã - –±–µ—Ä–µ–º –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (price_graph - —ç—Ç–æ –º–∞—Å—Å–∏–≤)
            price_graph = product.get("price_graph", [])
            if isinstance(price_graph, list) and i < len(price_graph):
                price = price_graph[i] or 0
                if price > 0:
                    prices_for_avg.append(float(price))
            
            # –í–∏–¥–∏–º–æ—Å—Ç—å - —Å—É–º–º–∏—Ä—É–µ–º (product_visibility_graph - —ç—Ç–æ –º–∞—Å—Å–∏–≤)
            visibility_graph = product.get("product_visibility_graph", [])
            if isinstance(visibility_graph, list) and i < len(visibility_graph):
                visibility_val = visibility_graph[i] or 0
                visibility_sum += float(visibility_val)
        
        aggregated_sales[i] = sales_sum
        aggregated_stocks[i] = stocks_sum
        aggregated_visibility[i] = visibility_sum
        
        # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
        avg_price = statistics.mean(prices_for_avg) if prices_for_avg else 0.0
        aggregated_prices.append(round(avg_price, 2))
    
    return CategoryCharts(
        sales_graph=ChartData(dates=dates, values=aggregated_sales),
        stocks_graph=ChartData(dates=dates, values=aggregated_stocks),
        price_graph=ChartData(dates=dates, values=aggregated_prices),
        visibility_graph=ChartData(dates=dates, values=aggregated_visibility)
    )

async def generate_ai_recommendations(category_info: CategoryInfo, products: List[Dict], category_metrics: CategoryMetrics) -> CategoryRecommendations:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI"""
    
    try:
        from openai import OpenAI
        
        client = OpenAI(api_key="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")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
        context = f"""
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_info.name}
–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {category_info.period}
–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {category_info.total_products}
–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {category_info.total_revenue:,.0f} ‚ÇΩ
–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {category_info.total_sales:,} —à—Ç.
–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {category_info.average_price:,.0f} ‚ÇΩ
–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {category_info.average_rating:.1f}/5
–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞: {category_info.average_purchase:.1f}%
–î–Ω–∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç–∏: {category_info.average_turnover_days:.1f}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
- –í—ã—Ä—É—á–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {category_metrics.revenue_per_product:,.0f} ‚ÇΩ
- –ü—Ä–æ–¥–∞–∂ –Ω–∞ —Ç–æ–≤–∞—Ä: {category_metrics.sales_per_product:.1f}
- –¢–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏: {category_metrics.products_with_sales_percentage:.1f}%
- FBS —Ç–æ–≤–∞—Ä–æ–≤: {category_metrics.fbs_percentage:.1f}%
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–µ–Ω–¥–æ–≤: {category_metrics.top_brands_count}
- –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {category_metrics.price_range_min:,.0f} - {category_metrics.price_range_max:,.0f} ‚ÇΩ

–¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ:
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø —Ç–æ–≤–∞—Ä–∞—Ö
        top_5_products = sorted(products, key=lambda x: x.get('revenue', 0), reverse=True)[:5]
        for i, product in enumerate(top_5_products, 1):
            context += f"\n{i}. {product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]}..."
            context += f"\n   –ë—Ä–µ–Ω–¥: {product.get('brand', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            context += f"\n   –í—ã—Ä—É—á–∫–∞: {product.get('revenue', 0):,.0f} ‚ÇΩ"
            context += f"\n   –ü—Ä–æ–¥–∞–∂–∏: {product.get('sales', 0):,} —à—Ç."
            context += f"\n   –†–µ–π—Ç–∏–Ω–≥: {product.get('rating', 0):.1f}/5"

        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI —Å –Ω–æ–≤—ã–º API
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏ e-commerce –∞–Ω–∞–ª–∏—Ç–∏–∫–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Wildberries –∏ –¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                },
                {
                    "role": "user",
                    "content": f"{context}\n\n–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:\n1. –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã (3-4 –ø—É–Ω–∫—Ç–∞)\n2. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ (3-4 –ø—É–Ω–∫—Ç–∞)\n3. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É–≥—Ä–æ–∑—ã (2-3 –ø—É–Ω–∫—Ç–∞)\n4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (4-5 –ø—É–Ω–∫—Ç–æ–≤)\n5. –†—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã (2-3 –ø—É–Ω–∫—Ç–∞)\n6. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ (2-3 –ø—É–Ω–∫—Ç–∞)"
                }
            ],
            max_tokens=1000,
            temperature=0.7
        )
        
        ai_text = response.choices[0].message.content
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç AI –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º
        return parse_ai_recommendations(ai_text)
        
    except Exception as e:
        logger.warning(f"Failed to generate AI recommendations: {e}")
        # Fallback –∫ –±–∞–∑–æ–≤—ã–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
        return generate_fallback_recommendations(category_info, category_metrics)

def parse_ai_recommendations(ai_text: str) -> CategoryRecommendations:
    """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    
    try:
        sections = {
            "insights": [],
            "opportunities": [],
            "threats": [],
            "recommendations": [],
            "market_trends": [],
            "competitive_advantages": []
        }
        
        current_section = None
        
        for line in ai_text.split('\n'):
            line = line.strip()
            if not line:
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏—é
            line_lower = line.lower()
            if any(word in line_lower for word in ['–∏–Ω—Å–∞–π—Ç', 'insight', '–∫–ª—é—á–µ–≤—ã–µ']):
                current_section = "insights"
            elif any(word in line_lower for word in ['–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç', 'opportunity', '—Ä–æ—Å—Ç']):
                current_section = "opportunities"
            elif any(word in line_lower for word in ['—É–≥—Ä–æ–∑', 'threat', '—Ä–∏—Å–∫']):
                current_section = "threats"
            elif any(word in line_lower for word in ['—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏', 'recommend']):
                current_section = "recommendations"
            elif any(word in line_lower for word in ['—Ç—Ä–µ–Ω–¥', 'trend']):
                current_section = "market_trends"
            elif any(word in line_lower for word in ['–ø—Ä–µ–∏–º—É—â–µ—Å—Ç', 'advantage']):
                current_section = "competitive_advantages"
            elif line.startswith(('‚Ä¢', '-', '*', '1.', '2.', '3.', '4.', '5.')) and current_section:
                # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞
                clean_line = line.lstrip('‚Ä¢-*123456789. ')
                if clean_line:
                    sections[current_section].append(clean_line)
        
        return CategoryRecommendations(**sections)
        
    except Exception as e:
        logger.warning(f"Failed to parse AI recommendations: {e}")
        return CategoryRecommendations(
            insights=["–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI"],
            opportunities=[],
            threats=[],
            recommendations=[],
            market_trends=[],
            competitive_advantages=[]
        )

def generate_fallback_recommendations(category_info: CategoryInfo, category_metrics: CategoryMetrics) -> CategoryRecommendations:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI"""
    
    insights = []
    opportunities = []
    threats = []
    recommendations = []
    market_trends = []
    competitive_advantages = []
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
    if category_info.average_rating >= 4.5:
        insights.append(f"–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ ({category_info.average_rating:.1f}/5) —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    elif category_info.average_rating <= 3.5:
        opportunities.append("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–µ–ª–∏—Ç—å—Å—è –∫–∞—á–µ—Å—Ç–≤–æ–º - —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–≤—ã—Å–æ–∫–∏–π")
    
    if category_info.average_purchase >= 70:
        insights.append(f"–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞ ({category_info.average_purchase:.1f}%) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å")
    elif category_info.average_purchase <= 40:
        threats.append("–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –∏–ª–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º")
    
    if category_metrics.products_with_sales_percentage <= 50:
        opportunities.append("–ú–Ω–æ–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –ø—Ä–æ–¥–∞—é—Ç—Å—è - –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –∏—Ö –¥–æ–ª—é —Ä—ã–Ω–∫–∞")
        
    if category_metrics.fbs_percentage <= 30:
        opportunities.append("–ù–∏–∑–∫–∞—è –¥–æ–ª—è FBS —Ç–æ–≤–∞—Ä–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—É—é –¥–æ—Å—Ç–∞–≤–∫—É")
    
    if category_info.average_turnover_days <= 10:
        competitive_advantages.append("–ë—ã—Å—Ç—Ä–∞—è –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    elif category_info.average_turnover_days >= 30:
        threats.append("–ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∑–∞—Ç–æ–≤–∞—Ä–∏–≤–∞–Ω–∏—é")
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations.extend([
        "–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ç–æ–ø —Ç–æ–≤–∞—Ä—ã –∏ –∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã –ª–∏–¥–µ—Ä–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π",
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞",
        "–ò–∑—É—á–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"
    ])
    
    market_trends.extend([
        "–†–æ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∏—à–∞—Ö",
        "–í–∞–∂–Ω–æ—Å—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
    ])
    
    return CategoryRecommendations(
        insights=insights,
        opportunities=opportunities,
        threats=threats,
        recommendations=recommendations,
        market_trends=market_trends,
        competitive_advantages=competitive_advantages
    )

@router.post("/category-analysis", response_model=CategoryAnalysisResponse)
async def analyze_category(request: CategoryAnalysisRequest):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    
    try:
        logger.info(f"üéØ Category analysis request: {request.category_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MPStats API
        external_data = await fetch_mpstats_category_data(
            request.category_path, 
            request.date_from, 
            request.date_to, 
            request.fbs
        )
        
        products = external_data.get('data', [])
        
        if not products:
            logger.warning(f"‚ö†Ô∏è No products found for category: {request.category_path}")
            raise HTTPException(status_code=404, detail=f"No products found for category '{request.category_path}' in the specified period.")
        
        logger.info(f"üìä Processing {len(products)} products for category analysis")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        category_info = process_category_info(request.category_path, request.date_from, request.date_to, products)
        top_products = process_top_products(products, 10)
        all_products = process_all_products(products)
        category_metrics = process_category_metrics(products)
        aggregated_charts = process_aggregated_charts(products, request.date_from, request.date_to)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        ai_recommendations = await generate_ai_recommendations(category_info, products, category_metrics)
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "processing_info": {
                "data_source": "Wild Analytics Intelligence",
                "processing_timestamp": datetime.now().isoformat(),
                "total_products_found": len(products),
                "period": f"{request.date_from} to {request.date_to}",
                "fbs_filter": request.fbs
            }
        }
        
        logger.info(f"‚úÖ Category analysis completed successfully for: {request.category_path}")
        
        return CategoryAnalysisResponse(
            category_info=category_info,
            top_products=top_products,
            all_products=all_products,
            category_metrics=category_metrics,
            aggregated_charts=aggregated_charts,
            ai_recommendations=ai_recommendations,
            metadata=metadata
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error in category analysis: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}") 