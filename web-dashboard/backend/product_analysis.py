import logging
import aiohttp
import json
from typing import Dict, Optional, List, Any
from datetime import datetime, timedelta
import random
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
from io import BytesIO
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# API –∫–ª—é—á–∏
MPSTATS_API_KEY = "68431d2ac72ea4.96910328a56006b24a55daf65db03835d5fe5b4d"

async def get_product_info(article: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ Wildberries API."""
    try:
        async with aiohttp.ClientSession() as session:
            # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
            card_url = f"https://card.wb.ru/cards/v1/detail?appType=1&curr=rub&dest=-1257786&spp=30&nm={article}"
            
            async with session.get(card_url) as response:
                if response.status != 200:
                    logger.error(f"Card API request failed with status: {response.status}")
                    return None
                
                data = await response.json()
                if not data.get("data") or not data["data"].get("products"):
                    logger.error("No products found in card API response")
                    return None
                
                product = data["data"]["products"][0]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                name = product.get("name", "")
                brand = product.get("brand", "")
                
                # –¶–µ–Ω—ã
                price_current = product.get("salePriceU", 0) / 100
                price_original = product.get("priceU", 0) / 100
                discount = round((1 - price_current / price_original) * 100) if price_original > 0 else 0
                
                # –†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã
                rating = product.get("rating", 0)
                feedbacks = product.get("feedbacks", 0)
                
                # –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
                total_stock = 0
                stock_by_size = {}
                
                sizes = product.get("sizes", [])
                for size in sizes:
                    size_name = size.get("name", "")
                    stocks = size.get("stocks", [])
                    size_stock = sum(stock.get("qty", 0) for stock in stocks)
                    
                    total_stock += size_stock
                    if size_stock > 0:
                        stock_by_size[size_name] = size_stock
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
                sales_url = f"https://product-order-qnt.wildberries.ru/by-nm/?nm={article}"
                async with session.get(sales_url) as sales_response:
                    sales_data = {}
                    if sales_response.status == 200:
                        sales_json = await sales_response.json()
                        if sales_json and len(sales_json) > 0:
                            sales_data = sales_json[0]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                return {
                    "name": name,
                    "brand": brand,
                    "article": article,
                    "price": {
                        "current": price_current,
                        "original": price_original,
                        "discount": discount
                    },
                    "rating": rating,
                    "feedbacks": feedbacks,
                    "stocks": {
                        "total": total_stock,
                        "by_size": stock_by_size
                    },
                    "sales": {
                        "today": sales_data.get("qnt", 0),
                        "total": sales_data.get("qnt", 0),
                        "revenue": {
                            "daily": price_current * sales_data.get("qnt", 0),
                            "weekly": price_current * sales_data.get("qnt", 0) * 7,
                            "monthly": price_current * sales_data.get("qnt", 0) * 30
                        }
                    }
                }
                
    except Exception as e:
        logger.error(f"Error fetching product info: {str(e)}")
        return None

async def get_mpstats_data(article: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ MPSTATS API."""
    try:
        headers = {
            "X-Mpstats-TOKEN": MPSTATS_API_KEY,
            "Content-Type": "application/json"
        }
        
        async with aiohttp.ClientSession() as session:
            url = f"https://mpstats.io/api/wb/get/item/{article}"
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    return data
                else:
                    logger.error(f"MPSTATS API error: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"Error fetching MPSTATS data: {str(e)}")
        return None

def generate_sales_chart(sales_data: List[Dict[str, Any]]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂."""
    try:
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(sales_data)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 6))
        sns.lineplot(data=df, x='date', y='sales')
        plt.title('–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–ü—Ä–æ–¥–∞–∂–∏')
        plt.xticks(rotation=45)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ base64
        buffer = BytesIO()
        plt.savefig(buffer, format='png', bbox_inches='tight')
        buffer.seek(0)
        image_png = buffer.getvalue()
        buffer.close()
        plt.close()
        
        return base64.b64encode(image_png).decode()
    except Exception as e:
        logger.error(f"Error generating sales chart: {str(e)}")
        return None

def format_product_analysis(product_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        if not product_data:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ"

        message = [
            f"üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞: {product_data['name']}",
            f"–ê—Ä—Ç–∏–∫—É–ª: {product_data['article']}",
            f"–ë—Ä–µ–Ω–¥: {product_data['brand']}",
            "",
            "üí∞ –¶–µ–Ω—ã:",
            f"‚Ä¢ –¢–µ–∫—É—â–∞—è: {product_data['price']['current']:,.2f} ‚ÇΩ",
            f"‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è: {product_data['price']['original']:,.2f} ‚ÇΩ",
            f"‚Ä¢ –°–∫–∏–¥–∫–∞: {product_data['price']['discount']}%",
            "",
            "‚≠ê –†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã:",
            f"‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {product_data['rating']}/5",
            f"‚Ä¢ –û—Ç–∑—ã–≤–æ–≤: {product_data['feedbacks']}",
            "",
            "üì¶ –û—Å—Ç–∞—Ç–∫–∏:",
            f"‚Ä¢ –í—Å–µ–≥–æ: {product_data['stocks']['total']} —à—Ç.",
        ]

        if product_data['stocks']['by_size']:
            message.append("‚Ä¢ –ü–æ —Ä–∞–∑–º–µ—Ä–∞–º:")
            for size, qty in product_data['stocks']['by_size'].items():
                message.append(f"  - {size}: {qty} —à—Ç.")

        message.extend([
            "",
            "üìà –ü—Ä–æ–¥–∞–∂–∏:",
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {product_data['sales']['today']} —à—Ç.",
            f"‚Ä¢ –í—Å–µ–≥–æ: {product_data['sales']['total']} —à—Ç.",
            "",
            "üíµ –í—ã—Ä—É—á–∫–∞:",
            f"‚Ä¢ –ó–∞ –¥–µ–Ω—å: {product_data['sales']['revenue']['daily']:,.2f} ‚ÇΩ",
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {product_data['sales']['revenue']['weekly']:,.2f} ‚ÇΩ",
            f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {product_data['sales']['revenue']['monthly']:,.2f} ‚ÇΩ"
        ])

        return "\n".join(message)
    except Exception as e:
        logger.error(f"Error formatting product analysis: {str(e)}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ"
