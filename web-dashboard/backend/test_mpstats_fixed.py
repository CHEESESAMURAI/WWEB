"""
üß™ Unit —Ç–µ—Å—Ç—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ MPStats API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö endpoints
"""

import pytest
import asyncio
import logging
from datetime import datetime
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã –∏ –¥–∞–Ω–Ω—ã–µ
TEST_ARTICLES = [
    "446467818",  # –ê—Ä—Ç–∏–∫—É–ª –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    "275191790",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª
    "123456789"   # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª
]

TEST_BRANDS = [
    "Nike",
    "Adidas",
    "H&M",
    "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥"
]

TEST_CATEGORIES = [
    "–ñ–µ–Ω—â–∏–Ω–∞–º/–û–¥–µ–∂–¥–∞",
    "–ú—É–∂—á–∏–Ω–∞–º/–û–±—É–≤—å",
    "–î–µ—Ç—è–º/–ò–≥—Ä—É—à–∫–∏"
]

class TestFixedMPStatsAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ MPStats API"""
    
    @pytest.fixture(autouse=True)
    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.test_results = {}
        
    async def test_product_data_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        logger.info("üß™ Testing product data endpoints...")
        
        try:
            from wb_api_fixed import get_mpstats_product_data_fixed
            
            for article in TEST_ARTICLES:
                logger.info(f"Testing article: {article}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                data = await get_mpstats_product_data_fixed(article)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                assert isinstance(data, dict), f"Response should be dict for {article}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = [
                    'raw_data', 'daily_sales', 'daily_revenue', 'daily_profit',
                    'total_sales', 'total_revenue', 'purchase_rate', 
                    'conversion_rate', 'market_share'
                ]
                
                for field in required_fields:
                    assert field in data, f"Missing field {field} for {article}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                assert isinstance(data['raw_data'], list), f"raw_data should be list for {article}"
                assert isinstance(data['daily_sales'], int), f"daily_sales should be int for {article}"
                assert isinstance(data['daily_revenue'], (int, float)), f"daily_revenue should be numeric for {article}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
                assert data['daily_sales'] >= 0, f"daily_sales should be non-negative for {article}"
                assert data['daily_revenue'] >= 0, f"daily_revenue should be non-negative for {article}"
                assert 0 <= data['purchase_rate'] <= 100, f"purchase_rate should be 0-100 for {article}"
                assert 0 <= data['conversion_rate'] <= 100, f"conversion_rate should be 0-100 for {article}"
                
                self.test_results[f"product_{article}"] = {
                    "success": True,
                    "has_data": bool(data.get('raw_data')),
                    "daily_sales": data.get('daily_sales', 0),
                    "daily_revenue": data.get('daily_revenue', 0)
                }
                
                logger.info(f"‚úÖ Product test passed for {article}: {data['daily_sales']} sales/day")
                
        except Exception as e:
            logger.error(f"‚ùå Product data test failed: {e}")
            pytest.fail(f"Product data test failed: {e}")
    
    async def test_brand_data_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤"""
        logger.info("üß™ Testing brand data endpoints...")
        
        try:
            from wb_api_fixed import get_brand_info_mpstats_fixed
            
            for brand in TEST_BRANDS:
                logger.info(f"Testing brand: {brand}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                data = await get_brand_info_mpstats_fixed(brand)
                
                if data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    assert isinstance(data, dict), f"Response should be dict for {brand}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    required_fields = ['brand_name', 'total_items', 'items', 'timestamp']
                    
                    for field in required_fields:
                        assert field in data, f"Missing field {field} for {brand}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                    assert isinstance(data['items'], list), f"items should be list for {brand}"
                    assert isinstance(data['total_items'], int), f"total_items should be int for {brand}"
                    assert data['total_items'] >= 0, f"total_items should be non-negative for {brand}"
                    
                    self.test_results[f"brand_{brand}"] = {
                        "success": True,
                        "total_items": data.get('total_items', 0)
                    }
                    
                    logger.info(f"‚úÖ Brand test passed for {brand}: {data['total_items']} items")
                else:
                    self.test_results[f"brand_{brand}"] = {
                        "success": False,
                        "message": "No data returned"
                    }
                    logger.warning(f"‚ö†Ô∏è No data for brand {brand}")
                
        except Exception as e:
            logger.error(f"‚ùå Brand data test failed: {e}")
            pytest.fail(f"Brand data test failed: {e}")
    
    async def test_category_data_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        logger.info("üß™ Testing category data endpoints...")
        
        try:
            from wb_api_fixed import get_category_data_mpstats_fixed
            
            for category in TEST_CATEGORIES:
                logger.info(f"Testing category: {category}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                data = await get_category_data_mpstats_fixed(category)
                
                if data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    assert isinstance(data, dict), f"Response should be dict for {category}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    required_fields = ['category_path', 'summary', 'items', 'timestamp']
                    
                    for field in required_fields:
                        assert field in data, f"Missing field {field} for {category}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                    assert isinstance(data['items'], list), f"items should be list for {category}"
                    
                    self.test_results[f"category_{category}"] = {
                        "success": True,
                        "items_count": len(data.get('items', []))
                    }
                    
                    logger.info(f"‚úÖ Category test passed for {category}: {len(data['items'])} items")
                else:
                    self.test_results[f"category_{category}"] = {
                        "success": False,
                        "message": "No data returned"
                    }
                    logger.warning(f"‚ö†Ô∏è No data for category {category}")
                
        except Exception as e:
            logger.error(f"‚ùå Category data test failed: {e}")
            pytest.fail(f"Category data test failed: {e}")
    
    async def test_comprehensive_product_info(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
        logger.info("üß™ Testing comprehensive product info...")
        
        try:
            from wb_api_fixed import get_wb_product_info_fixed
            
            test_article = TEST_ARTICLES[0]  # –ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            data = await get_wb_product_info_fixed(test_article)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            assert isinstance(data, dict), "Response should be dict"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = [
                'name', 'brand', 'article', 'price', 'rating', 
                'feedbacks', 'stocks', 'sales'
            ]
            
            for field in required_fields:
                assert field in data, f"Missing field {field}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É price
            price = data['price']
            assert 'current' in price, "Missing current price"
            assert 'original' in price, "Missing original price"
            assert 'discount' in price, "Missing discount"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É sales
            sales = data['sales']
            assert 'today' in sales, "Missing today sales"
            assert 'total' in sales, "Missing total sales"
            assert 'revenue' in sales, "Missing revenue data"
            assert 'profit' in sales, "Missing profit data"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            assert isinstance(data['price']['current'], (int, float)), "Price should be numeric"
            assert isinstance(data['sales']['today'], int), "Today sales should be int"
            assert isinstance(data['rating'], (int, float)), "Rating should be numeric"
            
            self.test_results['comprehensive_product'] = {
                "success": True,
                "has_price": bool(data['price']['current']),
                "has_sales": bool(data['sales']['today']),
                "has_stocks": bool(data['stocks']['total'])
            }
            
            logger.info(f"‚úÖ Comprehensive product test passed for {test_article}")
            
        except Exception as e:
            logger.error(f"‚ùå Comprehensive product test failed: {e}")
            pytest.fail(f"Comprehensive product test failed: {e}")
    
    async def test_error_handling(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
        logger.info("üß™ Testing error handling...")
        
        try:
            from wb_api_fixed import get_mpstats_product_data_fixed
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º
            invalid_articles = ["", "invalid", "0", "999999999999"]
            
            for article in invalid_articles:
                data = await get_mpstats_product_data_fixed(article)
                
                # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –∞ –Ω–µ None
                assert isinstance(data, dict), f"Should return dict for invalid article {article}"
                assert 'daily_sales' in data, f"Should have daily_sales field for {article}"
                
            logger.info("‚úÖ Error handling test passed")
            
        except Exception as e:
            logger.error(f"‚ùå Error handling test failed: {e}")
            pytest.fail(f"Error handling test failed: {e}")
    
    def test_api_request_structure(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤)"""
        logger.info("üß™ Testing API request structure...")
        
        try:
            from mpstats_api_fixed import MPStatsAPI
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
            api = MPStatsAPI()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = api._get_headers()
            
            assert "X-Mpstats-TOKEN" in headers, "Missing MPStats token header"
            assert "Content-Type" in headers, "Missing Content-Type header"
            assert "Accept" in headers, "Missing Accept header"
            assert "User-Agent" in headers, "Missing User-Agent header"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            assert len(headers["X-Mpstats-TOKEN"]) > 20, "Token seems too short"
            assert headers["Content-Type"] == "application/json", "Wrong Content-Type"
            assert headers["Accept"] == "application/json", "Wrong Accept type"
            
            logger.info("‚úÖ API request structure test passed")
            
        except Exception as e:
            logger.error(f"‚ùå API request structure test failed: {e}")
            pytest.fail(f"API request structure test failed: {e}")
    
    def generate_test_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üìã Generating test report...")
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "total_tests": len(self.test_results),
            "passed_tests": sum(1 for result in self.test_results.values() if result.get("success", False)),
            "failed_tests": sum(1 for result in self.test_results.values() if not result.get("success", True)),
            "details": self.test_results
        }
        
        logger.info(f"üìä Test Report Summary:")
        logger.info(f"  Total tests: {report['total_tests']}")
        logger.info(f"  Passed: {report['passed_tests']}")
        logger.info(f"  Failed: {report['failed_tests']}")
        logger.info(f"  Success rate: {(report['passed_tests']/report['total_tests']*100):.1f}%")
        
        return report

# =================================================================
# üèÉ‚Äç‚ôÇÔ∏è –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–û–í
# =================================================================

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    logger.info("üöÄ Starting MPStats API tests...")
    
    tester = TestFixedMPStatsAPI()
    tester.setup()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        await tester.test_product_data_endpoints()
        await tester.test_brand_data_endpoints()
        await tester.test_category_data_endpoints()
        await tester.test_comprehensive_product_info()
        await tester.test_error_handling()
        tester.test_api_request_structure()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = tester.generate_test_report()
        
        logger.info("‚úÖ All tests completed!")
        return report
        
    except Exception as e:
        logger.error(f"‚ùå Test suite failed: {e}")
        return {"error": str(e), "timestamp": datetime.now().isoformat()}

def run_quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    async def quick_test():
        logger.info("‚ö° Running quick test...")
        
        try:
            from wb_api_fixed import get_mpstats_product_data_fixed
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª
            test_article = "446467818"
            data = await get_mpstats_product_data_fixed(test_article)
            
            success = bool(data and isinstance(data, dict))
            
            logger.info(f"Quick test result: {'‚úÖ PASSED' if success else '‚ùå FAILED'}")
            
            if success:
                logger.info(f"  Daily sales: {data.get('daily_sales', 0)}")
                logger.info(f"  Daily revenue: {data.get('daily_revenue', 0):.2f}")
                logger.info(f"  Has raw data: {bool(data.get('raw_data'))}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Quick test failed: {e}")
            return False
    
    return asyncio.run(quick_test())

# =================================================================
# üß™ PYTEST –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
# =================================================================

@pytest.mark.asyncio
async def test_mpstats_product_endpoints():
    """Pytest —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö endpoints"""
    tester = TestFixedMPStatsAPI()
    await tester.test_product_data_endpoints()

@pytest.mark.asyncio
async def test_mpstats_brand_endpoints():
    """Pytest —Ç–µ—Å—Ç –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤—ã—Ö endpoints"""
    tester = TestFixedMPStatsAPI()
    await tester.test_brand_data_endpoints()

@pytest.mark.asyncio
async def test_mpstats_comprehensive():
    """Pytest —Ç–µ—Å—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    tester = TestFixedMPStatsAPI()
    await tester.test_comprehensive_product_info()

def test_mpstats_api_structure():
    """Pytest —Ç–µ—Å—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API"""
    tester = TestFixedMPStatsAPI()
    tester.test_api_request_structure()

# =================================================================
# üöÄ –¢–û–ß–ö–ê –í–•–û–î–ê
# =================================================================

if __name__ == "__main__":
    # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "quick":
        # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
        success = run_quick_test()
        sys.exit(0 if success else 1)
    else:
        # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
        report = asyncio.run(run_all_tests())
        
        if "error" in report:
            sys.exit(1)
        elif report["failed_tests"] > 0:
            sys.exit(1)
        else:
            sys.exit(0) 