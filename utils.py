import re
import json
import sqlite3
import requests
from datetime import datetime, timedelta
import os
from typing import Dict, List, Optional, Tuple
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SERPER_API_KEY = "8ba851ed7ae1e6a655102bea15d73fdb39cdac79"
ADMIN_ID = 1659228199

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def extract_site(block: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    m = re.search(r'–°–∞–π—Ç:\s*([^\n]+)', block, re.IGNORECASE)
    if m:
        site = m.group(1).strip()
        return site.replace('\\', '')
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def compute_additional_metrics(
    likes: int,
    views: int,
    approx_clients: int,
    revenue: float,
    growth_percent: float,
    price: float = 500.0
) -> Dict:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    # –†–µ–π—Ç–∏–Ω–≥ –±–ª–æ–≥–µ—Ä–∞ (1-5)
    base_score = (likes * 0.1) + (revenue * 0.01) + growth_percent
    base_score = min(base_score, 100)

    if base_score < 20:
        rating = 1
    elif base_score < 40:
        rating = 2
    elif base_score < 60:
        rating = 3
    elif base_score < 80:
        rating = 4
    else:
        rating = 5

    # –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 3 –¥–Ω—è
    three_day_orders = int(0.27 * (likes + views))
    three_day_growth_rub = three_day_orders * price
    avg_check = price
    total_orders = approx_clients + 1

    return {
        "rating": rating,
        "three_day_orders": three_day_orders,
        "three_day_growth_rub": three_day_growth_rub,
        "avg_check": avg_check,
        "total_orders": total_orders
    }

def format_site_results_from_items(items: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    lines = []
    for item in items:
        title = item.get("title", "–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        link = item.get("link", "")
        snippet = item.get("snippet", "")

        likes, views = extract_likes_views(snippet)
        approx_clients, approx_revenue, growth = estimate_impact(likes, views)
        price = 500.0  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ item

        metrics = compute_additional_metrics(
            likes=likes,
            views=views,
            approx_clients=approx_clients,
            revenue=approx_revenue,
            growth_percent=growth,
            price=price
        )

        clickable_title = f"[{escape_markdown(title)}]({link})" if link else escape_markdown(title)
        domain = re.sub(r'^https?://(www\.)?', '', link).split('/')[0] if link else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        result_text = (
            f"{clickable_title}\n"
            f"üåê –°–∞–π—Ç: {domain}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –±–ª–æ–≥–µ—Ä–∞: {metrics['rating']}\n"
            f"üìà –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 3 –¥–Ω—è: {metrics['three_day_orders']} —à—Ç "
            f"({(metrics['three_day_orders']*100)//(likes+views+1)}%)\n"
            f"üí∞ –ü—Ä–∏—Ä–æ—Å—Ç –≤ —Ä—É–±–ª—è—Ö: {int(metrics['three_day_growth_rub'])}‚ÇΩ\n"
            f"üì¶ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {int(metrics['avg_check'])}‚ÇΩ\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {metrics['total_orders']} —à—Ç\n"
            f"‚Äî\n"
            f"üëç –õ–∞–π–∫–∏: {likes}, üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}\n"
            f"üë• –ü—Ä–∏–º–µ—Ä–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {approx_clients}, –í—ã—Ä—É—á–∫–∞ ~ {int(approx_revenue)}‚ÇΩ\n"
            f"üìà –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ ~ {growth:.1f}%"
        )
        lines.append(result_text)

    return "\n\n".join(lines)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    cur.execute('''
        CREATE TABLE IF NOT EXISTS tracked_articles (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            article TEXT,
            added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance REAL DEFAULT 0,
            subscription_until TEXT DEFAULT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂
    cur.execute('''
        CREATE TABLE IF NOT EXISTS sales_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            article TEXT,
            sales_count INTEGER,
            date DATE,
            UNIQUE(article, date)
        )
    ''')
    
    conn.commit()
    conn.close()

def get_user_info(user_id: int) -> Tuple[float, Optional[str]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if user_id == ADMIN_ID:
        return 777777, None
        
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute('SELECT balance, subscription_until FROM users WHERE user_id = ?', (user_id,))
    result = cur.fetchone()
    conn.close()
    
    if result:
        return result
    return 0, None

def update_user_balance(user_id: int, new_balance: float):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute('''
        INSERT INTO users (user_id, balance)
        VALUES (?, ?)
        ON CONFLICT(user_id) DO UPDATE SET balance = ?
    ''', (user_id, new_balance, new_balance))
    conn.commit()
    conn.close()

def update_user_subscription(user_id: int, new_date_str: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute('''
        INSERT INTO users (user_id, subscription_until)
        VALUES (?, ?)
        ON CONFLICT(user_id) DO UPDATE SET subscription_until = ?
    ''', (user_id, new_date_str, new_date_str))
    conn.commit()
    conn.close()

def user_has_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    if user_id == ADMIN_ID:
        return True
        
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute('SELECT subscription_until FROM users WHERE user_id = ?', (user_id,))
    result = cur.fetchone()
    conn.close()
    
    if not result or not result[0]:
        return False
        
    subscription_until = datetime.strptime(result[0], '%Y-%m-%d')
    return subscription_until > datetime.now()

def add_article(user_id: int, article: str) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"""
    try:
        conn = sqlite3.connect('tracked_articles.db')
        cur = conn.cursor()
        cur.execute('''
            INSERT INTO tracked_articles (user_id, article)
            VALUES (?, ?)
        ''', (user_id, article))
        conn.commit()
        conn.close()
        return True
    except sqlite3.IntegrityError:
        return False

def remove_article(user_id: int, article: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute('''
        DELETE FROM tracked_articles
        WHERE user_id = ? AND article = ?
    ''', (user_id, article))
    conn.commit()
    conn.close()

def list_articles(user_id: int) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute('SELECT article FROM tracked_articles WHERE user_id = ?', (user_id,))
    articles = [row[0] for row in cur.fetchall()]
    conn.close()
    return articles

def load_sales_history(article: str) -> List[Dict]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞"""
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute('''
        SELECT date, sales_count
        FROM sales_history
        WHERE article = ?
        ORDER BY date DESC
        LIMIT 30
    ''', (article,))
    history = [{'date': row[0], 'sales': row[1]} for row in cur.fetchall()]
    conn.close()
    return history

def update_sales_history(article: str, sales_count: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂"""
    today = datetime.now().date().strftime('%Y-%m-%d')
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute('''
        INSERT INTO sales_history (article, sales_count, date)
        VALUES (?, ?, ?)
        ON CONFLICT(article, date) DO UPDATE SET sales_count = ?
    ''', (article, sales_count, today, sales_count))
    conn.commit()
    conn.close()

def compute_sales_trend(history: List[Dict]) -> float:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –ø—Ä–æ–¥–∞–∂"""
    if len(history) < 2:
        return 0.0
        
    current = history[0]['sales']
    previous = history[1]['sales']
    
    if previous == 0:
        return 100.0 if current > 0 else 0.0
        
    return ((current - previous) / previous) * 100

def get_wb_product_info(article: str) -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ —á–µ—Ä–µ–∑ API Wildberries"""
    try:
        api_url = f"https://card.wb.ru/cards/detail?curr=rub&dest=-1257786&regions=80,64,83,4,38,33,70,82,69,30,86,75,40,1,66,48,110,31,22,71,114&nm={article}"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.get(api_url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if data.get('data', {}).get('products'):
                product = data['data']['products'][0]
                
                return {
                    'title': product.get('name', 'Unknown Product'),
                    'price': product.get('priceU', 0) / 100 if 'priceU' in product else product.get('price', 0),
                    'rating': product.get('rating', 0.0),
                    'reviews': product.get('reviewRating', 0),
                    'sales_count': product.get('soldQuantity', 0),
                    'views': product.get('views', 0),
                    'likes': product.get('likes', 0)
                }
    except Exception as e:
        print(f"Error getting product info: {str(e)}")
    return None

def format_sales_info(data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"""
    def esc(t):
        return str(t).replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
    
    if not data:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"
        
    return f"""
üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ*

üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {esc(data['title'])}
üí∞ –¶–µ–Ω–∞: {data['price']}‚ÇΩ
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {data['rating']}
üìù –û—Ç–∑—ã–≤–æ–≤: {data['reviews']}
üìà –ü—Ä–æ–¥–∞–∂: {data['sales_count']}
üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {data['views']}
üëç –õ–∞–π–∫–æ–≤: {data['likes']}
"""

def extract_likes_views(block: str) -> Tuple[int, int]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
    likes = 0
    views = 0
    
    # –ü–æ–∏—Å–∫ –ª–∞–π–∫–æ–≤
    likes_match = re.search(r'(\d+)\s*(?:–ª–∞–π–∫|like)', block, re.IGNORECASE)
    if likes_match:
        likes = int(likes_match.group(1))
    
    # –ü–æ–∏—Å–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    views_match = re.search(r'(\d+)\s*(?:–ø—Ä–æ—Å–º–æ—Ç—Ä|view|–∫–æ–º–º–µ–Ω—Ç–∞—Ä|comment)', block, re.IGNORECASE)
    if views_match:
        views = int(views_match.group(1))
    
    return likes, views

def process_text(text: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'\s+', ' ', text)
    # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'[^\w\s.,!?-]', '', text)
    return text.strip()

def format_results_message(results: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    if not results:
        return "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    message = "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n\n"
    for i, result in enumerate(results, 1):
        message += f"{i}. {result['title']}\n"
        if result.get('price'):
            message += f"üí∞ –¶–µ–Ω–∞: {result['price']}‚ÇΩ\n"
        if result.get('rating'):
            message += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {result['rating']}\n"
        message += "\n"
    
    return message

def estimate_impact(likes: int, views: int) -> Tuple[int, float, float]:
    """–û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    # –ï—Å–ª–∏ –ª–∞–π–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–µ—Ç, –∑–∞–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if likes == 0 and views == 0:
        likes, views = 1, 1
    
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
    approx_clients = int((likes + views) * 0.1)
    
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ 500‚ÇΩ)
    revenue = approx_clients * 500
    
    # –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ (–ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è)
    growth = (likes + views) * 0.1
    
    return approx_clients, revenue, growth

def global_search_serper_detailed(query: str) -> Dict:
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Serper API"""
    try:
        url = "https://google.serper.dev/search"
        headers = {
            'X-API-KEY': SERPER_API_KEY,
            'Content-Type': 'application/json'
        }
        payload = {
            'q': f"{query} site:wildberries.ru",
            'gl': 'ru',
            'hl': 'ru'
        }
        
        response = requests.post(url, headers=headers, json=payload)
        if response.status_code == 200:
            return response.json()
    except Exception as e:
        print(f"Error in global search: {str(e)}")
    return {}

def format_serper_results_detailed(search_data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    if not search_data or 'organic' not in search_data:
        return "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
    results = []
    for item in search_data['organic'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        title = item.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')
        link = item.get('link', '')
        snippet = item.get('snippet', '')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Å—Å—ã–ª–∫–∏
        article = link.split('/')[-1] if link else ''
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        clickable_title = f"[{title}]({link})" if link else title
        
        result = f"""
üì¶ {clickable_title}
üîó –ê—Ä—Ç–∏–∫—É–ª: {article}
üìù {snippet}
"""
        results.append(result)
    
    return "\n\n".join(results) 