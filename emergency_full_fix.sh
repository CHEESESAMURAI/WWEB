#!/bin/bash

echo "üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï Wild Analytics..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

cd /opt/wild-analytics || { error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; exit 1; }

log "üõë –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose down
docker stop $(docker ps -q) 2>/dev/null || true
pkill -f npm 2>/dev/null || true
pkill -f python 2>/dev/null || true

log "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
rm -f wild_analytics.db
rm -rf web-dashboard/backend/__pycache__
rm -rf web-dashboard/backend/*.pyc

log "üîß –°–æ–∑–¥–∞–Ω–∏–µ –ù–û–í–û–ì–û backend main.py..."
cat > web-dashboard/backend/main.py << 'EOF'
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional
import uvicorn
import logging
import sqlite3
import hashlib
import secrets
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Wild Analytics API", version="1.0.0")

# –ü–†–û–°–¢–´–ï CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—Ä–æ—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏
class UserLogin(BaseModel):
    email: str
    password: str

class UserRegister(BaseModel):
    email: str
    password: str
    name: Optional[str] = None

# –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()

def verify_password(password: str, hashed: str) -> bool:
    return hash_password(password) == hashed

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_simple_db():
    try:
        conn = sqlite3.connect('simple_users.db')
        c = conn.cursor()
        
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                email TEXT UNIQUE,
                password_hash TEXT,
                name TEXT,
                created_at TEXT
            )
        ''')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_hash = hash_password("password123")
        c.execute('''
            INSERT OR REPLACE INTO users (email, password_hash, name, created_at)
            VALUES (?, ?, ?, ?)
        ''', ("test@example.com", test_hash, "Test User", datetime.now().isoformat()))
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞. –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: test@example.com / password123")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")

# –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_user(email: str):
    try:
        conn = sqlite3.connect('simple_users.db')
        c = conn.cursor()
        c.execute('SELECT * FROM users WHERE email = ?', (email,))
        user = c.fetchone()
        conn.close()
        return user
    except:
        return None

def create_user(email: str, password: str, name: str = None):
    try:
        conn = sqlite3.connect('simple_users.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        c.execute('SELECT email FROM users WHERE email = ?', (email,))
        if c.fetchone():
            conn.close()
            return None
            
        password_hash = hash_password(password)
        c.execute('''
            INSERT INTO users (email, password_hash, name, created_at)
            VALUES (?, ?, ?, ?)
        ''', (email, password_hash, name, datetime.now().isoformat()))
        
        conn.commit()
        user_id = c.lastrowid
        conn.close()
        return user_id
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

# –ë–∞–∑–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/")
async def root():
    return {"message": "Wild Analytics API —Ä–∞–±–æ—Ç–∞–µ—Ç!", "status": "ok"}

@app.get("/health")
async def health():
    return {"status": "healthy", "service": "wild-analytics-backend"}

# –ü–†–û–°–¢–ê–Ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
@app.post("/auth/login")
async def login(data: UserLogin):
    try:
        logger.info(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {data.email}")
        
        user = get_user(data.email)
        if not user:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {data.email}")
            return {
                "success": False,
                "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        if not verify_password(data.password, user[2]):
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è: {data.email}")
            return {
                "success": False,
                "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
            }
        
        # –ü—Ä–æ—Å—Ç–æ–π "—Ç–æ–∫–µ–Ω"
        token = f"token_{user[0]}_{secrets.token_hex(8)}"
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: {data.email}")
        return {
            "success": True,
            "message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            "access_token": token,
            "user": {
                "id": user[0],
                "email": user[1],
                "name": user[3] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
        return {
            "success": False,
            "error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }

# –ü–†–û–°–¢–ê–Ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@app.post("/auth/register")
async def register(data: UserRegister):
    try:
        logger.info(f"üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data.email}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = get_user(data.email)
        if existing_user:
            logger.warning(f"‚ùå Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {data.email}")
            return {
                "success": False,
                "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            }
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = create_user(data.email, data.password, data.name)
        if not user_id:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data.email}")
            return {
                "success": False,
                "error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            }
        
        # –ü—Ä–æ—Å—Ç–æ–π "—Ç–æ–∫–µ–Ω"
        token = f"token_{user_id}_{secrets.token_hex(8)}"
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {data.email}")
        return {
            "success": True,
            "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
            "access_token": token,
            "user": {
                "id": user_id,
                "email": data.email,
                "name": data.name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return {
            "success": False,
            "error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        }

# –ü—Ä–æ—Å—Ç–æ–π dashboard
@app.get("/user/dashboard")
async def dashboard():
    return {
        "success": True,
        "data": {
            "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Wild Analytics!",
            "balance": 1000,
            "subscription": "Pro"
        }
    }

# –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.get("/test")
async def test():
    return {"message": "–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!", "timestamp": datetime.now().isoformat()}

if __name__ == "__main__":
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_simple_db()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Wild Analytics Backend...")
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=False)
EOF

log "üîß –°–æ–∑–¥–∞–Ω–∏–µ –ü–†–û–°–¢–û–ì–û requirements.txt..."
cat > web-dashboard/backend/requirements.txt << 'EOF'
fastapi==0.104.1
uvicorn==0.24.0
python-multipart==0.0.6
pydantic==2.5.0
EOF

log "üîß –°–æ–∑–¥–∞–Ω–∏–µ –ü–†–û–°–¢–û–ì–û frontend AuthContext..."
mkdir -p wild-analytics-web/src/contexts
cat > wild-analytics-web/src/contexts/AuthContext.tsx << 'EOF'
import React, { createContext, useContext, useState, ReactNode } from 'react';

interface User {
  id: number;
  email: string;
  name: string;
}

interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<{ success: boolean; error?: string }>;
  register: (email: string, password: string, name?: string) => Promise<{ success: boolean; error?: string }>;
  logout: () => void;
  isLoading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const API_URL = 'http://93.127.214.183:8000';

  const login = async (email: string, password: string) => {
    try {
      setIsLoading(true);
      console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', email);
      
      const response = await fetch(`${API_URL}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password })
      });
      
      const data = await response.json();
      console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
      
      if (data.success) {
        setUser(data.user);
        localStorage.setItem('token', data.access_token);
        return { success: true };
      } else {
        return { success: false, error: data.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è' };
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (email: string, password: string, name?: string) => {
    try {
      setIsLoading(true);
      console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', email);
      
      const response = await fetch(`${API_URL}/auth/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password, name })
      });
      
      const data = await response.json();
      console.log('üì• –û—Ç–≤–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', data);
      
      if (data.success) {
        setUser(data.user);
        localStorage.setItem('token', data.access_token);
        return { success: true };
      } else {
        return { success: false, error: data.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è' };
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('token');
  };

  return (
    <AuthContext.Provider value={{ user, login, register, logout, isLoading }}>
      {children}
    </AuthContext.Provider>
  );
};
EOF

log "üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–æ–≤..."
cat > web-dashboard/backend/.env << 'EOF'
LOG_LEVEL=INFO
EOF

cat > wild-analytics-web/.env << 'EOF'
REACT_APP_API_URL=http://93.127.214.183:8000
GENERATE_SOURCEMAP=false
EOF

log "üîß –ü—Ä–æ—Å—Ç–æ–π Docker Compose..."
cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  backend:
    build: ./web-dashboard/backend
    container_name: wild-analytics-backend
    ports:
      - "8000:8000"
    volumes:
      - ./web-dashboard/backend:/app
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1

  frontend:
    build: ./wild-analytics-web
    container_name: wild-analytics-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./wild-analytics-web/src:/app/src
    environment:
      - REACT_APP_API_URL=http://93.127.214.183:8000
      - CHOKIDAR_USEPOLLING=true
    restart: unless-stopped
    depends_on:
      - backend
EOF

log "üîß –ü—Ä–æ—Å—Ç–æ–π backend Dockerfile..."
cat > web-dashboard/backend/Dockerfile << 'EOF'
FROM python:3.11-slim
WORKDIR /app
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
EXPOSE 8000
CMD ["python", "main.py"]
EOF

log "üîß –ü—Ä–æ—Å—Ç–æ–π frontend Dockerfile..."
cat > wild-analytics-web/Dockerfile << 'EOF'
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
EOF

log "üßπ –û—á–∏—Å—Ç–∫–∞ Docker..."
docker system prune -f

log "üî® –°–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose build --no-cache

log "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
docker-compose up -d

log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (45 —Å–µ–∫—É–Ω–¥)..."
sleep 45

log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã..."
echo "=== –ö–û–ù–¢–ï–ô–ù–ï–†–´ ==="
docker ps

echo "=== BACKEND TEST ==="
curl -s http://93.127.214.183:8000/health

echo "=== LOGIN TEST ==="
curl -s -X POST http://93.127.214.183:8000/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"password123"}'

echo "=== REGISTER TEST ==="
curl -s -X POST http://93.127.214.183:8000/auth/register \
  -H "Content-Type: application/json" \
  -d '{"email":"newuser@test.com","password":"newpassword","name":"New User"}'

log "‚úÖ –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
log ""
log "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:"
log "  - Frontend: http://93.127.214.183:3000"
log "  - Backend: http://93.127.214.183:8000"
log ""
log "üë§ –ü–†–ê–í–ò–õ–¨–ù–´–ï —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:"
log "  - Email: test@example.com"
log "  - Password: password123"
log ""
log "üîß –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:"
log "  - docker logs wild-analytics-backend"
log "  - docker logs wild-analytics-frontend" 