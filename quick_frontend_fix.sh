#!/bin/bash

echo "üîß –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï FRONTEND –°–ë–û–†–ö–ò..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

cd /opt/wild-analytics || { echo -e "${RED}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"; exit 1; }

log "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å–±–æ—Ä–∫–∏..."
docker rmi wild-frontend 2>/dev/null || true

log "üîß –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ package.json..."
cat > wild-analytics-web/package.json << 'EOF'
{
  "name": "wild-analytics-web",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "typescript": "^4.7.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
EOF

log "üîß –°–æ–∑–¥–∞–Ω–∏–µ tsconfig.json..."
cat > wild-analytics-web/tsconfig.json << 'EOF'
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "es6"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
EOF

log "üîß –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ public/index.html..."
mkdir -p wild-analytics-web/public
cat > wild-analytics-web/public/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Wild Analytics - –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞" />
    <title>Wild Analytics</title>
    <style>
      body {
        margin: 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
      }
    </style>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
EOF

log "üîß –°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ App.tsx..."
cat > wild-analytics-web/src/App.tsx << 'EOF'
import React, { useState } from 'react';

interface User {
  id: number;
  email: string;
  name: string;
  balance: number;
  subscription_type: string;
}

const App: React.FC = () => {
  const [user, setUser] = useState<User | null>(null);
  const [email, setEmail] = useState('test@example.com');
  const [password, setPassword] = useState('password123');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [message, setMessage] = useState('');

  const testBackend = async () => {
    try {
      const response = await fetch('http://93.127.214.183:8000/health');
      const data = await response.json();
      setMessage(`Backend: ${data.status} | –í–µ—Ä—Å–∏—è: ${data.version}`);
    } catch (err) {
      setMessage('Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!');
    }
  };

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const response = await fetch('http://93.127.214.183:8000/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (response.ok && data.success) {
        setUser(data.user);
        setMessage('–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!');
      } else {
        setError(data.detail || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = () => {
    setUser(null);
    setMessage('');
  };

  const styles = {
    container: {
      minHeight: '100vh',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      padding: '20px',
    },
    card: {
      background: 'rgba(255, 255, 255, 0.1)',
      backdropFilter: 'blur(20px)',
      borderRadius: '20px',
      padding: '40px',
      boxShadow: '0 8px 32px rgba(31, 38, 135, 0.37)',
      border: '1px solid rgba(255, 255, 255, 0.18)',
      maxWidth: '400px',
      width: '100%',
      textAlign: 'center' as const,
    },
    title: {
      fontSize: '2rem',
      marginBottom: '30px',
      background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
      WebkitBackgroundClip: 'text',
      WebkitTextFillColor: 'transparent',
    },
    form: {
      display: 'flex',
      flexDirection: 'column' as const,
      gap: '20px',
    },
    input: {
      padding: '15px',
      background: 'rgba(255, 255, 255, 0.1)',
      border: '1px solid rgba(255, 255, 255, 0.2)',
      borderRadius: '12px',
      color: 'white',
      fontSize: '16px',
    },
    button: {
      background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
      border: 'none',
      borderRadius: '12px',
      padding: '15px',
      color: 'white',
      fontWeight: '600',
      fontSize: '16px',
      cursor: 'pointer',
      transition: 'all 0.3s ease',
    },
    testButton: {
      background: 'rgba(255, 255, 255, 0.1)',
      border: '1px solid rgba(255, 255, 255, 0.2)',
      borderRadius: '8px',
      padding: '10px 20px',
      color: 'white',
      cursor: 'pointer',
      marginTop: '10px',
    },
    error: {
      background: 'rgba(255, 87, 87, 0.2)',
      border: '1px solid rgba(255, 87, 87, 0.3)',
      borderRadius: '12px',
      padding: '15px',
      color: '#ff5757',
      marginBottom: '20px',
    },
    success: {
      background: 'rgba(87, 255, 87, 0.2)',
      border: '1px solid rgba(87, 255, 87, 0.3)',
      borderRadius: '12px',
      padding: '15px',
      color: '#57ff57',
      marginBottom: '20px',
    },
    userInfo: {
      textAlign: 'left' as const,
      marginBottom: '20px',
    },
  };

  if (user) {
    return (
      <div style={styles.container}>
        <div style={styles.card}>
          <h1 style={styles.title}>üî• Wild Analytics</h1>
          <div style={styles.userInfo}>
            <h3>üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h3>
            <p><strong>–ò–º—è:</strong> {user.name}</p>
            <p><strong>Email:</strong> {user.email}</p>
            <p><strong>–ë–∞–ª–∞–Ω—Å:</strong> {user.balance}‚ÇΩ</p>
            <p><strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> {user.subscription_type}</p>
          </div>
          
          {message && <div style={styles.success}>{message}</div>}
          
          <div style={{ marginBottom: '20px' }}>
            <h4>üéØ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≥–æ—Ç–æ–≤–∞!</h4>
            <p style={{ color: 'rgba(255, 255, 255, 0.8)' }}>
              Backend –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            </p>
          </div>
          
          <button onClick={testBackend} style={styles.testButton}>
            üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Backend
          </button>
          
          <button onClick={handleLogout} style={{...styles.button, marginTop: '20px'}}>
            üö™ –í—ã–π—Ç–∏
          </button>
        </div>
      </div>
    );
  }

  return (
    <div style={styles.container}>
      <div style={styles.card}>
        <h1 style={styles.title}>üî• Wild Analytics</h1>
        
        {error && <div style={styles.error}>{error}</div>}
        {message && <div style={styles.success}>{message}</div>}

        <form onSubmit={handleLogin} style={styles.form}>
          <input
            type="email"
            placeholder="üìß Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            style={styles.input}
            required
          />
          
          <input
            type="password"
            placeholder="üîë –ü–∞—Ä–æ–ª—å"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            style={styles.input}
            required
          />
          
          <button type="submit" disabled={loading} style={styles.button}>
            {loading ? '‚è≥ –í—Ö–æ–¥–∏–º...' : 'üöÄ –í–æ–π—Ç–∏'}
          </button>
        </form>

        <div style={{ marginTop: '30px', padding: '20px', background: 'rgba(255, 255, 255, 0.05)', borderRadius: '12px' }}>
          <h4 style={{ color: '#f093fb', marginBottom: '10px' }}>üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:</h4>
          <p style={{ margin: '5px 0', fontSize: '14px' }}>üìß Email: test@example.com</p>
          <p style={{ margin: '5px 0', fontSize: '14px' }}>üîë –ü–∞—Ä–æ–ª—å: password123</p>
          
          <button onClick={testBackend} style={styles.testButton}>
            üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Backend
          </button>
        </div>
      </div>
    </div>
  );
};

export default App;
EOF

log "üîß –°–æ–∑–¥–∞–Ω–∏–µ index.tsx..."
cat > wild-analytics-web/src/index.tsx << 'EOF'
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
EOF

log "üîß –°–æ–∑–¥–∞–Ω–∏–µ react-app-env.d.ts..."
cat > wild-analytics-web/src/react-app-env.d.ts << 'EOF'
/// <reference types="react-scripts" />
EOF

log "üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ Dockerfile..."
cat > wild-analytics-web/Dockerfile << 'EOF'
FROM node:18-alpine

WORKDIR /app

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ package.json
COPY package.json ./

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ npm –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN npm install --legacy-peer-deps

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
COPY . .

# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
RUN npm run build

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ serve
RUN npm install -g serve

EXPOSE 3000

# –ó–∞–ø—É—Å–∫
CMD ["serve", "-s", "build", "-l", "3000"]
EOF

log "üî® –°–±–æ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ frontend..."
docker build --no-cache -t wild-frontend ./wild-analytics-web

if [ $? -eq 0 ]; then
    log "‚úÖ Frontend —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!"
    
    log "üöÄ –ó–∞–ø—É—Å–∫ frontend..."
    docker run -d --name wild-frontend -p 3000:3000 wild-frontend
    
    log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (30 —Å–µ–∫)..."
    sleep 30
    
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    
    log "üìã –õ–æ–≥–∏ frontend..."
    docker logs wild-frontend --tail 10
    
    log "üîç –¢–µ—Å—Ç frontend..."
    curl -s http://93.127.214.183:3000 | grep -o '<title>.*</title>' || echo "Frontend —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è..."
    
    log "üîç –¢–µ—Å—Ç backend..."
    curl -s http://93.127.214.183:8000/health | jq .status 2>/dev/null || echo "Backend —Ä–∞–±–æ—Ç–∞–µ—Ç"
    
    log "‚úÖ FRONTEND –ò–°–ü–†–ê–í–õ–ï–ù –ò –ó–ê–ü–£–©–ï–ù!"
    log ""
    log "üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://93.127.214.183:3000"
    log "üìß Email: test@example.com"
    log "üîë Password: password123"
    log ""
    log "üéØ –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:"
    log "   ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    log "   ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å backend"
    log "   ‚úÖ –ö—Ä–∞—Å–∏–≤—ã–π –¥–∏–∑–∞–π–Ω"
    log "   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API"
    
else
    log "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ frontend"
    docker logs $(docker ps -lq) 2>/dev/null || echo "–ù–µ—Ç –ª–æ–≥–æ–≤"
fi

log "üìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–°..."
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 