import logging
import requests
import json
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from datetime import datetime, timedelta
import io
import asyncio
from mpstats_browser_utils import mpstats_api_request, get_item_sales_browser
from wb_product_info import get_wb_product_info
import pandas as pd
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.rcParams['font.family'] = ['DejaVu Sans']
plt.rcParams['font.size'] = 10
plt.rcParams['axes.unicode_minus'] = False

class SupplyPlanner:
    def __init__(self):
        self.target_stock_days = 15  # –¶–µ–ª–µ–≤–æ–π –∑–∞–ø–∞—Å –≤ –¥–Ω—è—Ö
        self.min_stock_days = 3      # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (–∫—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞)
        self.warning_stock_days = 10 # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–∂–µ–ª—Ç–∞—è –∑–æ–Ω–∞)
        
    async def analyze_product_supply_needs(self, article):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        try:
            logger.info(f"Analyzing supply needs for article: {article}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ —Å WB
            wb_data = await get_wb_product_info(article)
            if not wb_data:
                logger.warning(f"No WB data for article {article}")
                return None
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∏–∑ MPStats
            end_date = datetime.now().strftime('%Y-%m-%d')
            start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
            sales_data = await get_item_sales_browser(article, start_date, end_date)
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
            product_info = self._parse_product_data(wb_data, sales_data, article)
            
            if product_info:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ—Å—Ç–∞–≤–æ–∫
                supply_metrics = self._calculate_supply_metrics(product_info)
                product_info.update(supply_metrics)
                
            return product_info
            
        except Exception as e:
            logger.error(f"Error analyzing supply needs for {article}: {str(e)}")
            return None
    
    def _parse_product_data(self, wb_data, sales_data, article):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ"""
        try:
            product_info = {}
            
            if wb_data and isinstance(wb_data, dict):
                # WB API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                product_info['article'] = article
                product_info['name'] = wb_data.get('name', '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ WB –¥–∞–Ω–Ω—ã—Ö
                if 'stocks' in wb_data and 'total' in wb_data['stocks']:
                    product_info['current_stock'] = wb_data['stocks']['total']
                else:
                    product_info['current_stock'] = 0
                
                # –¶–µ–Ω–∞
                if 'price' in wb_data and 'current' in wb_data['price']:
                    product_info['price'] = wb_data['price']['current']
                else:
                    product_info['price'] = 0
                
                product_info['rating'] = wb_data.get('rating', 0)
                product_info['reviews_count'] = wb_data.get('feedbacks', 0)
                product_info['brand'] = wb_data.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω')
                
            elif wb_data and isinstance(wb_data, list) and len(wb_data) > 0:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
                product = wb_data[0]
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                product_info['article'] = article
                product_info['name'] = product.get('name', '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ WB –¥–∞–Ω–Ω—ã—Ö
                total_stock = 0
                if 'stocks' in product:
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö WB —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
                    total_stock = product['stocks'].get('total', 0)
                elif 'totalQuantity' in product:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±—â–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
                    total_stock = product.get('totalQuantity', 0)
                elif 'quantity' in product:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
                    total_stock = product.get('quantity', 0)
                
                product_info['current_stock'] = total_stock
                
                # –¶–µ–Ω–∞
                if 'price' in product and 'current' in product['price']:
                    product_info['price'] = product['price']['current']
                elif 'salePriceU' in product:
                    product_info['price'] = product.get('salePriceU', 0) / 100
                elif 'priceU' in product:
                    product_info['price'] = product.get('priceU', 0) / 100
                else:
                    product_info['price'] = 0
                
                product_info['rating'] = product.get('rating', 0)
                product_info['reviews_count'] = product.get('feedbacks', 0)
                product_info['brand'] = product.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω')
                
            else:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö WB –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                product_info = {
                    'article': article,
                    'name': f'–¢–æ–≤–∞—Ä {article}',
                    'current_stock': 0,
                    'price': 0,
                    'rating': 0,
                    'reviews_count': 0,
                    'brand': '–ù–µ —É–∫–∞–∑–∞–Ω'
                }
            
            # –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏–∑ MPStats
            if sales_data and isinstance(sales_data, list) and len(sales_data) > 0:
                # MPStats API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä—è–º–æ —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö
                product_info['daily_sales'] = self._calculate_daily_sales(sales_data)
            elif sales_data and 'data' in sales_data and sales_data['data']:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –æ–±—ë—Ä—Ç–∫–æ–π
                product_info['daily_sales'] = self._calculate_daily_sales(sales_data['data'])
            else:
                # –ï—Å–ª–∏ MPStats –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–µ–ª–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤
                reviews = product_info.get('reviews_count', 0)
                if reviews > 0:
                    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1 –æ—Ç–∑—ã–≤ = 10-20 –ø—Ä–æ–¥–∞–∂, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–≤–∞—Ä–∞
                    estimated_total_sales = reviews * 15
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–µ—Ç—Å—è —É–∂–µ –º–∏–Ω–∏–º—É–º 60 –¥–Ω–µ–π
                    estimated_days = max(60, reviews)
                    product_info['daily_sales'] = estimated_total_sales / estimated_days
                else:
                    product_info['daily_sales'] = 0.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            
            product_info['weekly_sales'] = product_info['daily_sales'] * 7
            product_info['monthly_sales'] = product_info['daily_sales'] * 30
                
            return product_info
            
        except Exception as e:
            logger.error(f"Error parsing product data: {str(e)}")
            return None
    
    def _calculate_daily_sales(self, sales_data):
        """–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂"""
        try:
            if not sales_data:
                return 0
                
            # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
            recent_sales = []
            
            for item in sales_data:
                if 'sales' in item and item['sales']:
                    recent_sales.append(item['sales'])
                    
            if recent_sales:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
                avg_daily_sales = sum(recent_sales) / len(recent_sales)
                return avg_daily_sales
            
            return 0
            
        except Exception as e:
            logger.error(f"Error calculating daily sales: {str(e)}")
            return 0
    
    def _calculate_supply_metrics(self, product_info):
        """–†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫"""
        try:
            metrics = {}
            
            current_stock = product_info.get('current_stock', 0)
            daily_sales = product_info.get('daily_sales', 0)
            
            # –î–Ω–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
            if daily_sales > 0:
                metrics['days_until_zero'] = current_stock / daily_sales
            else:
                metrics['days_until_zero'] = float('inf') if current_stock > 0 else 0
            
            # –°—Ç–∞—Ç—É—Å –∑–∞–ø–∞—Å–∞ (—Ü–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞)
            if metrics['days_until_zero'] < self.min_stock_days:
                metrics['stock_status'] = 'critical'  # üî¥
                metrics['status_emoji'] = 'üî¥'
                metrics['status_text'] = '–ö—Ä–∏—Ç–∏—á–Ω—ã–π'
            elif metrics['days_until_zero'] < self.warning_stock_days:
                metrics['stock_status'] = 'warning'   # üü°
                metrics['status_emoji'] = 'üü°'
                metrics['status_text'] = '–í–Ω–∏–º–∞–Ω–∏–µ'
            else:
                metrics['stock_status'] = 'good'      # üü¢
                metrics['status_emoji'] = 'üü¢'
                metrics['status_text'] = '–•–æ—Ä–æ—à–æ'
            
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–±—ä–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏
            if daily_sales > 0:
                recommended_supply = max(0, (self.target_stock_days * daily_sales) - current_stock)
                metrics['recommended_supply'] = int(recommended_supply)
            else:
                metrics['recommended_supply'] = 0
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Å—Ç–∞—Ç–∫–æ–≤ (–¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞)
            if self.target_stock_days > 0:
                metrics['stock_progress'] = min(100, (metrics['days_until_zero'] / self.target_stock_days) * 100)
            else:
                metrics['stock_progress'] = 0
                
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
            if daily_sales > 0 and current_stock > 0:
                zero_date = datetime.now() + timedelta(days=metrics['days_until_zero'])
                metrics['estimated_zero_date'] = zero_date.strftime('%d.%m.%Y')
            else:
                metrics['estimated_zero_date'] = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'
            
            return metrics
            
        except Exception as e:
            logger.error(f"Error calculating supply metrics: {str(e)}")
            return {}

    async def analyze_multiple_products(self, articles_list):
        """–ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            logger.info(f"Analyzing supply needs for {len(articles_list)} products")
            
            results = []
            
            for article in articles_list:
                try:
                    product_analysis = await self.analyze_product_supply_needs(article)
                    if product_analysis:
                        results.append(product_analysis)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.5)
                    
                except Exception as e:
                    logger.error(f"Error analyzing article {article}: {str(e)}")
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ (—Å–Ω–∞—á–∞–ª–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ, –ø–æ—Ç–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
            results.sort(key=lambda x: (
                0 if x.get('stock_status') == 'critical' else
                1 if x.get('stock_status') == 'warning' else 2,
                x.get('days_until_zero', float('inf'))
            ))
            
            return results
            
        except Exception as e:
            logger.error(f"Error in multiple products analysis: {str(e)}")
            return []

    def generate_supply_planning_charts(self, products_data, user_id):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫"""
        try:
            if not products_data:
                return None
                
            # –ì—Ä–∞—Ñ–∏–∫ 1: –û–±–∑–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
            status_chart = self._create_status_overview_chart(products_data, user_id)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
            details_chart = self._create_detailed_analysis_chart(products_data, user_id)
            
            return {
                'status_overview': status_chart,
                'detailed_analysis': details_chart
            }
            
        except Exception as e:
            logger.error(f"Error generating supply planning charts: {str(e)}")
            return None
    
    def _create_status_overview_chart(self, products_data, user_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±–∑–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤"""
        try:
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 8))
            
            # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_counts = {'critical': 0, 'warning': 0, 'good': 0}
            for product in products_data:
                status = product.get('stock_status', 'good')
                status_counts[status] += 1
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
            labels = ['üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–π', 'üü° –í–Ω–∏–º–∞–Ω–∏–µ', 'üü¢ –•–æ—Ä–æ—à–æ']
            sizes = [status_counts['critical'], status_counts['warning'], status_counts['good']]
            colors = ['#ff4444', '#ffaa00', '#00aa44']
            
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            non_zero_data = [(label, size, color) for label, size, color in zip(labels, sizes, colors) if size > 0]
            if non_zero_data:
                labels, sizes, colors = zip(*non_zero_data)
                
                wedges, texts, autotexts = ax1.pie(sizes, labels=labels, colors=colors, autopct='%1.0f%%',
                                                  startangle=90, textprops={'fontsize': 10})
                ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ—Å—Ç–∞—Ç–∫–æ–≤', fontsize=12, fontweight='bold', pad=20)
            else:
                ax1.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', ha='center', va='center', fontsize=12)
                ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ—Å—Ç–∞—Ç–∫–æ–≤', fontsize=12, fontweight='bold', pad=20)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è
            critical_products = [p for p in products_data if p.get('stock_status') in ['critical', 'warning']]
            critical_products = sorted(critical_products, key=lambda x: x.get('days_until_zero', 0))[:10]
            
            if critical_products:
                y_pos = np.arange(len(critical_products))
                days_left = [p.get('days_until_zero', 0) for p in critical_products]
                names = [p.get('name', '')[:30] + '...' if len(p.get('name', '')) > 30 
                        else p.get('name', '') for p in critical_products]
                
                colors = ['#ff4444' if p.get('stock_status') == 'critical' else '#ffaa00' 
                         for p in critical_products]
                
                bars = ax2.barh(y_pos, days_left, color=colors, alpha=0.7)
                ax2.set_yticks(y_pos)
                ax2.set_yticklabels(names, fontsize=9)
                ax2.set_xlabel('–î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤')
                ax2.set_title('–¢–æ–≤–∞—Ä—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è', fontsize=12, fontweight='bold', pad=20)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
                ax2.axvline(x=self.min_stock_days, color='red', linestyle='--', alpha=0.7, 
                           label=f'–ú–∏–Ω–∏–º—É–º ({self.min_stock_days} –¥–Ω–µ–π)')
                ax2.axvline(x=self.warning_stock_days, color='orange', linestyle='--', alpha=0.7,
                           label=f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({self.warning_stock_days} –¥–Ω–µ–π)')
                ax2.legend()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
                for i, (bar, days) in enumerate(zip(bars, days_left)):
                    width = bar.get_width()
                    ax2.text(width + 0.1, bar.get_y() + bar.get_height()/2, 
                            f'{days:.1f}', ha='left', va='center', fontsize=8)
            else:
                ax2.text(0.5, 0.5, '–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–æ—Ä–º–µ!', ha='center', va='center', 
                        fontsize=12, transform=ax2.transAxes)
                ax2.set_title('–¢–æ–≤–∞—Ä—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è', fontsize=12, fontweight='bold', pad=20)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_path = f'supply_status_overview_{user_id}.png'
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            return chart_path
            
        except Exception as e:
            logger.error(f"Error creating status overview chart: {str(e)}")
            return None
    
    def _create_detailed_analysis_chart(self, products_data, user_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            if not products_data:
                return None
                
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 15 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_products = products_data[:15]
            
            fig, ax = plt.subplots(figsize=(16, max(8, len(display_products) * 0.6)))
            
            y_positions = np.arange(len(display_products))
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            current_stocks = [p.get('current_stock', 0) for p in display_products]
            recommended_supplies = [p.get('recommended_supply', 0) for p in display_products]
            days_left = [p.get('days_until_zero', 0) for p in display_products]
            
            # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            bar_height = 0.35
            
            # –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
            bars1 = ax.barh(y_positions - bar_height/2, current_stocks, bar_height, 
                           label='–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫', color='lightblue', alpha=0.8)
            
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏
            bars2 = ax.barh(y_positions + bar_height/2, recommended_supplies, bar_height,
                           label='–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞', color='lightgreen', alpha=0.8)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏
            product_names = []
            for p in display_products:
                name = p.get('name', '')[:25] + '...' if len(p.get('name', '')) > 25 else p.get('name', '')
                emoji = p.get('status_emoji', 'üü¢')
                days = p.get('days_until_zero', 0)
                product_names.append(f"{emoji} {name}\n({days:.1f} –¥–Ω–µ–π)")
            
            ax.set_yticks(y_positions)
            ax.set_yticklabels(product_names, fontsize=9)
            ax.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞')
            ax.set_title('–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫', fontsize=14, fontweight='bold', pad=20)
            ax.legend()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
            for i, (bar1, bar2, stock, supply) in enumerate(zip(bars1, bars2, current_stocks, recommended_supplies)):
                if stock > 0:
                    ax.text(bar1.get_width() + max(current_stocks) * 0.01, bar1.get_y() + bar1.get_height()/2, 
                           f'{int(stock)}', ha='left', va='center', fontsize=8)
                if supply > 0:
                    ax.text(bar2.get_width() + max(recommended_supplies) * 0.01, bar2.get_y() + bar2.get_height()/2, 
                           f'{int(supply)}', ha='left', va='center', fontsize=8)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_path = f'supply_detailed_analysis_{user_id}.png'
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            return chart_path
            
        except Exception as e:
            logger.error(f"Error creating detailed analysis chart: {str(e)}")
            return None

def format_supply_planning_report(products_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ—Å—Ç–∞–≤–æ–∫"""
    try:
        if not products_data:
            return "‚ùå *–î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {'critical': 0, 'warning': 0, 'good': 0}
        total_recommended_supply = 0
        
        for product in products_data:
            status = product.get('stock_status', 'good')
            status_counts[status] += 1
            total_recommended_supply += product.get('recommended_supply', 0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        report = f"üì¶ *–ü–õ–ê–ù –ü–û–°–¢–ê–í–û–ö*\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_products = len(products_data)
        report += f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}\n"
        report += f"üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ: {status_counts['critical']} —Ç–æ–≤–∞—Ä–æ–≤\n"
        report += f"üü° –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è: {status_counts['warning']} —Ç–æ–≤–∞—Ä–æ–≤\n"
        report += f"üü¢ –í –Ω–æ—Ä–º–µ: {status_counts['good']} —Ç–æ–≤–∞—Ä–æ–≤\n"
        report += f"üì¶ –û–±—â–∏–π –æ–±—ä–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫: {int(total_recommended_supply)} –µ–¥–∏–Ω–∏—Ü\n\n"
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫)
        critical_products = [p for p in products_data if p.get('stock_status') == 'critical']
        if critical_products:
            report += f"üö® *–°–†–û–ß–ù–û –¢–†–ï–ë–£–Æ–¢ –ü–û–°–¢–ê–í–ö–ò ({len(critical_products)} —Ç–æ–≤–∞—Ä–æ–≤):*\n\n"
            for product in critical_products[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                name = product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')[:40]
                article = product.get('article', '')
                current_stock = product.get('current_stock', 0)
                days_left = product.get('days_until_zero', 0)
                recommended = product.get('recommended_supply', 0)
                daily_sales = product.get('daily_sales', 0)
                
                report += f"üî¥ *{name}*\n"
                report += f"   –ê—Ä—Ç–∏–∫—É–ª: `{article}`\n"
                report += f"   –û—Å—Ç–∞—Ç–æ–∫: {int(current_stock)} —à—Ç. (–Ω–∞ {days_left:.1f} –¥–Ω–µ–π)\n"
                report += f"   –ü—Ä–æ–¥–∞–∂–∏: {daily_sales:.1f} —à—Ç/–¥–µ–Ω—å\n"
                report += f"   ‚û°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å: *{int(recommended)} —à—Ç.*\n\n"
            
            if len(critical_products) > 10:
                report += f"... –∏ –µ—â—ë {len(critical_products) - 10} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        
        # –¢–æ–≤–∞—Ä—ã –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ
        warning_products = [p for p in products_data if p.get('stock_status') == 'warning']
        if warning_products:
            report += f"‚ö†Ô∏è *–ù–ê –ö–û–ù–¢–†–û–õ–ï ({len(warning_products)} —Ç–æ–≤–∞—Ä–æ–≤):*\n\n"
            for product in warning_products[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                name = product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')[:40]
                article = product.get('article', '')
                current_stock = product.get('current_stock', 0)
                days_left = product.get('days_until_zero', 0)
                recommended = product.get('recommended_supply', 0)
                daily_sales = product.get('daily_sales', 0)
                
                report += f"üü° *{name}*\n"
                report += f"   –ê—Ä—Ç–∏–∫—É–ª: `{article}`\n"
                report += f"   –û—Å—Ç–∞—Ç–æ–∫: {int(current_stock)} —à—Ç. (–Ω–∞ {days_left:.1f} –¥–Ω–µ–π)\n"
                report += f"   –ü—Ä–æ–¥–∞–∂–∏: {daily_sales:.1f} —à—Ç/–¥–µ–Ω—å\n"
                report += f"   ‚û°Ô∏è –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞: {int(recommended)} —à—Ç.\n\n"
            
            if len(warning_products) > 5:
                report += f"... –∏ –µ—â—ë {len(warning_products) - 5} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        
        # –¢–æ–≤–∞—Ä—ã –≤ –Ω–æ—Ä–º–µ - –ü–û–ö–ê–ó–´–í–ê–ï–ú –î–ï–¢–ê–õ–ò
        good_products = [p for p in products_data if p.get('stock_status') == 'good']
        if good_products:
            avg_days = sum(p.get('days_until_zero', 0) for p in good_products) / len(good_products)
            report += f"‚úÖ *–¢–û–í–ê–†–´ –í –ù–û–†–ú–ï ({len(good_products)} —Ç–æ–≤–∞—Ä–æ–≤):*\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–æ—Ä–º–µ (–ø–µ—Ä–≤—ã–µ 10)
            for product in good_products[:10]:
                name = product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')[:40]
                article = product.get('article', '')
                current_stock = product.get('current_stock', 0)
                days_left = product.get('days_until_zero', 0)
                daily_sales = product.get('daily_sales', 0)
                recommended = product.get('recommended_supply', 0)
                price = product.get('price', 0)
                brand = product.get('brand', '')
                
                report += f"\nüü¢ *{name}*\n"
                report += f"   –ë—Ä–µ–Ω–¥: {brand}\n"
                report += f"   –ê—Ä—Ç–∏–∫—É–ª: `{article}`\n"
                report += f"   –¶–µ–Ω–∞: {price}‚ÇΩ\n"
                report += f"   –û—Å—Ç–∞—Ç–æ–∫: {int(current_stock)} —à—Ç. (–Ω–∞ {days_left:.1f} –¥–Ω–µ–π)\n"
                report += f"   –ü—Ä–æ–¥–∞–∂–∏: {daily_sales:.1f} —à—Ç/–¥–µ–Ω—å\n"
                if recommended > 0:
                    report += f"   ‚û°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞: {int(recommended)} —à—Ç.\n"
                else:
                    report += f"   ‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è\n"
            
            if len(good_products) > 10:
                report += f"\n... –∏ –µ—â—ë {len(good_products) - 10} —Ç–æ–≤–∞—Ä–æ–≤\n"
            
            report += f"\n*–°—Ä–µ–¥–Ω–∏–π –∑–∞–ø–∞—Å:* {avg_days:.1f} –¥–Ω–µ–π\n\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report += f"üí° *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:*\n"
        if critical_products:
            report += f"üî¥ –°—Ä–æ—á–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è {len(critical_products)} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
        if warning_products:
            report += f"üü° –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è {len(warning_products)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ\n"
        if good_products:
            report += f"üü¢ –¢–æ–≤–∞—Ä—ã –≤ –Ω–æ—Ä–º–µ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –ø—Ä–æ–¥–∞–∂\n"
        report += f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–æ–≤\n"
        report += f"‚è∞ –û–±–Ω–æ–≤–ª—è–π—Ç–µ –∞–Ω–∞–ª–∏–∑ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ\n\n"
        
        report += f"üïê *–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:* {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}"
        
        return report
        
    except Exception as e:
        logger.error(f"Error formatting supply planning report: {str(e)}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ—Å—Ç–∞–≤–æ–∫"

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
supply_planner = SupplyPlanner()